<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown基本语法总结</title>
      <link href="/2020-04-27-markdown-ji-ben-yu-fa-zong-jie.html"/>
      <url>/2020-04-27-markdown-ji-ben-yu-fa-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><h3 id="1-段落和换行"><a href="#1-段落和换行" class="headerlink" title="1. 段落和换行"></a>1. 段落和换行</h3><p><strong>语法1：空行换行</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是第一个段落......(这里有一个空行)这是第二个段落......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong><br>段落1…..</p><p>段落2…..</p><p><strong>语法2：硬换行</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是第一个段落....(这里有两个及以上的空格)这是第二个段落....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>实际效果:</strong><br>这是第一个段落….<br>这是第二个段落….</p><h3 id="2-标题"><a href="#2-标题" class="headerlink" title="2.标题"></a>2.标题</h3><p>Markdown支持两种样式的标题书写形式：Setext和atx。</p><ul><li><strong>Setext书写形式</strong></li></ul><p><strong>语法：使用=和-来区分标记级别</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">This is an h1<span class="token punctuation">=============</span></span>    <span class="token title important">this is an h2<span class="token punctuation">-------------</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：<em>其中=和-的长度是任意的</em><br><strong>实际效果：</strong>  </p><h1 id="This-is-an-h1"><a href="#This-is-an-h1" class="headerlink" title="This is an h1"></a>This is an h1</h1><h2 id="this-is-an-h2"><a href="#this-is-an-h2" class="headerlink" title="this is an h2"></a>this is an h2</h2><ul><li><strong>atx书写形式</strong></li></ul><p><strong>语法：使用#来区分标题级别（标题和#号之间要加空格）</strong>   </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span>...<span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong>  </p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>…</p><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h3 id="3-块引用"><a href="#3-块引用" class="headerlink" title="3.块引用"></a>3.块引用</h3><p><strong>语法：使用&gt;字符引用段落</strong>  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> This is a block quote with tow paragraphs.<span class="token blockquote punctuation">></span> This is the paragraph two.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong>  </p><blockquote><p>This is a block quote with tow paragraphs.</p></blockquote><blockquote><p>This is the paragraph two.</p></blockquote><h3 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h3><ul><li><strong>无序列表</strong></li></ul><p><strong>语法：使用*、+或-后接列表项</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> yesterday<span class="token list punctuation">*</span> today<span class="token list punctuation">*</span> tomorrow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于：  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">+</span> yesterday<span class="token list punctuation">+</span> today<span class="token list punctuation">+</span> tomorrow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于：  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> yesterday<span class="token list punctuation">-</span> today<span class="token list punctuation">-</span> tomorrow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong>  </p><ul><li>yesterday</li><li>today</li><li>tomorrow</li></ul><ul><li><strong>有序列表</strong></li></ul><p><strong>语法：使用数字加句号（英文）后接列表项</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> Red<span class="token list punctuation">2.</span> Green<span class="token list punctuation">3.</span> Blue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>注：其中的数字序号对实际生成的序号没有影响。</em><br><strong>实际效果：</strong>  </p><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h3 id="5-代码块"><a href="#5-代码块" class="headerlink" title="5.代码块"></a>5.代码块</h3><p><strong>语法：在每一行都缩进4个空格或1个水平制表符</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>注：只有第一个水平制表符或头四个空格会在实际展现时移除，其余的都会在格式中保留下来。</em><br><strong>实际效果：</strong></p><pre><code>&lt;div&gt;    hello world;&lt;/div&gt;</code></pre><h3 id="6-水平线"><a href="#6-水平线" class="headerlink" title="6.水平线"></a>6.水平线</h3><p><strong>语法：一行中只有三个及以上的-、*或_。*和-之间可以有空格。</strong></p><pre class="line-numbers language-none"><code class="language-none">* * ****---___<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong></p><hr><h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><h3 id="1-链接"><a href="#1-链接" class="headerlink" title="1.链接"></a>1.链接</h3><p>Markdown支持两种链接形式：<code>内联</code>和<code>引用</code>。   </p><pre class="line-numbers language-none"><code class="language-none">语法：[链接文本](链接url &quot;标题&quot;) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际效果：</p><p>This is an <a href="http://example.com/" title="example网站">example</a></p><p>也可以先给链接配置id，后面统一配置链接地址和连接标题。语法如下：</p><pre class="line-numbers language-none"><code class="language-none">[链接文本1][链接id1][链接文本2][链接id2][id1]: 链接url  &quot;标题&quot;[id2]: 链接url  &quot;标题&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong></p><p>This is the <a href="http://example1.com/" title="example1站点">example1</a>.<br>This is the <a href="http://example2.com/" title="wxample2站点">example2</a>.</p><h3 id="2-强调"><a href="#2-强调" class="headerlink" title="2.强调"></a>2.强调</h3><p>用单<code>*</code>或单<code>_</code>包裹的文本将会使用<code>&lt;em&gt;</code>标签包裹；用双<code>*</code>或双<code>_</code>包裹的文本将会使用<code>&lt;strong&gt;</code>标签包裹。<br><strong>语法如下：</strong> </p><pre class="line-numbers language-none"><code class="language-none">*重要内容*_重要内容_**更重要的内容**__更重要的内容__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong></p><p>这里有 <em>重要内容</em>。 </p><p>这里有 <em>重要内容</em></p><p>这里有<strong>更重要的内容</strong>。</p><p>这里有 __更重要的内容__。</p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h3><p><strong>语法：使用重音符号`包裹代码片段。</strong><br><strong>实际效果：</strong></p><p>Use <code>console.log(result)</code> to print the final result.</p><p>如果代码片段中有使用到<code>`</code>符号，可以使用多重<code>`</code>包裹该符号。语法如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">我们可以使用<span class="token code-snippet code keyword">`` ` ``</span>符号来插入代码片段。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实际效果：</strong></p><p>我们可以使用<code>`</code>符号来插入代码片段。</p><h3 id="4-图片"><a href="#4-图片" class="headerlink" title="4.图片"></a>4.图片</h3><p>语法类似于链接。<br><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">![Alt text](&#x2F;path&#x2F;to&#x2F;img.jpg)![Alt text](&#x2F;path&#x2F;to&#x2F;img.jpg &quot;Optional title&quot;)![Alt text][id][id]: url&#x2F;to&#x2F;image &quot;Optional title&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式无法设置图片的尺寸，要设定尺寸可以使用<code>&lt;img&gt;</code>标签。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-自动链接"><a href="#1-自动链接" class="headerlink" title="1.自动链接"></a>1.自动链接</h3><p>“自动”创建URL和email地址链接。<br><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">个人网址：&lt;http:&#x2F;&#x2F;example.com&gt;个人邮箱：&lt;address@example.com&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>实际效果：</strong></p><p>个人网址：<a href="http://example.com/">http://example.com</a><br>个人邮箱：<a href="mailto:&#x61;&#100;&#x64;&#114;&#x65;&#115;&#x73;&#x40;&#x65;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#x61;&#100;&#x64;&#114;&#x65;&#115;&#x73;&#x40;&#x65;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a></p><h3 id="2-反斜杠转义"><a href="#2-反斜杠转义" class="headerlink" title="2.反斜杠转义"></a>2.反斜杠转义</h3><p>需要展示一些特殊字符，如果不进行转义，markdown文档会将其视作语法符号。Markdown为下面字符提供反斜杠转义。</p><pre class="line-numbers language-none"><code class="language-none">\  反斜线&#96;  重音符*  星号_  下划线&#123;&#125; 花括号[] 方括号() 圆括号#  井号-  连字符.  句号!  感叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">+、\-、\*、&#x2F;是最基本的四则运算。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实际效果：</strong></p><p>+、-、*、/是最基本的四则运算。</p><h3 id="3-表格"><a href="#3-表格" class="headerlink" title="3.表格"></a>3.表格</h3><p><strong>语法：</strong>  </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">|</span>标题<span class="token number">1</span><span class="token operator">|</span>标题<span class="token number">2</span><span class="token operator">|</span>标题<span class="token number">3</span><span class="token operator">|</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span><span class="token operator">|</span>文本<span class="token number">1</span><span class="token operator">|</span>文本<span class="token number">2</span><span class="token operator">|</span>文本<span class="token number">3</span><span class="token operator">|</span><span class="token operator">|</span>文本<span class="token number">4</span><span class="token operator">|</span>文本<span class="token number">5</span><span class="token operator">|</span>文本<span class="token number">6</span><span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong><br>|标题1|标题2|标题3|<br>|—-|—-|—-|<br>|文本1|文本2|文本3|<br>|文本4|文本5|文本6|</p><h3 id="4-目录锚点"><a href="#4-目录锚点" class="headerlink" title="4.目录锚点"></a>4.目录锚点</h3><p><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">[1. 目录1](#cate1)  [2. 目录2](#cate2)  [3. 目录3](#cate3) ...### &lt;span id&#x3D;&quot;cate1&quot;&gt;目录1&lt;&#x2F;span&gt;### &lt;span id&#x3D;&quot;cate2&quot;&gt;目录2&lt;&#x2F;span&gt;### &lt;span id&#x3D;&quot;cate3&quot;&gt;目录3&lt;&#x2F;span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong><br><a href="#cate1">1. 目录1</a><br><a href="#cate2">2. 目录2</a><br><a href="#cate3">3. 目录3</a>  </p><p>…</p><h3 id="目录1"><a href="#目录1" class="headerlink" title="目录1"></a><span id="cate1">目录1</span></h3><h3 id="目录2"><a href="#目录2" class="headerlink" title="目录2"></a><span id="cate2">目录2</span></h3><h3 id="目录3"><a href="#目录3" class="headerlink" title="目录3"></a><span id="cate3">目录3</span></h3>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6常用特性总结</title>
      <link href="/2019-10-30-es6-chang-yong-te-xing-zong-jie.html"/>
      <url>/2019-10-30-es6-chang-yong-te-xing-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-const、let关键字"><a href="#1-const、let关键字" class="headerlink" title="1.const、let关键字"></a>1.const、let关键字</h3><p>let用来声明一个局部变量，用法类似于var，但是它所声明的变量，只在let声明所在的块级作用域内有效。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//ReferenceError: a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>const用来声明一个只读的常量，作用域与let相同（声明所在的块级作用域），一旦定义之后不可以修改，不过如果声明的变量如果是引用类型的，可以修改它的属性。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>          <span class="token comment">//TypeError: invalid assignment to const `PI'</span><span class="token keyword">const</span> <span class="token constant">PERSON</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token constant">PERSON</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Jack'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PERSON</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//'Jack'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h3><ul><li><p>箭头函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//或</span><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span> <span class="token operator">=></span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>this在箭头函数中的使用<br>箭头函数体内的this对象，是定义时所在的对象，不是使用时所在的对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token punctuation">;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    user<span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>    <span class="token function-variable function">sayHello</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//this指向运行时所在的作用域</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span class="token comment">//this指向定义时的对象</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先后输出“hello,Mike”和“hello,Tom”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数参数的默认值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//hello,world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>rest参数<br>rest参数（形式为…变量名）用于获取函数的多余参数，rest参数是一个数组对象，可以用于替代arguments对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//普通排序写法，使用arguments</span><span class="token keyword">function</span> <span class="token function">sortNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用rest参数</span><span class="token keyword">const</span> <span class="token function-variable function">sortNumbers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>numbers</span><span class="token punctuation">)</span> <span class="token operator">=></span> numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-展开操作符"><a href="#3-展开操作符" class="headerlink" title="3.展开操作符"></a>3.展开操作符</h3><ul><li><p>用于函数调用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//ES6之前的用法</span><span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使用展开操作符：</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用于数组字面量</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//es6之前的用法</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//[1,2,3,4,5,6]</span><span class="token comment">//展开操作符用法</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象的展开运算符</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>student <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>student<span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="4-模板字符串"><a href="#4-模板字符串" class="headerlink" title="4.模板字符串"></a>4.模板字符串</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Mike'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//‘My name is Mike’</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-解构语法"><a href="#5-解构语法" class="headerlink" title="5.解构语法"></a>5.解构语法</h3><ul><li><p>解构数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>        <span class="token comment">//按照数组序号，一一对应 a='blue',b='green',c='red'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>解构对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">&#125;</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>  <span class="token comment">//与属性名一一对应 name='Jack',age=20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="6-类"><a href="#6-类" class="headerlink" title="6.类"></a>6.类</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//静态方法</span>    <span class="token keyword">static</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Here is a static method'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> cow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'betty'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cow<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//My name is betty, age is 2</span>Animal<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//Here is a static method</span><span class="token comment">//派生类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//继承父类属性</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//重写shout方法</span>    <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//使用super调用父类方法</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,color is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Bagong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//My name is Bagong, age is 3, color is black</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-模块"><a href="#7-模块" class="headerlink" title="7.模块"></a>7.模块</h3><ul><li>一个模块的导入/导出<br>导出文件module1.js</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is func1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> func1<span class="token punctuation">;</span>  <span class="token comment">//使用export导出这个模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入文件：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> func1 <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span>     <span class="token comment">//使用import导入这个模块（假设两个文件在同级目录下）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>一个模块的多个导出<br>导出文件module1.js<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//形式1，逐个导出</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>                   <span class="token comment">//导出变量</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token comment">//导出方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is func1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"Nike"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token comment">//导出变量</span><span class="token comment">//形式2，底部集体导出</span><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>                   <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is func1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"Nike"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> <span class="token constant">PI</span><span class="token punctuation">,</span> func1<span class="token punctuation">,</span> person <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">//导出的变量或方法都写在这里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>导入文件：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//导入方式1，使用对象解构加载</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">PI</span><span class="token punctuation">,</span>func1<span class="token punctuation">,</span>person <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span><span class="token comment">//导入方式2，作为一个整体导入</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> util <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模块的默认导出<br>导出文件module1.js<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>  <span class="token comment">//默认导出</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//默认导出的同时，也可以定义其他的非默认导出</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>导入文件：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> importedPerson<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> func1 <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span>      <span class="token comment">//默认导出的模块不需要使用&#123;&#125;包裹,同时可以在导入处自定义名称 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>导入导出重命名<br>导出重命名：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//导出模块文件module1.js</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> sayHi <span class="token keyword">as</span> sayHello<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//使用as重命名导出</span><span class="token comment">//导入文件</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sayHello <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span> <span class="token comment">//只能通过sayHello导入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>导入重命名：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//导出模块文件module1.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//导入文件</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sayHi <span class="token keyword">as</span> sayHello <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只能调用sayHello,无法使用sayHi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
