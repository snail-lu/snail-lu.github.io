<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript中的this</title>
      <link href="/2023-02-07-javascript-zhong-de-this.html"/>
      <url>/2023-02-07-javascript-zhong-de-this.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、this到底是什么"><a href="#一、this到底是什么" class="headerlink" title="一、this到底是什么"></a>一、this到底是什么</h3><p><code>this</code>是在运行时进行绑定的，并不是在编写时绑定的，它的上下文取决于函数调用时的各种条件，<code>this</code>的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。<br>当一个函数被调用时，会创建一个<code>活动记录</code>（执行上下文）。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this就是记录的其中一个属性，会在函数执行的过程中用到。</p><h3 id="二、绑定规则"><a href="#二、绑定规则" class="headerlink" title="二、绑定规则"></a>二、绑定规则</h3><h4 id="1-默认绑定"><a href="#1-默认绑定" class="headerlink" title="1. 默认绑定"></a>1. 默认绑定</h4><p>普通函数直接调用时（非严格模式下），应用 <code>this</code> 的<code>默认绑定</code>，<code>this</code>指向全局对象（浏览器中为<code>window</code>对象，<code>Node.js</code>中为<code>global</code>对象）。</p><blockquote><p>严格模式下，<code>this</code>会被绑定到<code>undefined</code>。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 调用时，this指向window</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-隐式绑定"><a href="#2-隐式绑定" class="headerlink" title="2. 隐式绑定"></a>2. 隐式绑定</h4><p>当函数引用有上下文对象时，隐式绑定规则会把函数调用中的 <code>this</code> 绑定到这个上下文对象。且当对象属性存在引用链时，最后一层引用决定调用位置。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>     foo<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// foo中的this指向obj对象</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    obj<span class="token punctuation">&#125;</span><span class="token comment">// foo中的对象指向obj对象</span>obj1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-显示绑定"><a href="#3-显示绑定" class="headerlink" title="3. 显示绑定"></a>3. 显示绑定</h4><p>利用JS提供的<code>call()</code>、<code>apply()</code>、<code>bind()</code>方法显示指定<code>this</code>的绑定对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 2</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2</span><span class="token keyword">const</span> foo1 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-new绑定"><a href="#4-new绑定" class="headerlink" title="4. new绑定"></a>4. <code>new</code>绑定</h4><p>使用<code>new</code>来调用函数，或者说发生构造函数调用时，会自动执行下面的操作：</p><ol><li>创建一个全新的对象。</li><li>新对象会被执行<code>[[原型]]</code>连接，即将新对象的<code>__proto__</code>属性指向构造函数的<code>prototype</code>对象。</li><li>函数调用的<code>this</code>改指向新对象，并执行函数代码。</li><li>如果函数没有返回其它对象，那么会自动返回这个新对象，否则返回其它对象。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="三、绑定规则的优先级"><a href="#三、绑定规则的优先级" class="headerlink" title="三、绑定规则的优先级"></a>三、绑定规则的优先级</h3><p><code>new绑定</code> &gt; <code>显示绑定</code> &gt; <code>隐式绑定</code> &gt; <code>默认绑定</code><br>根据优先级来判断<code>this</code>的指向，顺序如下：</p><ol><li>由 <code>new</code> 调用？绑定到新创建的对象。 </li><li>由 <code>call</code> 或者 <code>apply</code>（或者 <code>bind</code>）调用？绑定到指定的对象（指定<code>null</code>或<code>undefined</code>的时候会被忽略，然后遵循<code>默认绑定</code>规则绑定<code>this</code>）。 </li><li>由上下文对象调用？绑定到那个上下文对象。 </li><li>默认：在严格模式下绑定到 <code>undefined</code>，否则绑定到全局对象。</li></ol><h3 id="四、箭头函数中的this"><a href="#四、箭头函数中的this" class="headerlink" title="四、箭头函数中的this"></a>四、箭头函数中的this</h3><p>箭头函数不使用上述<code>this</code>绑定的四种标准规则，而是根据外层（函数或全局）作用域来决定<code>this</code>，这个<code>this</code>是在函数定义时就确定的，而非普通函数那样在调用时确定。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 2 ,不是3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>foo()</code>内部创建的箭头函数会捕获调用<code>foo()</code>的<code>this</code>，由于<code>foo()</code>的<code>this</code>绑定到<code>obj1</code>，<code>bar</code>的<code>this</code>也会绑定到<code>obj1</code>，箭头函数的绑定无法被修改。</p><h3 id="五、常见使用浅析"><a href="#五、常见使用浅析" class="headerlink" title="五、常见使用浅析"></a>五、常见使用浅析</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"window"</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>    <span class="token comment">// 传统函数形式</span>    <span class="token function-variable function">getName1</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 箭头函数-作为直接执行的方法</span>    <span class="token function-variable function">getName2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 传统函数闭包</span>    <span class="token function-variable function">getName3</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token comment">// 箭头函数闭包</span>    <span class="token function-variable function">getName4</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 调用时this应用隐式绑定规则，绑定到obj上</span>obj<span class="token punctuation">.</span><span class="token function">getName1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "obj"</span><span class="token comment">// obj.getName2为箭头函数，调用时作用域为全局作用域，this被绑定到window</span>obj<span class="token punctuation">.</span><span class="token function">getName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "window"</span><span class="token comment">// setTimeout回调函数，应用默认绑定，绑定到window</span>obj<span class="token punctuation">.</span><span class="token function">getName3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "window"</span><span class="token comment">// setTimeout回调函数为箭头函数，外层作用域为getName4的作用域，</span><span class="token comment">// 此作用域中的this指向obj，则箭头函数中的this指向也为obj</span>obj<span class="token punctuation">.</span><span class="token function">getName4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "obj"</span><span class="token comment">// 函数的间接引用，直接调用函数，应用默认绑定规则，this指向window</span><span class="token keyword">const</span> getName1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>getName1<span class="token punctuation">;</span><span class="token function">getName1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "window"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><blockquote><p>每个函数在被调用时都会自动取得两个特殊变量：<code>this</code> 和 <code>arguments</code>。内部函数在搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量。  </p></blockquote><p>闭包中的<code>this</code>是无法<code>“继承”</code>其外部作用域中的<code>this</code>的，所以闭包中的<code>this</code>可以直接用上述4种规则进行判断。而箭头函数会继承外层函数调用的 <code>this</code> 绑定。</p><h3 id="七、参考文章"><a href="#七、参考文章" class="headerlink" title="七、参考文章"></a>七、参考文章</h3><ul><li>KYLE SIMPSON.你不知道的JavaScript（上卷）</li><li>尼古拉斯·泽卡斯.JavaScript高级程序设计</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript模块化规范总结</title>
      <link href="/2022-12-29-javascript-mo-kuai-hua-gui-fan-zong-jie.html"/>
      <url>/2022-12-29-javascript-mo-kuai-hua-gui-fan-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><table><thead><tr><th align="left">序号</th><th align="left">规范</th><th align="left">适用场景</th><th align="left">常见实现</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">CommonJS</td><td align="left">服务器端</td><td align="left">-</td></tr><tr><td align="left">2</td><td align="left">AMD</td><td align="left">浏览器端</td><td align="left">require.js、curl.js</td></tr><tr><td align="left">3</td><td align="left">CMD</td><td align="left">服务器端</td><td align="left">sea.js</td></tr><tr><td align="left">4</td><td align="left">UMD</td><td align="left">浏览器端和服务器端</td><td align="left"></td></tr><tr><td align="left">5</td><td align="left">ES6 Module</td><td align="left">浏览器端和服务器端</td><td align="left"></td></tr></tbody></table><h3 id="2-CommonJS规范"><a href="#2-CommonJS规范" class="headerlink" title="2. CommonJS规范"></a>2. CommonJS规范</h3><p><strong>Node.js</strong>中所遵循的模块规范，以同步的方式加载模块。<br>该规范约定一个文件就是一个模块，每个模块都有独立的作用域，模块必须通过 <code>module.exports</code> 导出对外的变量或接口，通过 <code>require()</code> 来导入其他模块的输出到当前模块作用域中。</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// moduleA.js</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">value</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// moduleB.js</span><span class="token keyword">var</span> multiplyBy2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./moduleA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">multiplyBy2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-AMD"><a href="#3-AMD" class="headerlink" title="3. AMD"></a>3. AMD</h3><p><strong>AMD</strong> 的全称是<code>Asynchronous Module Definition</code>，意思是“<strong>异步模块定义</strong>”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行，所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。使用AMD规范进行开发的时候需要引入第三方的库函数，常用的有<code>require.js</code>和<code>curl.js</code>。</p><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>以<code>require.js</code>为例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义模块</span><span class="token comment">// moodule1.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'module1'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 加载模块</span><span class="token comment">// index.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'module1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-CMD"><a href="#4-CMD" class="headerlink" title="4. CMD"></a>4. CMD</h3><p><strong>CMD</strong> 的全称是<code>Common Module Definition</code>，意思是“<strong>同步模块定义</strong>”，属于<code>CommonJS</code>的一种规范。使用CMD规范进行开发的时候需要引入第三方的库函数<code>Sea.js</code>。</p><h4 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义模块</span><span class="token comment">// module1.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// module2.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./module1.js'</span><span class="token punctuation">)</span>    <span class="token comment">// ...</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 加载模块</span>seajs<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'module1.js'</span><span class="token punctuation">,</span> <span class="token string">'module2.js'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module1<span class="token punctuation">,</span> module2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-UMD"><a href="#5-UMD" class="headerlink" title="5. UMD"></a>5. UMD</h3><p><strong>UMD</strong> 的全称是<code>Universal Module Definition</code>，意思是“<strong>通用模块定义</strong>”，他是为了让模块同时兼容<code>AMD</code>、<code>CommonJS</code>、<code>CMD</code>等规范而出现的，多被一些需要同时支持浏览器端和服务端引用的第三方库所使用。</p><h4 id="基本用法-3"><a href="#基本用法-3" class="headerlink" title="基本用法"></a>基本用法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 适配AMD</span><span class="token function">define</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 适配CommonJS</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 浏览器全局变量</span>root<span class="token punctuation">.</span>NProgress2 <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 模块内容</span>    <span class="token comment">// ...</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-ES6-Module"><a href="#6-ES6-Module" class="headerlink" title="6. ES6 Module"></a>6. ES6 Module</h3><p><strong>ES6</strong> 在语言标准的层面上实现的模块功能，有望成为浏览器和服务器通用的模块解决方案。</p><h4 id="基本用法-4"><a href="#基本用法-4" class="headerlink" title="基本用法"></a>基本用法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>                   <span class="token comment">// 导出变量</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token comment">// 导出方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is func1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nike"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token comment">// 导出变量</span><span class="token comment">// 导入</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">PI</span><span class="token punctuation">,</span> func1<span class="token punctuation">,</span> person <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://segmentfault.com/a/1190000023711059">【深度全面】前端JavaScript模块化规范进化论</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中axios的封装</title>
      <link href="/2022-09-17-xiang-mu-zhong-axios-de-feng-zhuang.html"/>
      <url>/2022-09-17-xiang-mu-zhong-axios-de-feng-zhuang.html</url>
      
        <content type="html"><![CDATA[<h3 id="网络请求模块"><a href="#网络请求模块" class="headerlink" title="网络请求模块"></a>网络请求模块</h3><p>功能：</p><ul><li>请求头中自动携带token</li><li>未登录用户重定向到登录页</li><li>请求重连</li><li>支持取消请求（<code>&quot;axios&quot;: ^0.22.0</code> ）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @/utils/request.js</span><span class="token keyword">import</span> axois <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">USER_NOT_LOGIN_CODE</span> <span class="token operator">=</span> <span class="token string">'0000'</span><span class="token punctuation">;</span> <span class="token comment">// 用户未登录</span><span class="token keyword">const</span> <span class="token constant">USER_RESPONSE_CODE</span> <span class="token operator">=</span> <span class="token string">'1000'</span><span class="token punctuation">;</span> <span class="token comment">//  正常响应</span><span class="token comment">// 创建axios实例</span><span class="token keyword">const</span> service <span class="token operator">=</span> axois<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_BASE_URL</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/api</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">120000</span> <span class="token comment">// 请求超时时间</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// request 拦截器设置</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 从localStorage中获取token</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">=</span>  token <span class="token comment">// 请求头设置 token</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> config    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/** * 后端返回响应体结构 * @param &#123;string&#125; code - 响应码 * @param &#123;boolean&#125; success - 请求结果 * @param &#123;string&#125; message - 提示信息 * @param &#123;object | array&#125; result - 查询结果  */</span><span class="token comment">// response 拦截器设置</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token comment">// HTTP状态码为 2xx 时进入到此回调</span>    <span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 服务端返回的响应体</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> success<span class="token punctuation">,</span> result<span class="token punctuation">,</span> code<span class="token punctuation">,</span> message <span class="token punctuation">&#125;</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>data        <span class="token comment">// 根据响应码进行响应的逻辑操作</span>        <span class="token comment">// 未登录</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token constant">USER_NOT_LOGIN_CODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 转到登录页</span>            window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'xxxx/login'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">!==</span> <span class="token constant">USER_RESPONSE_CODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// </span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message <span class="token operator">||</span> <span class="token string">'Error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>data        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// HTTP状态码非 2xx 时进入到此回调</span>    <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> config <span class="token operator">=</span> error<span class="token punctuation">.</span>config<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 请求重连功能</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> retryCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> retryDelay <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span> retryTimes <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token comment">// 记录已经重试的次数</span>        config<span class="token punctuation">.</span>retryCount <span class="token operator">=</span> retryCount<span class="token punctuation">;</span>        <span class="token comment">// 判断是否超过了重试次数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retryCount <span class="token operator">>=</span> retryTimes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 增加重试次数</span>        config<span class="token punctuation">.</span>retryCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 延时处理后重新发起请求</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">service</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> retryDelay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="业务请求模块"><a href="#业务请求模块" class="headerlink" title="业务请求模块"></a>业务请求模块</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @/apis/user.js</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token punctuation">;</span><span class="token keyword">const</span> urls <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">logout</span><span class="token operator">:</span> <span class="token string">'/user/logout'</span><span class="token punctuation">,</span> <span class="token comment">// 登出</span>    <span class="token literal-property property">userList</span><span class="token operator">:</span> <span class="token string">'/user/list'</span><span class="token punctuation">,</span> <span class="token comment">// 用户列表</span>    <span class="token literal-property property">upload</span><span class="token operator">:</span> <span class="token string">'/file/upload'</span><span class="token punctuation">,</span> <span class="token comment">// 上传文件</span>    <span class="token literal-property property">download</span><span class="token operator">:</span> <span class="token string">'/file/download'</span> <span class="token comment">// 下载文件 </span><span class="token punctuation">&#125;</span><span class="token comment">// 登出</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> urls<span class="token punctuation">.</span>logout<span class="token punctuation">,</span>        params    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取用户列表</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> signal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> urls<span class="token punctuation">.</span>userList<span class="token punctuation">,</span>        data<span class="token punctuation">,</span>        signal    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 上传文件</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> urls<span class="token punctuation">.</span>upload<span class="token punctuation">,</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'multipart/form-data'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        data    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 下载文件</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> urls<span class="token punctuation">.</span>download<span class="token punctuation">,</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">'blob'</span><span class="token punctuation">,</span> <span class="token comment">// 下载的文件为二进制blob对象，根据后端来决定</span>        params    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>用户模块<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> logout<span class="token punctuation">,</span> getUserList<span class="token punctuation">,</span> uploadFile<span class="token punctuation">,</span> downloadFile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/apis/user'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'UserList'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">pageInfo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">pageNo</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取用户列表</span>        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3秒后自动取消请求</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pageInfo<span class="token punctuation">,</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 登出</span>        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 上传</span>        <span class="token keyword">async</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 需要使用 FormData的格式上传文件</span>            <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>file<span class="token punctuation">)</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 下载</span>        <span class="token keyword">async</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">downLoadFile</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> <span class="token constant">URL</span> <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitURL<span class="token punctuation">;</span>                <span class="token keyword">const</span> blobUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span>href <span class="token operator">=</span> blobUrl<span class="token punctuation">;</span>                a<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">,</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">文件</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.xlsx</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>download <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    a<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'_blank'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>blobUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js基础知识总结</title>
      <link href="/2022-08-27-node-js-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2022-08-27-node-js-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-全局对象global"><a href="#1-全局对象global" class="headerlink" title="1 全局对象global"></a>1 全局对象<code>global</code></h4><p>全局变量都是全局对象<code>global</code>的属性</p><ul><li><p><code>process</code><br>它是用于描述和控制当前Node.js进程状态的对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 示例用法：</span><span class="token comment">// process属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pid'</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span> <span class="token comment">// 打印进程号</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'version'</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>version<span class="token punctuation">)</span> <span class="token comment">// 打印node.js版本</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'env'</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">)</span> <span class="token comment">// 打印环境变量</span><span class="token comment">// process方法</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span> <span class="token comment">// 输出信息</span>process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 退出进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多API参考<a href="https://nodejs.org/dist/latest-v18.x/docs/api/process.html">Node.js官方文档之process</a></p></li><li><p><code>console</code><br>用户向控制台输出信息。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印字符并换行</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出错误消息</span>console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'warning'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出警告消息。控制台出现有黄色的惊叹号。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-常用工具util"><a href="#2-常用工具util" class="headerlink" title="2 常用工具util"></a>2 常用工具<code>util</code></h3></li><li><p><code>util.inherits()</code> 对象间原型继承</p></li><li><p><code>util.inspect()</code> 将对象格式化为字符串</p></li><li><p><code>util.isArray()</code> 判断是否为数组</p></li><li><p><code>util.isRegExp()</code> 判断是否为正则表达式</p></li><li><p><code>util.isDate()</code> 判断是否为日期类型</p></li></ul><h3 id="3-事件模块events"><a href="#3-事件模块events" class="headerlink" title="3 事件模块events"></a>3 事件模块<code>events</code></h3><p><code>events</code>模块对外只提供了一个<code>EventEmitter</code>对象。<code>EventEmitter</code>对象是对事件触发与事件监听功能的封装。当EventEmitter对象触发一个事件时，所有绑定在该事件上的函数都被同步调用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 events 模块</span><span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 eventEmitter 对象</span><span class="token keyword">var</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>EventEmitter对象的实例方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>on(event, listener)</td><td>为事件event注册一个监听器</td></tr><tr><td>once(event, listener)</td><td>为指定事件注册一个单次监听器，</td></tr><tr><td>emit(event, [arg1], [arg2], […])</td><td>触发event事件</td></tr><tr><td>addListener(event, listener)</td><td>为指定事件添加一个监听器到监听器数组的尾部。</td></tr><tr><td>removeListener(event, listener)</td><td>移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。</td></tr><tr><td>removeAllListeners([event])</td><td>移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。</td></tr><tr><td>listeners(event)</td><td>返回指定事件的监听器数组。</td></tr></tbody></table><p>EventEmitter定义了一个特殊的事件<code>error</code>，当<code>error</code>被触发时，如果没有相应的监听器，Node.js会把它当做异常，退出程序并输出错误信息。</p><h3 id="4-文件系统fs模块"><a href="#4-文件系统fs模块" class="headerlink" title="4 文件系统fs模块"></a>4 文件系统<code>fs</code>模块</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 异步读取文件</span><span class="token comment">// 文件路径可以为相对路径或绝对路径</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./tes.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error: '</span> <span class="token operator">+</span> err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步读取：'</span><span class="token operator">+</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/** * 异步写入文件 */</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./test.txt'</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">'err'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入完成'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/** * 复制文件 */</span><span class="token keyword">const</span> readerStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'copyTest.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readerStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writeStream<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件复制成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多API参考<a href="https://nodejs.org/dist/latest-v18.x/docs/api/fs.html">Node.js官方文档之文件系统</a></p><h3 id="5-http模块"><a href="#5-http模块" class="headerlink" title="5 http模块"></a>5 <code>http</code>模块</h3><p>http 模块主要用于搭建 HTTP 服务端和客户端。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建服务器</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 解析请求，包括文件名</span>   <span class="token keyword">var</span> pathname <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>      <span class="token comment">// 输出请求的文件名</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Request for "</span> <span class="token operator">+</span> pathname <span class="token operator">+</span> <span class="token string">" received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//  完成响应</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-path模块"><a href="#6-path模块" class="headerlink" title="6 path模块"></a>6 <code>path</code>模块</h3><p>用于处理文件的路径。</p><ul><li><code>join()</code> 连接路径</li><li><code>resolve()</code> 将相对路径转换为绝对路径</li><li><code>parse()</code> 解析路径，将URL字符串转换成对象</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>BYVoid. Node.js开发指南[M]. 人民邮电出版社, 2012.</li><li>天津滨海迅腾科技集团有限公司. Node.js项目实战[M]. 1. 天津:南开大学出版社, 2018.</li><li><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">Node.js教程-RUNOOB.COM</a></li><li><a href="https://nodejs.org/dist/latest-v18.x/docs/api/">Node.js官方文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite基础知识总结</title>
      <link href="/2022-08-08-vite-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2022-08-08-vite-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-前端构建工具的常见用途"><a href="#1-前端构建工具的常见用途" class="headerlink" title="1. 前端构建工具的常见用途"></a>1. 前端构建工具的常见用途</h3><ul><li><code>TypeScript</code>编译: <code>tsc</code></li><li><code>React</code> / <code>Vue</code> 语法编译: <code>react-compiler</code> / <code>vue-compiler</code></li><li><code>SCSS</code> / <code>LESS</code>语法编译: <code>sass-loader</code> / <code>less-loader</code></li><li>语法降级: <code>babel</code></li><li>语法校验</li><li>代码格式化</li><li>代码压缩</li><li>热更新</li><li>……</li></ul><h3 id="2-与webpack的区别"><a href="#2-与webpack的区别" class="headerlink" title="2. 与webpack的区别"></a>2. 与webpack的区别</h3><ul><li><code>webpack</code> 是一个纯打包工具，<code>vite</code> 是更上层的工具链解决方案，类似（webpack + web 常用配置 + webpack-dev-server）</li><li>开发服务器的启动速度上 <code>vite</code> 会明显快于 <code>webpack</code>。这是因为 <code>webpack</code> 会先打包，然后再启动开发服务器，请求服务器时直接给予打包结果。而 <code>vite</code> 是直接启动开发服务器，请求哪个模块再对该模块进行实时编译。<br>由于现代浏览器本身就支持 <code>ES Module</code>，会自动向依赖的 <code>Module</code> 发出请求。<code>vite</code>充分利用这一点，将开发环境下的模块文件，就作为浏览器要执行的文件，而不是像 <code>webpack</code> 那样进行打包合并。<br>由于 <code>vite</code> 在启动的时候不需要打包，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快。当浏览器请求某个模块时，再根据需要对模块内容进行编译。这种按需动态编译的方式，极大的缩减了编译时间，项目越复杂、模块越多，<code>vite</code> 的优势越明显。</li><li>在 <code>HMR</code> 方面，当改动了一个模块后，仅需让浏览器重新请求该模块即可，不像 <code>webpack</code>那样需要把该模块的相关依赖模块全部编译一次，效率更高。</li><li>当需要打包到生产环境时，<code>vite</code>使用传统的 <code>rollup</code> 进行打包，因此，vite的主要优势在开发阶段</li><li>由于 <code>vite</code> 利用的是 <code>ES Module</code>，因此在代码中不可以使用 <code>CommonJS</code>规范引入依赖，（对于使用非ES module规范的第三方依赖，vite会使用esbuild进行依赖预构建，将其转换为es moudle规范）；而 <code>Webpack</code>构建的项目则默认支持多种模块化规范</li></ul><h3 id="3-vite的依赖预构建"><a href="#3-vite的依赖预构建" class="headerlink" title="3. vite的依赖预构建"></a>3. vite的依赖预构建</h3><p>首先vite会找到对应的依赖，调用<code>esbuild</code>（对js语法进行处理的一个库），将其他规范的代码转换为<code>ES module</code>规范的代码，然后将其放到当前目录下的 <code>node_modules/.vite/deps</code>下，同时对<code>ES module</code>规范的各个模块进行统一集成（将分散的多个模块改写到一个或几个文件）。</p><p>vite的依赖预构建解决了三个问题：</p><ul><li>第三方依赖规范不统一的问题（esbuild）</li><li>对引入路径可以直接使用<code>.vite/deps</code>，方便代码中的路径重写</li><li>网络多包传输的性能问题（浏览器在解析<code>ES module</code>依赖时，一个导入会发出一个请求，第三方依赖中肯定会有很多不同的导入，请求过多会增加浏览器的性能负担，vite通过模块集成，将分散的导入集成到了一个或几个文件，减少了网络请求次数）</li></ul><h3 id="4-环境变量"><a href="#4-环境变量" class="headerlink" title="4. 环境变量"></a>4. 环境变量</h3><p><code>vite</code>底层读取环境变量文件使用到的是第三方库<code>dotenv</code>，根据命令中带的<code>mode</code>去解析对应文件中的环境变量，放入到<code>process</code>对象下。比如执行命令<code>vite build --mode staging</code>，vite会读取并解析<code>.env.staging</code>文件。</p><ul><li><code>.env</code>: 所有环境都要使用到的环境变量</li><li><code>.env.development</code>: 开发魂晶需要使用到的环境变量（vite默认给开发环境取名为development）</li><li><code>.env.production</code>: 生产环境需要使用到的环境变量（vite默认给生产环境取名为production）</li><li><code>.env.[mode]</code>: 自定义其他模式</li></ul><p>在实际客户端开发中，vite提供了<code>import.meta.env</code>对象，可以从该对象上获取对应的环境变量。需要注意在环境变量文件中书写环境变量时，需要使用前缀<code>VITE_</code>开头。该前缀可以在<code>vite.config.js</code>中使用<code>envPrefix</code>自定义。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的继承</title>
      <link href="/2022-07-16-javascript-zhong-de-ji-cheng.html"/>
      <url>/2022-07-16-javascript-zhong-de-ji-cheng.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h3><p><strong>原理</strong>：<br>重写 <code>SubType</code> 类型的原型对象为 <code>SuperType</code> 类型的实例，这样， <code>SubType</code> 的实例就可以顺着原型链访问 <code>SuperType</code> 的实例所能访问的所有属性和方法。</p><p><strong>优点</strong>：<br>父类原型上定义的方法可以被复用</p><p><strong>缺点</strong>：</p><ul><li>原型中包含的引用值会在所有实例间共享，一变俱变</li><li>子类型在实例化时无法给父类型的构造函数传参</li></ul><p><strong>代码示例</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 重写SubType的原型对象</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SubType的实例可以访问SuperType实例的方法和属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改instance1的colors属性，会影响instance2</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  ["red","blue","green", "black"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-盗用构造函数继承"><a href="#2-盗用构造函数继承" class="headerlink" title="2. 盗用构造函数继承"></a>2. 盗用构造函数继承</h3><p><strong>原理</strong>：<br>在子类构造函数中调用父类构造函数。</p><p><strong>优点</strong>：</p><ul><li>解决了原型链继承中存在的原型对象上引用值的继承问题</li><li>解决了原型链继承中从子类构造函数中向父类构造函数传参的问题</li></ul><p><strong>缺点</strong>：</p><ul><li>父类的方法在每个子类实例上都要创建一遍，无法复用</li><li>子类实例无法访问父类原型上的方法</li></ul><p><strong>代码示例</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">show</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> show<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">showColors</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>colors<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 父类原型上定义getShow方法</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getShow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">show</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 继承 SuperType，为每个实例对象上都创建了独立的colors属性，而非在原型对象上共享</span>    <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> show<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red","blue","green","black"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>show<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red","blue","green"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>show<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token comment">// 缺点1：相同的方法无法复用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>showColors <span class="token operator">===</span> instance2<span class="token punctuation">.</span>showColors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token comment">// 缺点2：无法访问父类原型上的方法</span>instance1<span class="token punctuation">.</span><span class="token function">getShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: instance1.getShow is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h3><p><strong>原理</strong>：<br>综合了原型链和盗用构造函数，使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。</p><p><strong>优点</strong>：<br>既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</p><p><strong>缺点</strong>：<br>效率问题，父类构造函数始终会被调用两次</p><p><strong>代码示例</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">// 盗用构造函数，以继承属性</span>    <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第2次调用SuperType()</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 原型链，以继承方法</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第1次调用SuperType()</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span> instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red","blue","green","black"]</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Nicholas"; </span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 29 </span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red","blue","green"]</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Greg"; </span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 27</span><span class="token comment">// 方法是公用的，都是SuperType原型上的方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>sayName <span class="token operator">===</span> instance2<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4. 原型式继承"></a>4. 原型式继承</h3><p><strong>原理</strong>：<br>利用<code>Object.create()</code>方法创建一个以指定对象为原型对象的对象实例。</p><p><strong>优点</strong>：</p><ul><li>无需书写构造函数即可继承某一对象的属性和方法</li><li>可以传递额外的属性和方法</li></ul><p><strong>缺点</strong>：</p><ul><li>跟原型链继承一样，原型对象上的引用值会在所有实例间共享</li></ul><p><strong>代码示例</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>     <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 创建对象，并为新建的对象增加name属性</span><span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>         <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Greg"</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> yetAnotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span><span class="token punctuation">;</span> yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缺点：引用类型的值会被共享</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Shelby","Court","Van","Rob","Barbie"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h3><p><strong>原理</strong>：<br>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</p><p><strong>优点</strong>：</p><ul><li>只关注对象，无需关注类型和构造函数</li></ul><p><strong>缺点</strong>：</p><ul><li>方法在每个实例上都要创建一遍</li></ul><p><strong>代码示例</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">// 这里的copyObject可以是Object.create()方法</span>    <span class="token comment">// 也可以是任意一个实现了根据旧对象返回一个新对象的函数</span>    <span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token function">copyObject</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过调用函数创建一个新对象</span>    clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 以某种方式增强这个对象</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> clone<span class="token punctuation">;</span> <span class="token comment">// 返回这个对象</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-寄生组合式继承"><a href="#6-寄生组合式继承" class="headerlink" title="6. 寄生组合式继承"></a>6. 寄生组合式继承</h3><p><strong>原理</strong>：<br>将组合继承中调用父类构造函数来重写子类原型对象的方式，改造为使用寄生式继承来继承父类原型，从而继承父类原型上的方法。<br>通过盗用构造函数来继承实例属性。</p><p><strong>优点</strong>：</p><ul><li>解决了组合继承父类构造函数被调用两次的效率问题</li></ul><p><strong>代码示例</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 不使用组合继承中调用父类构造函数来重写子类原型对象</span><span class="token comment">// 改用寄生式继承来重写原型对象</span><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 这里的copyObject可以是Object.create()方法</span>    <span class="token comment">// 也可以是任意一个实现了根据旧对象返回一个新对象的函数</span>    <span class="token keyword">let</span> prototype <span class="token operator">=</span> <span class="token function">copyObject</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建对象</span>    prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType<span class="token punctuation">;</span> <span class="token comment">// 解决由于重写原型导致默认 constructor 丢失的问题 </span>    subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span> <span class="token comment">// 赋值对象</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 盗用构造函数，以继承属性</span>    <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubType<span class="token punctuation">,</span> SuperType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol><li>JavaScript高级程序设计（第四版）</li><li><a href="https://juejin.cn/post/7035828718161362981">JavaScript继承</a></li><li><a href="https://juejin.cn/post/6844903696111763470">JavaScript常用八种继承方案</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器原理知识总结</title>
      <link href="/2022-07-15-liu-lan-qi-yuan-li-zhi-shi-zong-jie.html"/>
      <url>/2022-07-15-liu-lan-qi-yuan-li-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-浏览器组成"><a href="#1-浏览器组成" class="headerlink" title="1. 浏览器组成"></a>1. 浏览器组成</h3><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vzuVoQ.png"></p><ul><li><p><strong>用户界面（User Interface)</strong><br>用户界面主要包括工具栏、地址栏、前进/后退按钮、书签菜单、可视化页面加载进度、智能下载处理、首选项、打印等。除了浏览器主窗口显示请求的页面之外，其他显示的部分都属于用户界面。<br>用户界面还可以与桌面环境集成，以提供浏览器会话管理或与其他桌面应用程序的通信。</p></li><li><p><strong>浏览器引擎（Browser Engine）</strong><br>在用户界面和渲染引擎之间传送指令。</p></li><li><p><strong>渲染引擎（Rendering Engine）</strong><br>显示请求的内容。</p></li><li><p><strong>网络（Networking）</strong><br>网络调用，如http请求。</p></li><li><p><strong>JavaScript解析器（JavaScript Interpreter）</strong><br>JavaScript解释器能够解释并执行嵌入在网页中的JavaScript（又称ECMAScript）代码。 为了安全起见，浏览器引擎或渲染引擎可能会禁用某些JavaScript功能，如弹出窗口的打开。</p></li><li><p><strong>显示后端（Display Backend）</strong><br>显示后端提供绘图和窗口原语，包括：用户界面控件集合、字体集合</p></li><li><p><strong>数据持久层（Data Persistence）</strong><br>数据持久层将与浏览会话相关联的各种数据存储在硬盘上。 这些数据可能是诸如：书签、工具栏设置等这样的高级数据，也可能是诸如：Cookie，安全证书、缓存等这样的低级数据。</p></li></ul><h3 id="2-浏览器内核"><a href="#2-浏览器内核" class="headerlink" title="2. 浏览器内核"></a>2. 浏览器内核</h3><table><thead><tr><th align="center">浏览器</th><th align="center">渲染引擎（内核）</th><th align="center">JS引擎</th></tr></thead><tbody><tr><td align="center">Chorme</td><td align="center">Webkit-&gt;Blink</td><td align="center">v8</td></tr><tr><td align="center">FireFox</td><td align="center">Gecko</td><td align="center">SpiderMonkey</td></tr><tr><td align="center">Safari</td><td align="center">Webkit</td><td align="center">JavaScriptCore</td></tr><tr><td align="center">Opera</td><td align="center">Presto-&gt;Webkit-&gt;Blink</td><td align="center">JavaScriptCore</td></tr><tr><td align="center">Edge</td><td align="center">EdgeHTML</td><td align="center">Chakra(for JavaScript)</td></tr><tr><td align="center">IE</td><td align="center">Trident</td><td align="center">JScript（IE3.0-IE8.0）</td></tr></tbody></table><h3 id="3-架构"><a href="#3-架构" class="headerlink" title="3. 架构"></a>3. 架构</h3><p>现代浏览器多为多进程架构</p><ul><li><p><strong>Browser进程</strong></p><ul><li>浏览器的主进程(负责协调、主控)，该进程只有一个</li><li>负责浏览器界面显示，与用户交互。如前进，后退等</li><li>负责各个页面的管理，创建和销毁其他进程</li><li>将渲染(Renderer)进程得到的内存中的Bitmap(位图)，绘制到用户界面上</li><li>网络资源的管理，下载等</li></ul></li><li><p><strong>插件进程</strong></p><ul><li>每种类型的插件对应一个进程，当使用该插件时才创建</li></ul></li><li><p><strong>GPU进程</strong></p><ul><li>该进程也只有一个，用于3D绘制等等</li></ul></li><li><p><strong>渲染进程</strong></p><ul><li>即通常所说的浏览器内核(Renderer进程，内部是多线程)</li><li>每个Tab页面都有一个渲染进程，互不影响</li><li>主要作用为页面渲染，脚本执行，事件处理等</li></ul></li><li><p><strong>网络进程</strong>  </p><ul><li>负责发起和接受网络请求</li></ul></li></ul><h3 id="4-渲染进程"><a href="#4-渲染进程" class="headerlink" title="4. 渲染进程"></a>4. 渲染进程</h3><p>浏览器渲染进程是多线程模型，主要包含如下线程：</p><ul><li><p><strong>GUI渲染线程</strong>  </p><ul><li>解析HTML，CSS，构建DOM树、构建render树，布局和绘制等</li><li>界面重绘（Repaint）或回流(reflow)</li></ul></li><li><p><strong>JS引擎线程</strong></p><ul><li>处理JavaScript程序</li><li>JS引擎一直等待着任务队列中任务的到来，然后加以处理</li><li>和GUI渲染线程是互斥的</li></ul></li><li><p><strong>事件触发线程</strong></p><ul><li>属于浏览器而不是JS引擎，用来控制事件循环，并且管理着一个事件队列(task queue)</li><li>当JS引擎执行如setTimeOut代码块时，或者是其他的如网络异步请求、鼠标点击等时，会将对应任务添加到事件线程中。当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理的事件队列中，等待JS引擎空闲时处理。</li></ul></li><li><p><strong>定时器线程</strong></p><ul><li>setInterval与setTimeout所在线程。计时完毕后，将对应事件添加到事件队列中，等待JS引擎空闲时处理。</li></ul></li><li><p><strong>异步网络请求线程</strong></p><ul><li>处理网络请求，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。等待JS引擎空闲时处理。</li></ul></li></ul><h3 id="5-页面渲染流程"><a href="#5-页面渲染流程" class="headerlink" title="5. 页面渲染流程"></a>5. 页面渲染流程</h3><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/09/16/vzh0jH.jpg"></p><ol><li>HTML 解析器解析 HTML 文档，生成 DOM 树 (DOM Tree)</li><li>CSS 解析器解析 CSS 文档，生成 CSSOM (CSS Object Model)</li><li>将DOM树和CSSOM结合，生成渲染树（Render Tree）</li><li>根据渲染树来布局（Layout），以计算每个节点的几何信息</li><li>将各个节点绘制（painting）到屏幕上</li></ol><h3 id="6-浏览器缓存机制"><a href="#6-浏览器缓存机制" class="headerlink" title="6. 浏览器缓存机制"></a>6. 浏览器缓存机制</h3><p>浏览器的缓存机制，通常是指我们常说的HTTP缓存机制，主要分为<code>协商缓存</code>与<code>强缓存</code>，缓存机制的运行流程如下：</p><ul><li>浏览器在进行HTTP请求前，会先向缓存中查找该请求结果，根据该缓存结果的缓存标识 <code>Expires</code> 和 <code>Cache-Control</code> 判断是否命中强缓存，是则直接使用该缓存结果，不会发请求到服务器。</li><li>如果没有命中强缓存或强缓存已失效，浏览器会发送一个请求到服务器，通过携带缓存标识<code>Last-Modified / If-Modified-Since</code> 和 <code>Etag / If-None-Match</code> 验证资源是否命中协商缓存，如果命中，服务器会返回304，依然是从缓存中读取资源</li><li>如果没有命中或协商缓存失效，服务器会重新返回完整的资源</li></ul><p>附：</p><ul><li><code>Expires</code>是<code>HTTP/1.0</code>中的控制字段，是绝对值，受限于本地时间；<code>Cache-Control</code>是<code>HTTP/1.1</code>中的字段，记录的时间是相对值，<code>Cache-Control</code>的优先级高于<code>Expires</code></li><li>浏览器读取缓存会优先从内存缓存中读取（from memory cache），其次从硬盘读取（from disk cache）</li><li>控制协商缓存的字段 <code>Etag / If-None-Match</code> 的优先级比 <code>Last-Modified / If-Modified-Since</code> 高</li></ul><h3 id="7-V8垃圾回收机制"><a href="#7-V8垃圾回收机制" class="headerlink" title="7. V8垃圾回收机制"></a>7. V8垃圾回收机制</h3><p>V8采用的是分代式回收, 即将堆分为新生代和老生代两类，新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象。V8分别使用两个不同的垃圾回收器来实施垃圾回收。</p><ul><li>新生代垃圾回收器 - <code>Scavenge</code></li><li>老生代垃圾回收器 - <code>Mark-Sweep</code> &amp; <code>Mark-Compact</code></li></ul><p>针对新生代堆，Scavange算法将其分为两部分，分别叫<code>from</code>空间和<code>to</code>空间，工作过程就是将<code>from</code>空间中存活的活动对象复制到<code>to</code>空间中，并将这些对象的内存有序的排列起来，然后将<code>from</code>空间中的非活动对象的内存进行释放，完成之后，将<code>from</code>空间和 <code>to</code> 空间进行互换。<br>V8引擎采用了<code>对象晋升</code>策略，在下一次垃圾回收时，已经进行过一次垃圾回收依然还存活的对象或<code>to</code>空间的内存占比超过25%，对象会被移动到老生代区中。<br>之所以有25%的内存限制是因为<code>to</code>空间在经历过一次Scavenge算法后会和<code>from</code>空间完成角色互换，会变为<code>from</code>空间，后续的内存分配都是在<code>from</code>空间中进行的，如果内存使用过高甚至溢出，则会影响后续对象的分配。</p><p>针对老生代堆，采用的是 <code>标记-清除（Mark-Sweep）</code> 和 <code>标记-整理（Mark-Compact）</code>算法。<code>标记-清除</code>就是从一组根元素开始，递归遍历这组根元素(遍历调用栈)，在这个遍历过程中，能到达的元素标记为活动对象，然后在第二次遍历过程中清除未被标记的对象（非活动对象）。清除算法后，会产生大量不连续的内存碎片，而碎片过多会导致大对象无法分配到足够的连续内存。于是又产生了<code>标记-整理</code>算法，这个标记过程仍然与<code>标记-清除</code>算法里的是一样的，但后续不是对非活动对象进行清理，而是让活动对象都向一端移动，然后直接清理掉端边界以外的内存，从而让存活对象占用连续的内存块。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://github.com/LuckyWinty/blog/blob/master/markdown/Q%26A/%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%AB%E8%B0%88.md">现代浏览器架构漫谈</a></li><li><a href="http://chuquan.me/2018/01/21/browser-architecture-overview/">现代浏览器工作原理（一）</a></li><li><a href="https://juejin.cn/post/6854573215830933512">送你18道浏览器面试题</a></li><li><a href="https://juejin.cn/post/6844903951377104903">11道浏览器原理面试题</a></li><li><a href="https://github.com/yacan8/blog/issues/33">深入理解Chrome V8垃圾回收机制</a></li><li><a href="https://juejin.cn/post/6844903593275817998">彻底理解浏览器的缓存机制</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用算法总结</title>
      <link href="/2022-06-07-chang-yong-suan-fa-zong-jie.html"/>
      <url>/2022-06-07-chang-yong-suan-fa-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1. 排序"></a>1. 排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><strong>实现原理：</strong></p><blockquote><p>长度为 n 的数组，每次比较相邻两个数的大小并根据大小来交换位置，这样第一轮就可以选出一个最大或最小的数放到最后。总共经过 n-1 轮可以完成排序。</p></blockquote><p><strong>代码实现：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">&#125;</span>  <span class="token comment">// 总共进行arr.length - 1轮排序</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 排序完成标志位，</span>    <span class="token comment">// 当没有相邻数据交换时证明排序完成，反之，则证明排序尚未完全结束</span>    <span class="token keyword">let</span> done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 每轮的两两比较只需要进行到 max-i 即可，因为max-i后面的数据都是之前排好的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 这里是升序排序</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>        done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 排序完成，提前终止，减少不必要的循环</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p><strong>实现原理：</strong></p><blockquote><p>从数组中选择一个元素作为基准点，遍历数组，将数组所有比基准值小的元素摆放在左边的数组中，而大于基准值的摆放在右边的数组中。每次分割结束以后基准值会插入到中间去。<br>最后利用递归，将左边的数组和右边的数组再进行一次上述操作。</p></blockquote><p><strong>代码实现：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 递归终止条件</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">&#125;</span>  <span class="token comment">// 获取数组中间的元素下标,将该元素作为基准值</span>  <span class="token keyword">const</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将该基准值从原数组中剪切出来</span>  <span class="token keyword">const</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pivotIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 定义两个空数组，分别用于存放小于基准值的元素和大于基准值的元素</span>  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历元素进行数据分组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 递归，对左右两个数组排序，并拼接，得到最终排序好的结果</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p><strong>实现原理：</strong></p><blockquote><p>递归将数组两两分开直到包含一个元素，然后将数组排序合并，最终合并为排序好的数组。</p></blockquote><p><strong>代码实现：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 采用自上而下的递归方法</span><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 获取中间元素下标，并将数组拆分为left部分和right部分</span>  <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  left <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">,</span>  right <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 递归实现排序</span>  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将各自有序的两个数组进行排序合并</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 比较左右数组的头部元素，将值小的元素添加到result尾部</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 只有左数组时，将元素依次添加至result尾部</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 只有右数组时，将元素依次添加至result尾部</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回排序后的数组</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-递归和循环"><a href="#2-递归和循环" class="headerlink" title="2. 递归和循环"></a>2. 递归和循环</h3><h4 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 常规递归实现，复杂度O(n) </span><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 尾递归优化，复杂度O(1) </span><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 递推实现</span><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> res <span class="token operator">*</span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h4><p>初始前两项为1，后续各项等于前两项之和：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 常规递归实现</span><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 尾递归优化</span><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> prev<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token operator">=</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> cur  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> cur<span class="token operator">+</span>prev <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 递推实现</span><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>cur<span class="token punctuation">,</span> next<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>next<span class="token punctuation">,</span> cur <span class="token operator">+</span> next<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-洗牌算法（乱序）"><a href="#3-洗牌算法（乱序）" class="headerlink" title="3. 洗牌算法（乱序）"></a>3. 洗牌算法（乱序）</h3><p><strong>实现原理：</strong></p><blockquote><p>从最后一个元素开始，从数组中随机选出一个位置，交换，直到第一个元素。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">disorder</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-全排列"><a href="#4-全排列" class="headerlink" title="4. 全排列"></a>4. 全排列</h3><h4 id="字典序"><a href="#字典序" class="headerlink" title="字典序"></a>字典序</h4><h4 id="邻位对换法"><a href="#邻位对换法" class="headerlink" title="邻位对换法"></a>邻位对换法</h4><h4 id="循环右移法"><a href="#循环右移法" class="headerlink" title="循环右移法"></a>循环右移法</h4><h4 id="递增进位制法"><a href="#递增进位制法" class="headerlink" title="递增进位制法"></a>递增进位制法</h4><h4 id="递减进位制法"><a href="#递减进位制法" class="headerlink" title="递减进位制法"></a>递减进位制法</h4>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络原理基础知识总结</title>
      <link href="/2022-05-10-wang-luo-yuan-li-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2022-05-10-wang-luo-yuan-li-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-计算机网络概述"><a href="#一-计算机网络概述" class="headerlink" title="一. 计算机网络概述"></a>一. 计算机网络概述</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>计算机网络是一个将分散的、具有独立功能的<strong>计算机系统</strong>，通过<strong>通信设备</strong>与想线路连接起来，有功能完善的<strong>软件</strong>实现<strong>资源共享</strong>和<strong>信息传递</strong>的系统。</p><h4 id="2-功能"><a href="#2-功能" class="headerlink" title="2. 功能"></a>2. 功能</h4><ul><li><strong>数据通信</strong></li><li><strong>资源共享</strong>：硬件、软件、数据共享</li><li><strong>分布式处理</strong>：多台计算机分工合作</li><li><strong>提高可靠性</strong>：为宕机机器提供替代机</li><li><strong>负载均衡</strong>：多台计算机均衡承担不同工作</li></ul><h4 id="3-组成"><a href="#3-组成" class="headerlink" title="3. 组成"></a>3. 组成</h4><ul><li><strong>组成部分</strong>：硬件、软件、协议</li><li><strong>工作方式</strong>：<ul><li><strong>边缘部分</strong>：由所有连接在互联网上的主机组成，供用户直接使用，用来进行通信和资源共享。通信方式有<code>C/S（客户-服务器）</code>和<code>P2P（对等方式）</code>。</li><li><strong>核心部分</strong>：由大量网络和路由器组成，为边缘部分服务，提供连通性和交换。</li></ul></li><li><strong>功能组成</strong>：<ul><li><strong>通信子网</strong>：实现数据通信</li><li><strong>资源子网</strong>：实现资源共享/数据处理</li></ul></li></ul><h4 id="4-分类"><a href="#4-分类" class="headerlink" title="4. 分类"></a>4. 分类</h4><ul><li>按<strong>分布范围</strong>分：<code>广域网WAN</code>、<code>城域网MAN</code>、<code>局域网LAN</code>、<code>个人局域网PAN</code></li><li>按<strong>使用者</strong>分：<code>公用网</code>、<code>专用网</code></li><li>按<strong>交换技术</strong>分：<code>电路交换</code>、<code>报文交换</code>、<code>分组交换</code></li><li>按<strong>拓扑结构</strong>分：<code>总线型</code>、<code>星型</code>、<code>环型</code>、<code>网状型</code></li><li>按<strong>传输技术</strong>分：<code>广播式网络</code>、<code>点对点网络</code></li></ul><h4 id="5-性能指标"><a href="#5-性能指标" class="headerlink" title="5. 性能指标"></a>5. 性能指标</h4><ul><li><strong>速率</strong>：数据的传送速率，也称<code>数据率</code>或<code>比特率</code></li><li><strong>带宽</strong>：网络设备所能支持的最高速率。</li><li><strong>吞吐量</strong>：单位时间内通过某个网络（或信道、接口）的数据量。</li><li><strong>时延</strong>：<ul><li><strong>发送时延</strong>：主机或路由器发送数据帧所需要的时间</li><li><strong>传播时延</strong>：电磁波在信道中传播一定距离花费的时间</li><li><strong>排队时延</strong>：数据帧在链路中排队需要的时间</li><li><strong>处理时延</strong>：主机或路由器对数据帧进行处理花费的时间</li></ul></li><li><strong>时延带宽积</strong>：传播时延x带宽，表示某段链路现在有多少比特</li><li><strong>往返时间RTT</strong>：从发送方发送数据开始，到发送方收到接收方的确认，总共经历的时延。</li><li><strong>利用率</strong>：<ul><li><strong>信道利用率</strong>：有数据通过的时间/（有+无）数据通过时间</li><li><strong>网络利用率</strong>：信道利用率加权平均值</li></ul></li></ul><h4 id="6-体系结构"><a href="#6-体系结构" class="headerlink" title="6. 体系结构"></a>6. 体系结构</h4><ul><li><strong>OSI 参考模型</strong>：7层结构，法定标准，理论成功，市场失败。</li><li><strong>TCP/IP 参考模型</strong>：4层结构，事实标准，</li><li><strong>五层的体系结构</strong>：结合上述两种模型的优点，方便学习。</li></ul><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/16/v0NpGD.png"></p><p>网络中的通信过程（以OSI模型为例）：<br>在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/16/v0NiMd.png"><br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/16/v0NCxH.png"></p><h3 id="二-物理层"><a href="#二-物理层" class="headerlink" title="二. 物理层"></a>二. 物理层</h3><h4 id="1-主要任务"><a href="#1-主要任务" class="headerlink" title="1. 主要任务"></a>1. 主要任务</h4><p>物理层主要考虑的是如何在连接各种计算机的传输媒体上传输<strong>数据比特流</strong>，而不是指具体的传输媒体。物理层任务：确定与传输媒体接口有关的一些特性。即：</p><ul><li><strong>机械特性</strong>：接口所用接线器的规格、接口形状、引线数目、引脚数量和排列情况等</li><li><strong>电气特性</strong>：接口电缆各条线上的电压范围</li><li><strong>功能特性</strong>：某条线上出现某一电平的电压的意义</li><li><strong>过程特性</strong>：各条物理线路的工作规程和时序关系</li></ul><h4 id="2-数据通信基础知识"><a href="#2-数据通信基础知识" class="headerlink" title="2. 数据通信基础知识"></a>2. 数据通信基础知识</h4><ul><li><p>数据通信系统模型<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/16/v0N9Re.png"></p></li><li><p>通信方式</p><ol><li><strong>单工通信</strong>：只有一个方向的通信而没有反方向的交互。</li><li><strong>半双工通信</strong>：通信的双方都可以发送或接收消息，但是单个时间只能一方发送，另一方接收。</li><li><strong>全双工通信</strong>：通信的双方可以同时发送和接收消息。</li></ol></li><li><p>码元、速率和带宽</p><ul><li><p><strong>码元</strong>：一个数字脉冲信号就是一个码元。当码元的离散状态有M个时，此时码元为<code>M进制码元</code>。一个码元可以携带多个比特，比如携带2个bit的码元可以有 $2^2$ = 4 种状态，因此就是<code>4进制码元</code>。</p></li><li><p><strong>速率</strong>：也叫数据率，是指数据的传输速率，表示单位时间内传输的数据量</p><ol><li><strong>码元传输速率</strong>：单位时间内传输的码元（脉冲）个数，单位为<code>波特</code>（Baud）</li><li><strong>信息传输速率</strong>：单位时间内传输的比特数，单位为<code>比特/秒</code>（b/s）。所以<code>信息传输速率 = 码元传输速率 * 码元携带比特数</code></li></ol></li><li><p><strong>带宽</strong>：单位时间内从网络中的某一点到另一点所能通过的<strong>最高数据率</strong>，单位为<code>比特/秒</code>（b/s）</p></li></ul></li><li><p>奈氏准则（奈奎斯特定理）<br>在理想低通（无噪声、带宽受限）条件下，为了避免<code>码间串扰</code>，</p></li></ul><p><strong>极限码元传输速率 = 2W （Baud）</strong>，由此也可以推得**极限数据传输速率 = 2W $\log_2{V}$**，其中<code>W</code>为<br><code>信道带宽（Hz）</code>，<code>V</code>为<code>码元进制</code>。</p><ul><li>香农定理<br>在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</li></ul><p><strong>信道的极限数据传输速率 = W $\log_2{(1+S/N)}$ （b/s）</strong><br>其中，<code>W</code>为<code>信道带宽（Hz）</code>，<code>S</code>为<code>信号的平均功率</code>，<code>N</code>为<code>噪声的平均功率</code>。</p><ul><li>编码与调制<ul><li><strong>基带信号</strong>：来自信源的信号，包含较多低频成分或直流成分，在数字信道上传输（基带传输）</li><li><strong>宽带信号</strong>：基带信号进行调制后形成的频分复用模拟信号，在模拟信道上传输（宽带传输）</li><li><strong>编码</strong>：<ul><li><code>数字信号 -&gt; 数字信号</code>：非归零编码、归零编码、曼彻斯特编码、差分曼彻斯特编码</li><li><code>模拟信号 -&gt; 数字信号</code>：常见的对音频信号进行编码的脉冲编码调制PCM，主要步骤为<code>抽样 -&gt; 量化 -&gt; 编码</code></li></ul></li><li><strong>调制</strong>：<ul><li><code>数字信号 -&gt; 模拟信号</code>：调幅AM、调频FM、调相PM、正交振幅调制QAM（调幅+调相）</li><li><code>模拟信号 -&gt; 模拟信号</code></li></ul></li></ul></li></ul><h4 id="3-传输媒体"><a href="#3-传输媒体" class="headerlink" title="3. 传输媒体"></a>3. 传输媒体</h4><p>传输媒体位于物理层下层，常被称为<code>0层</code>。</p><ul><li><strong>导引型传输媒体</strong>：固体媒体，如<code>双绞线</code>、<code>同轴电缆</code>、<code>光纤</code>等</li><li><strong>非导引型传输媒体</strong>：自由空间。可以利用<code>无线电波</code>、<code>微波</code>、<code>红外线</code>、<code>激光</code>等进行数据传输和通信。</li></ul><h4 id="4-物理层设备"><a href="#4-物理层设备" class="headerlink" title="4. 物理层设备"></a>4. 物理层设备</h4><ul><li><strong>中继器</strong>：对信号进行再生和还原，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度。</li><li><strong>集线器</strong>：多口中继器。</li></ul><h4 id="5-信道复用"><a href="#5-信道复用" class="headerlink" title="5. 信道复用"></a>5. 信道复用</h4><ul><li><strong>频分复用（FDM）</strong>：所有用户在同样的时间占用不同的带宽（这里指频率带宽）资源。</li><li><strong>时分复用（TDM）</strong>：所有用户在不同的时间占用同样的频带宽度。</li><li><strong>统计时分复用（STDM）</strong>：改进的时分复用。</li><li><strong>波分复用（WDM）</strong>：光的频分复用。</li><li><strong>码分复用（CDM）</strong>：各用户使用经过特殊挑选的不同码型，用户可在相同的时间使用同样的频带。</li></ul><h3 id="三-数据链路层"><a href="#三-数据链路层" class="headerlink" title="三. 数据链路层"></a>三. 数据链路层</h3><h4 id="1-相关概念"><a href="#1-相关概念" class="headerlink" title="1. 相关概念"></a>1. 相关概念</h4><ul><li><strong>结点</strong>：主机、路由器</li><li><strong>链路</strong>：两个结点之间的物理通道</li><li><strong>数据链路</strong>：两个结点之间的逻辑通道，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路</li><li><strong>帧</strong>：链路层的协议数据单元，封装网络层数据报</li></ul><h4 id="2-主要功能"><a href="#2-主要功能" class="headerlink" title="2. 主要功能"></a>2. 主要功能</h4><ul><li><p><strong>封装成帧</strong>：在一段数据的前后部分添加首部和尾部。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/16/v0NkqI.png"></p></li><li><p><strong>透明传输</strong>：帧的数据部分可能有跟帧首部或帧尾部完全一样的字符，接收方有可能会将其误认为帧边界，从而出现错误，这时候就要采取一定的措施，从而实现<strong>透明传输</strong>（无论什么数都可以无差错的传输）。<br>四种组帧方法实现透明传输：（目前普遍使用方法3和方法4）</p><ol><li>字符计数法：帧首部使用一个计数字段来表明来标明帧内字符数。</li><li>字符（节）填充法：在控制字符<code>SOH</code>或<code>EOT</code>前面插入一个转义字符<code>ESC</code></li><li>零比特填充法：连续<code>5</code>个<code>1</code>，插入一个<code>0</code></li><li>违规编码法：用“高-高”、“高-低”来定界帧的起始和终止。</li></ol></li><li><p><strong>差错控制</strong><br>传输中的差错都是由于噪声引起的。包括<code>位错</code>（比特差错，0变成1或1变成0）和<code>帧错</code>（丢失、重复、失序）。这里的差错控制主要是<code>比特差错</code>（位错）的控制。方法有：</p><ul><li><strong>检错编码</strong>：奇偶校验码、CRC循环冗余码</li><li><strong>纠错编码</strong>：海明码（发现双比特错，纠正单比特错）</li></ul></li><li><p><strong>流量控制</strong>：较高的发送速度和较低的接收能力不匹配，会造成传输出错。<br>流量控制的方法：</p><ol><li><code>停止-等待协议</code>：每发送完一个帧就停止发送，等待收到对方的确认后再发送下一帧。</li><li><code>滑动窗口协议</code>：选择重传协议SR、后退N帧协议GBN</li></ol></li></ul><h4 id="3-介质访问控制"><a href="#3-介质访问控制" class="headerlink" title="3. 介质访问控制"></a>3. 介质访问控制</h4><p>采取一定措施使得两对节点之间的通信不会发生互相干扰的情况。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/16/v0NVdP.png"></p><h4 id="4-局域网"><a href="#4-局域网" class="headerlink" title="4. 局域网"></a>4. 局域网</h4><p>在某一区域内由多台计算机互联成的计算机组，使用<code>广播信道</code>。</p><ul><li><strong>拓扑结构</strong>：星型拓扑、总线型拓扑、环形拓扑、树形拓扑</li><li><strong>传输介质</strong>：<ul><li><strong>有线局域网</strong>：双绞线、同轴电缆、光纤</li><li><strong>无线局域网</strong>：电磁波</li></ul></li><li><strong>介质访问控制方法</strong>：CSMA/CD、令牌总线、令牌环</li><li><strong>分类</strong>：以太网、令牌环网、FDDI网、ATM网、无线局域网WLAN</li></ul><h4 id="5-广域网"><a href="#5-广域网" class="headerlink" title="5. 广域网"></a>5. 广域网</h4><p>跨接很大的物理范围的网络，采用<code>分组交换</code>技术。广域网中的链路层协议有：</p><ul><li><strong>PPP协议</strong></li><li><strong>HDLC协议</strong></li></ul><h4 id="6-链路层设备"><a href="#6-链路层设备" class="headerlink" title="6. 链路层设备"></a>6. 链路层设备</h4><ul><li><strong>网桥</strong>：根据MAC帧的地址对帧进行转发和过滤。</li><li><strong>交换机</strong></li></ul><h3 id="四-网络层"><a href="#四-网络层" class="headerlink" title="四. 网络层"></a>四. 网络层</h3><p>网络层负责把<code>分组</code>从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单元是<code>数据报</code>。</p><h4 id="1-主要功能"><a href="#1-主要功能" class="headerlink" title="1. 主要功能"></a>1. 主要功能</h4><ul><li>路由选择与分组转发</li><li>异构网络互连</li><li>拥塞控制</li></ul><h4 id="2-数据交换方式"><a href="#2-数据交换方式" class="headerlink" title="2. 数据交换方式"></a>2. 数据交换方式</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/16/v0NZIf.png"></p><h3 id="五-运输层（传输层）"><a href="#五-运输层（传输层）" class="headerlink" title="五. 运输层（传输层）"></a>五. 运输层（传输层）</h3><p>运输层的任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。该层主要使用<code>传输控制协议TCP</code>（Transmission Control Protocol）和<code>用户数据报协议UDP</code>（User datagram Protocol）。</p><h3 id="六-应用层"><a href="#六-应用层" class="headerlink" title="六. 应用层"></a>六. 应用层</h3><p>应用层的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程间通信和交互的规则。典型的应用层协议有<code>文件传输协议FTP</code>、<code>简单邮件传输协议SMTP</code>、<code>超文本传输协议HTTP</code>等。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="">1.计算机网络-第7版-谢希仁</a><br><a href="https://juejin.cn/post/6844904079974465544">2.前端需要了解的计算机网络知识 </a></p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
          <category> 读书笔记 </category>
          
          <category> 网站网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 网络原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端跨域问题总结</title>
      <link href="/2022-05-08-qian-duan-kua-yu-wen-ti-zong-jie.html"/>
      <url>/2022-05-08-qian-duan-kua-yu-wen-ti-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-同源策略"><a href="#1-同源策略" class="headerlink" title="1. 同源策略"></a>1. 同源策略</h3><p>所谓同源是指，<code>域名</code>，<code>协议</code>，<code>端口</code>相同。浏览器在非同源时限制了以下三种行为：</p><ul><li><code>Cookie</code>、<code>LocalStorage</code> 和 <code>IndexDB</code> 的读取</li><li><code>DOM</code> 的获取</li><li><code>AJAX</code> 请求</li></ul><h3 id="2-跨域问题"><a href="#2-跨域问题" class="headerlink" title="2. 跨域问题"></a>2. 跨域问题</h3><ul><li> 跨域只存在于浏览器端，不存在于 <code>安卓</code>、<code>ios</code>、<code>Node.js</code> 、<code>python</code> 、 <code>java</code>等其它环境</li><li>跨域请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了</li></ul><h3 id="3-Cookie、LocalStorage及DOM跨域访问"><a href="#3-Cookie、LocalStorage及DOM跨域访问" class="headerlink" title="3. Cookie、LocalStorage及DOM跨域访问"></a>3. Cookie、LocalStorage及DOM跨域访问</h3><ul><li>设置<code>document.domain</code><br>这种方法适用于两个网页一级域名相同，只是次级域名不同的情况。比如<code>http://a.test.com/a.html</code>和<code>http://b.test.com/b.html</code>，<br>只要在两个网页中设置相同的<code>document.domain</code>，两个网页就可以共享 <code>Cookie</code>、<code>LocalStorage</code>以及获取<code>DOM</code>。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'test.com'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><code>window.postMessage()</code><br><code>window.postMessage()</code>是一个跨文档通信API，允许两个窗口进行通信而不受同源策略的限制。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 发送消息</span>targetWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> targetOrigin<span class="token punctuation">)</span><span class="token comment">// 接收消息</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 消息来源域名过滤</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">!==</span> <span class="token string">"http://example.org:8080"</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-AJAX-请求跨域"><a href="#4-AJAX-请求跨域" class="headerlink" title="4. AJAX 请求跨域"></a>4. AJAX 请求跨域</h3><ul><li><p>JSONP<br>借助于 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性，只能发 <code>GET</code> 请求</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 向服务器test.com发出请求，该请求的查询字符串有一个callback参数，用来指定回调函数 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.test.com/getData?callback=getData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 处理服务器返回回调函数的数据 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 服务器返回的数据会放到回调函数里面</span>    <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 处理获得的数据</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CORS<br><code>CORS</code> (Cross-Origin Resource Sharing)是跨域资源共享的缩写。在服务端响应头中添加<code>Access-Control-</code>相关字段，来允许跨域请求。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// *表示允许任意源的访问，也可以指定特定的源</span>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin：<span class="token operator">*</span>  <span class="token comment">// 表示跨域访问时带上cookie，需同时在ajax请求中设置`withCredentials: true`，</span>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Credentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">// 允许的方法，多个方法以逗号分隔</span>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Methods<span class="token operator">:</span> <span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token constant">POST</span><span class="token punctuation">,</span> <span class="token constant">PUT</span><span class="token comment">// 允许的头部，多个头部以逗号分隔</span>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Headers：Content<span class="token operator">-</span>Type<span class="token comment">// 允许浏览器在指定时间内，无需再发送预检请求进行协商，单位为秒</span>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Max<span class="token operator">-</span>Age<span class="token operator">:</span> <span class="token number">1728000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Node.js</code> 项目中可以直接使用<code>cors</code>模块来快速实现。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">// 引入cors模块，需要单独安装</span><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>WebSocket<br><code>WebSocket</code> 是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信。<code>WebSocket</code> 和 <code>HTTP</code> 都是应用层协议，都基于 <code>TCP</code> 协议。但是 <code>WebSocket</code> 是一种双向通信协议，在建立连接之后，<code>WebSocket</code> 的 <code>server</code> 与 <code>client</code> 都能主动向对方发送或接收数据。同时，<code>WebSocket</code> 在建立连接时需要借助 <code>HTTP</code> 协议，取得响应后，建立的连接会从 <code>http</code> 协议升级成 <code>WebSockets</code> 协议，以支持双向通信。<code>WebSockets</code> 没有同源策略，因此可以跨域通信。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://www.example.com/socket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须是绝对路径</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 服务端发送消息后，触发message事件</span>socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-Vue项目跨域开发"><a href="#5-Vue项目跨域开发" class="headerlink" title="5. Vue项目跨域开发"></a>5. Vue项目跨域开发</h3><ul><li>开发阶段<br>利用<code>webpack-dev-server</code>来代理到要跨域的服务器上。<br>原理是：通过<code>node</code>开一个服务器进行代理。前台发向后台服务器的请求，先发向<code>node</code>所开的服务器，<code>node</code> 服务器以相同的参数向真正的服务器进行请求，再把响应返回给前台。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//vue.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//   以'/api'开头的请求会被代理进行转发</span>        <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:8081'</span><span class="token punctuation">,</span>  <span class="token comment">// 目标服务器地址   </span>            <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span>                             <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>上线阶段<br>利用<code>nginx</code>进行反向代理访问后端服务器。<pre class="line-numbers language-none"><code class="language-none"># nginx.confhttp &#123;    server &#123;        listen       80;        server_name  &lt;your_server_name&gt;;        root &#x2F;data&#x2F;www;                  location &#x2F; &#123;            index  index.html;         &#125;        # 反向代理配置        location &#x2F;api &#123;              proxy_pass &lt;target_server&gt;;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
            <tag> React </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM元素的位置和尺寸属性总结</title>
      <link href="/2022-05-01-dom-yuan-su-de-wei-zhi-he-chi-cun-shu-xing-zong-jie.html"/>
      <url>/2022-05-01-dom-yuan-su-de-wei-zhi-he-chi-cun-shu-xing-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="DOM元素的位置"><a href="#DOM元素的位置" class="headerlink" title="DOM元素的位置"></a>DOM元素的位置</h3><table><thead><tr><th align="left">属性</th><th align="left">含义</th><th align="left">操作</th></tr></thead><tbody><tr><td align="left">offsetLeft</td><td align="left">当前元素左上角相对于其 <code>offsetParent</code> 节点的左边界偏移的像素值。</td><td align="left">只读</td></tr><tr><td align="left">offsetTop</td><td align="left">当前元素相对于其 <code>offsetParent</code> 元素的顶部内边距的距离。</td><td align="left">只读</td></tr><tr><td align="left">scrollLeft</td><td align="left">读取或设置元素滚动条到元素左边的距离。</td><td align="left">读写</td></tr><tr><td align="left">scrollTop</td><td align="left">获取或设置一个元素的内容垂直滚动的像素数。</td><td align="left">读写</td></tr><tr><td align="left">getBoundingClientRect()</td><td align="left">返回一个 DOMRect 对象，其提供了元素的大小及其相对于视口的位置。</td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect">示意图</a></td></tr></tbody></table><h3 id="DOM元素的尺寸"><a href="#DOM元素的尺寸" class="headerlink" title="DOM元素的尺寸"></a>DOM元素的尺寸</h3><table><thead><tr><th align="left">属性</th><th align="left">含义</th><th align="left">操作</th></tr></thead><tbody><tr><td align="left">offsetWidth</td><td align="left">元素的<code>border-box</code>宽度。包括边框 (border)、内边距 (padding)、竖直方向滚动条 (scrollbar)（如果存在）。</td><td align="left">只读，整数</td></tr><tr><td align="left">offsetHeight</td><td align="left">元素的<code>border-box</code>高度度。包括边框 (border)、内边距 (padding)、水平方向滚动条 (scrollbar)（如果存在）。</td><td align="left">只读，整数</td></tr><tr><td align="left">scrollWidth</td><td align="left">元素的内容宽度，包括由于 overflow 溢出而在屏幕上不可见的内容。包含元素的内边距，但不包括边框，外边距或垂直滚动条（如果存在）</td><td align="left">只读，整数</td></tr><tr><td align="left">scrollHeight</td><td align="left">元素的内容高度，包括由于 overflow 溢出而在屏幕上不可见的内容。包含元素的内边距，但不包括边框，外边距或水平滚动条（如果存在）</td><td align="left">只读，整数</td></tr><tr><td align="left">clientWidth</td><td align="left">元素内部的宽度（以像素为单位）。包括内边距（padding），但不包括边框（border）、外边距（margin）和垂直滚动条（如果存在）。</td><td align="left">只读，整数</td></tr><tr><td align="left">clientHeight</td><td align="left">元素内部的高度（以像素为单位），包含内边距，但不包括边框、外边距和水平滚动条（如果存在）。</td><td align="left">只读，整数</td></tr><tr><td align="left">clientLeft</td><td align="left">左边框（border-left）的宽度</td><td align="left">只读，整数</td></tr><tr><td align="left">clientTop</td><td align="left">上边框（border-top）的宽度</td><td align="left">只读，整数</td></tr><tr><td align="left">getBoundingClientRect()</td><td align="left">返回一个 DOMRect 对象，其提供了元素的大小及其相对于视口的位置。</td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect">示意图</a></td></tr></tbody></table><h3 id="window的尺寸和位置"><a href="#window的尺寸和位置" class="headerlink" title="window的尺寸和位置"></a>window的尺寸和位置</h3><table><thead><tr><th align="left">属性</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">window.innerWidth</td><td align="left">视口的宽</td></tr><tr><td align="left">window.innerHeight</td><td align="left">视口的高</td></tr><tr><td align="left">window.outerWidth</td><td align="left">浏览器窗口的宽</td></tr><tr><td align="left">window.outerHeight</td><td align="left">浏览器窗口的高</td></tr><tr><td align="left">window.screenX</td><td align="left">浏览器左边界到屏幕左边界的水平距离</td></tr><tr><td align="left">window.screenY</td><td align="left">返回浏览器顶部到屏幕顶部的垂直距离。</td></tr><tr><td align="left">window.screenLeft</td><td align="left">screenX的别名</td></tr><tr><td align="left">window.screenTop</td><td align="left">screenY的别名</td></tr><tr><td align="left">window.scrollX</td><td align="left">页面水平方向滚动的像素值</td></tr><tr><td align="left">window.scrollY</td><td align="left">页面在垂直方向已滚动的像素值</td></tr><tr><td align="left">window.screen.width</td><td align="left">屏幕的宽度</td></tr><tr><td align="left">window.screen.height</td><td align="left">屏幕的高度</td></tr><tr><td align="left">window.screen.availWidth</td><td align="left">浏览器窗口可占用的水平宽度，一般情况下等于屏幕的宽度</td></tr><tr><td align="left">window.screen.availHeight</td><td align="left">浏览器窗口在屏幕上可占用的垂直空间，一般情况下等于屏幕的高度减去 mac 顶部栏或 windows 底部栏。</td></tr></tbody></table><h3 id="MouseEvent的位置"><a href="#MouseEvent的位置" class="headerlink" title="MouseEvent的位置"></a>MouseEvent的位置</h3><table><thead><tr><th align="left">属性</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">clientX</td><td align="left">鼠标在视口中的水平坐标</td></tr><tr><td align="left">clientY</td><td align="left">鼠标在视口中的垂直坐标</td></tr><tr><td align="left">screenX</td><td align="left">鼠标在屏幕中的水平坐标</td></tr><tr><td align="left">screenY</td><td align="left">鼠标在屏幕中的垂直坐标</td></tr><tr><td align="left">pageX</td><td align="left">鼠标在文档中的水平坐标，包括滚动的距离</td></tr><tr><td align="left">pageY</td><td align="left">鼠标在文档中的垂直坐标，包括滚动的距离</td></tr><tr><td align="left">offsetX</td><td align="left">鼠标在被触发的dom中的水平坐标</td></tr><tr><td align="left">offsetY</td><td align="left">鼠标在被触发的dom中的垂直坐标</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2023/01/11/pSn33p6.jpg"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement">1. HTMLElement</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element">2. Element</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window">3. Window</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Screen">4. Screen</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent">5. MouseEvent</a><br><a href="https://blog.csdn.net/weixin_33716557/article/details/91890517">6. window和screen的尺寸总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise实现原理</title>
      <link href="/2022-04-25-promise-shi-xian-yuan-li.html"/>
      <url>/2022-04-25-promise-shi-xian-yuan-li.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-Promise-类实现"><a href="#1-Promise-类实现" class="headerlink" title="1. Promise 类实现"></a>1. <code>Promise</code> 类实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// /lib/es6-promise/promise.js</span><span class="token keyword">function</span> <span class="token function">needsResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'You must pass a resolver function as the first argument to the promise constructor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">needsNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">resolver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// nextId()返回一个自增变量</span>        <span class="token comment">// 创建实例标识</span>        <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PROMISE_ID</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// _result 缓存 promise 结果</span>        <span class="token comment">// _state  缓存 promise 的状态</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_state <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>        <span class="token comment">// _subscribers 缓存订阅 promise 的回调 </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 空函数 function noop() &#123;&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>noop <span class="token operator">!==</span> resolver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 判断resolver是否是一个函数，否则报错</span>            <span class="token keyword">typeof</span> resolver <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">needsResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 判断Promise是否通过new来调用，否则报错</span>            <span class="token comment">// 调用initializePromise函数将resolve函数和reject函数注入到resolver中</span>            <span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span> <span class="token operator">?</span> <span class="token function">initializePromise</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> resolver<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">needsNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @method catch实现     * @param &#123;Function&#125; onRejection     * @return &#123;Promise&#125;     */</span>    <span class="token keyword">catch</span><span class="token punctuation">(</span>onRejection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 转调用then方法</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onRejection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @method finally实现     * @param &#123;Function&#125; callback     * @return &#123;Promise&#125;     */</span>    <span class="token function">finally</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> constructor <span class="token operator">=</span> promise<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> constructor<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token parameter">reason</span> <span class="token operator">=></span> constructor<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> reason<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将实现的then方法挂载到Promise.prototype上</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> then<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Promise<span class="token punctuation">;</span><span class="token comment">// 将实现的all、race、resolve、reject静态方法挂载Promise上</span>Promise<span class="token punctuation">.</span>all <span class="token operator">=</span> all<span class="token punctuation">;</span>Promise<span class="token punctuation">.</span>race <span class="token operator">=</span> race<span class="token punctuation">;</span>Promise<span class="token punctuation">.</span>resolve <span class="token operator">=</span> Resolve<span class="token punctuation">;</span>Promise<span class="token punctuation">.</span>reject <span class="token operator">=</span> Reject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-resolve-和-reject-函数实现"><a href="#2-resolve-和-reject-函数实现" class="headerlink" title="2. resolve 和 reject 函数实现"></a>2. <code>resolve</code> 和 <code>reject</code> 函数实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// /lib/es6-promise/-internal.js</span><span class="token comment">/** * new Promise((resolve, reject) => &#123;&#125;) * resolver = (resolve, reject) => &#123;&#125; * initializePromise函数来为resolver注入resolve函数和reject函数 */</span><span class="token keyword">function</span> <span class="token function">initializePromise</span><span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> resolver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里执行了resolver函数</span>        <span class="token comment">// resolver中的形参resolve = resolvePromise</span>        <span class="token comment">// resolver中的形参reject = rejectPromise</span>        <span class="token function">resolver</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 调用内部实现的resolve函数</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">rejectPromise</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 调用内部实现的reject函数</span>            <span class="token function">reject</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * resolve函数实现 */</span><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// new Promise((resolve, reject) => &#123;</span>    <span class="token comment">//      setTimeout(() => &#123;</span>    <span class="token comment">//          resolve('5')</span>    <span class="token comment">//      &#125;, 3000)</span>    <span class="token comment">// &#125;)</span>    <span class="token comment">// value === '5'</span>    <span class="token comment">// 如果resolve的value是当前promise实例</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// selfFulfillment为一个报错函数</span>        <span class="token comment">// 调用reject方法更新promise状态到REJECTED，返回报错信息</span>        <span class="token function">reject</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> <span class="token function">selfFulfillment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">objectOrFunction</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果value是否是一个object或function</span>        <span class="token keyword">let</span> then<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            then <span class="token operator">=</span> value<span class="token punctuation">.</span>then<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果value上不带then方法，</span>            <span class="token comment">// reject处理promise, 返回报错信息</span>            <span class="token function">reject</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// value可能是thenable的，进一步处理</span>        <span class="token function">handleMaybeThenable</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> value<span class="token punctuation">,</span> then<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 其他情况，转换promise状态到FULFILLED</span>        <span class="token function">fulfill</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * new Promise((resolve, reject) => &#123;&#125;) * reject函数实现 */</span><span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// promise的状态不是pending状态，不予处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise<span class="token punctuation">.</span>_state <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// 修改promise实例的状态为REJECTED</span>    promise<span class="token punctuation">.</span>_state <span class="token operator">=</span> <span class="token constant">REJECTED</span><span class="token punctuation">;</span>    <span class="token comment">// 缓存reject的原因</span>    promise<span class="token punctuation">.</span>_result <span class="token operator">=</span> reason<span class="token punctuation">;</span>    <span class="token comment">// 通知订阅者</span>    <span class="token function">asap</span><span class="token punctuation">(</span>publishRejection<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 转换promise状态到FULFILLED */</span><span class="token keyword">function</span> <span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// promise的状态不是pending状态，不予处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise<span class="token punctuation">.</span>_state <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// 缓存promise结果</span>    promise<span class="token punctuation">.</span>_result <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment">// 修改promise状态为FULFILLED</span>    promise<span class="token punctuation">.</span>_state <span class="token operator">=</span> <span class="token constant">FULFILLED</span><span class="token punctuation">;</span>    <span class="token comment">// 通知订阅者</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise<span class="token punctuation">.</span>_subscribers<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">asap</span><span class="token punctuation">(</span>publish<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-then-方法实现"><a href="#3-then-方法实现" class="headerlink" title="3. then 方法实现"></a>3. <code>then</code> 方法实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// /lib/es6-promise/then.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfillment<span class="token punctuation">,</span> onRejection</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">// 创建子promise实例，仅初始化变量，不进行initializePromise处理</span>    <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">this<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// child: &#123;</span>    <span class="token comment">//     [PROMISE_ID]: id++,</span>    <span class="token comment">//     _state: undefined,</span>    <span class="token comment">//     _result: undefined,</span>    <span class="token comment">//     _subscribers: []</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// 这里是对上一步的补充，避免Promise.prototype.then.call(otherThingWithoutPromiseId)的情况的发生</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token constant">PROMISE_ID</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">makePromise</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// _state: PENDING = 0 | FULFILLED = 1 | REJECTED = 2</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> _state <span class="token punctuation">&#125;</span> <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token comment">// 当前的promise状态已经不是PENDING</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 根据_state 获取 onFulfillment 或者onRejection 回调函数</span>        <span class="token keyword">const</span> callback <span class="token operator">=</span> arguments<span class="token punctuation">[</span>_state <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 更新子promise的状态</span>        <span class="token function">asap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">invokeCallback</span><span class="token punctuation">(</span>_state<span class="token punctuation">,</span> child<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>_result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 当前的 promise 为 PENDING </span>        <span class="token comment">// 将子promise 收集到父promise 的 _subscribers 中</span>        <span class="token function">subscribe</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> child<span class="token punctuation">,</span> onFulfillment<span class="token punctuation">,</span> onRejection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token comment">// 返回子promise，供链式调用</span>    <span class="token keyword">return</span> child<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-subscribe和-publish-函数的实现"><a href="#4-subscribe和-publish-函数的实现" class="headerlink" title="4. subscribe和 publish 函数的实现"></a>4. <code>subscribe</code>和 <code>publish</code> 函数的实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 收集订阅者</span><span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> child<span class="token punctuation">,</span> onFulfillment<span class="token punctuation">,</span> onRejection</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> _subscribers <span class="token punctuation">&#125;</span> <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> length <span class="token punctuation">&#125;</span> <span class="token operator">=</span> _subscribers<span class="token punctuation">;</span>    parent<span class="token punctuation">.</span>_onerror <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 收集then方法的创建的子promise及回调，每次增加3个元素</span>    _subscribers<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> child<span class="token punctuation">;</span>    _subscribers<span class="token punctuation">[</span>length <span class="token operator">+</span> <span class="token constant">FULFILLED</span><span class="token punctuation">]</span> <span class="token operator">=</span> onFulfillment<span class="token punctuation">;</span>    _subscribers<span class="token punctuation">[</span>length <span class="token operator">+</span> <span class="token constant">REJECTED</span><span class="token punctuation">]</span>  <span class="token operator">=</span> onRejection<span class="token punctuation">;</span>    <span class="token comment">// 在 parent 状态更新之后增加的订阅</span>    <span class="token comment">// 状态不再发生变化 则直接发出通知</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>_state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">asap</span><span class="token punctuation">(</span>publish<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// resolve函数调用时会触发fullfill，修改promise状态并进行publish</span><span class="token keyword">function</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> subscribers <span class="token operator">=</span> promise<span class="token punctuation">.</span>_subscribers<span class="token punctuation">;</span>    <span class="token keyword">let</span> settled <span class="token operator">=</span> promise<span class="token punctuation">.</span>_state<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribers<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> child<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> detail <span class="token operator">=</span> promise<span class="token punctuation">.</span>_result<span class="token punctuation">;</span>    <span class="token comment">// subscribe中每次增加3个元素，依次为then创建的子promise，传入then方法的onFulfillment函数和onRejection函数</span>    <span class="token comment">// 这里每3个为一组，因为是执行resolve，onRejection无需调用</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> subscribers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        child <span class="token operator">=</span> subscribers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        callback <span class="token operator">=</span> subscribers<span class="token punctuation">[</span>i <span class="token operator">+</span> settled<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 存在子promise 订阅</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">invokeCallback</span><span class="token punctuation">(</span>settled<span class="token punctuation">,</span> child<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> detail<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">callback</span><span class="token punctuation">(</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    promise<span class="token punctuation">.</span>_subscribers<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://juejin.cn/post/6844903684904583181">1. ES6-Promise源码阅读</a><br><a href="https://github.com/stefanpenner/es6-promise">2. ES6-Promise源码</a><br><a href="https://www.ituring.com.cn/article/66566">3. Promise/A+规范</a><br><a href="https://zhuanlan.zhihu.com/p/58428287">4. 图解 Promise 实现原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据类型判断</title>
      <link href="/2022-04-24-javascript-shu-ju-lei-xing-pan-duan.html"/>
      <url>/2022-04-24-javascript-shu-ju-lei-xing-pan-duan.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-JS中的数据类型"><a href="#一-JS中的数据类型" class="headerlink" title="一. JS中的数据类型"></a>一. JS中的数据类型</h3><ul><li>基本数据类型：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code>、<code>Symbol</code></li><li>引用数据类型：<code>Object</code></li></ul><h3 id="二-数据类型判断方法"><a href="#二-数据类型判断方法" class="headerlink" title="二. 数据类型判断方法"></a>二. 数据类型判断方法</h3><ul><li><code>typeof</code></li><li><code>instanceof</code></li><li><code>constructor</code></li><li><code>===</code></li><li><code>Object.is()</code></li><li><code>Array.isArray()</code></li><li><code>isNaN()</code></li></ul><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>对一个值使用<code>typeof</code>操作符的返回值（返回值类型为字符串）有以下几种：</p><ul><li>“undefined” — 值未定义</li><li>“boolean”   — 布尔值</li><li>“string”    — 字符串</li><li>“number”    — 数值</li><li>“object”    — 对象或null</li><li>“function”  — 函数</li></ul><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>检测某个变量是否是某个构造函数的实例。常用的一些JS原生引用类型有：</p><ul><li><code>o instanceof Object</code> — 变量o是否是Object类型的实例</li><li><code>o instanceof Array</code>  — 变量o是否是Array类型的实例</li><li><code>o instanceof RegExp</code> — 变量o是否是RegExp类型的实例</li><li><code>o instanceof Date</code>   — 变量o是否是Date类型的实例</li><li><code>o instanceof Function</code> — 变量o是否是Function类型的实例</li><li><code>o instanceof Boolean</code> — 变量o是否是Boolean类型的实例</li><li><code>o instanceof String</code> — 变量o是否是String类型的实例</li><li><code>o instanceof Number</code> — 变量o是否是Number类型的实例</li></ul><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p><code>constructor</code>属性是对创建对象的构造函数的引用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">;</span> <span class="token comment">// true</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Date<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title="==="></a>===</h4><p>判断两个操作数的数据类型和值是否完全一致。</p><ul><li><code>&quot;5&quot; === 5</code> — false</li></ul><h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h4><p>弥补了全等运算符<code>===</code>存在的两个怪异点：</p><ul><li><code>+0 === -0</code> — true</li><li><code>NaN === NaN</code> — false</li><li><code>Object.is(+0, -0)</code> —  false</li><li><code>Object.is(NaN, NaN)</code> — true<br>其他判断结果与<code>===</code>结果一致。</li></ul><h4 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h4><p>判断一个值是否是一个<code>Array</code>。解决了网页中存在多个<code>iframe</code>（即存在多个多个全局执行环境），<code>instanceof</code>无法判断<code>Array</code>类型的问题</p><ul><li><code>Array.isArray([])</code> —  true</li><li><code>Array.isArray(Array.prototype)</code> — true</li></ul><p>示例代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取窗口中最后一个框架中的Array构造函数</span>xArray <span class="token operator">=</span> window<span class="token punctuation">.</span>frames<span class="token punctuation">[</span>window<span class="token punctuation">.</span>frames<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Array<span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h4><p>判断指定值是否为数字，是数字返回<code>false</code>，否则返回<code>true</code>。 <code>isNaN()</code> 在判断参数是否为数字之前，会首先使用 <code>Number()</code> 对参数进行数字类型的转换。所以 <code>isNaN(value)</code> 其实等效于：<code>isNaN(Number(value))</code>。当参数 <code>value</code> 能被 <code>Number()</code> 转换为数字时，结果返回 <code>false</code>，否则返回 <code>true</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'100px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB基础知识总结</title>
      <link href="/2022-03-27-mongodb-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2022-03-27-mongodb-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据库分类"><a href="#一、数据库分类" class="headerlink" title="一、数据库分类"></a>一、数据库分类</h3><ul><li>关系型数据库（RDBMS）<ul><li>MySQL、Oracle、DB2、SQL Server</li><li>…</li></ul></li><li>非关系型数据库（NoSQL)<ul><li>键值对数据库: Redis</li><li>文档数据库: MongoDB</li></ul></li></ul><h3 id="二、安装MongoDB"><a href="#二、安装MongoDB" class="headerlink" title="二、安装MongoDB"></a>二、安装MongoDB</h3><ul><li>数据库软件构成<ul><li>数据库的服务器<ul><li>数据库的服务器用来存放数据</li><li><code>mongod</code> 用来启动服务器</li></ul></li><li>数据库的客户端<ul><li>客户端用来操作服务器，对数据进行增删改查的操作</li><li><code>mongo</code> 用来启动客户端</li></ul></li></ul></li><li>下载<a href="https://www.mongodb.com/try/download/community?tck=docs_server">msi安装包</a></li><li>打开安装包进行安装</li><li>配置mongoDB安装路径到环境变量中 <code>C:\Program Files\MongoDB\Server\4.0\bin</code></li><li>在C盘根目录创建一个<code>data</code>文件夹，在<code>data</code>中创建<code>db</code>文件夹，用于存放数据库文件</li><li>打开命令行工具，输入<code>mongod</code>，启动<code>mongoDB</code>服务器<ul><li>如果想要更改数据库默认存放目录及端口，使用命令<code>mongod --dbpath 路径  --port 端口</code></li></ul></li><li>再打开一个命令行窗口，输入<code>mongo</code>，出现<code>&gt;</code>，表示成功连接mongoDB服务器</li><li>设为系统服务：开机自启，后台自动运行（4.0版本以后安装MongoDB的时候就可以开启此功能）（参见<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/">mongodb官网资料</a>）</li></ul><h3 id="三、相关概念"><a href="#三、相关概念" class="headerlink" title="三、相关概念"></a>三、相关概念</h3><table><thead><tr><th>SQL概念</th><th>MongoDB概念</th></tr></thead><tbody><tr><td>database 数据库</td><td>database 数据库</td></tr><tr><td>table 表</td><td>collection 集合</td></tr><tr><td>row 数据行</td><td>document 文档</td></tr><tr><td>column 数据字段</td><td>field 域</td></tr><tr><td>index 索引</td><td>index 索引</td></tr><tr><td>table joins 表链接</td><td>不支持</td></tr><tr><td>primary 主键</td><td>primary key 自动设置_id为主键</td></tr></tbody></table><ul><li><p><code>database</code> 数据库<br>数据库是一个仓库，在仓库中可以存放集合</p><p><strong>命名规范</strong>：</p><ul><li>UTF-8字符</li><li>不能是空字符串</li><li>不能含有空格、<code>.</code>、<code>$</code>、<code>/</code>、<code>\</code>和<code>\0</code>（空字符）</li><li>全部小写</li><li>最多64Byte。</li></ul><p><strong>保留的数据库名</strong>：</p><ul><li><strong>admin</strong>：root数据库</li><li><strong>local</strong>：用于存储限于本地单台服务器的任意集合</li><li><strong>config</strong>：用于保存分片相关的信息</li></ul></li><li><p><code>collection</code> 集合<br>类似于数组，对应SQL中的<code>table</code>，在集合中可以存放文档<br><strong>命名规范</strong>：</p><ul><li>不能是空字符串</li><li>不能包含<code>\0</code>（空字符）</li><li>不能以<code>system.</code>开头</li><li>不能包含<code>$</code></li></ul></li><li><p><code>document</code> 文档<br>是MongoDB数据库中最小单位，我们存储和操作的内容都是文档。文档是一组键值对，采用BSON格式存储（<a href="https://blog.csdn.net/m0_38110132/article/details/77716792" title="BSON的介绍及BSON与JSON的区别">BSON</a>，一种类json的二进制形式的存储格式。）<br><strong>注意</strong>：</p><ol><li>文档中的键值对是有序的，例如<code>&#123;&quot;username&quot;:&quot;test&quot;,&quot;password&quot;:&quot;123&quot;&#125;</code>和<code>&#123;&quot;password&quot;:&quot;123&quot;,&quot;username&quot;:&quot;test&quot;&#125;</code>是不同的文档。</li><li>文档的键是字符串，值可以是字符串，也可以是其它几种<a href="https://docs.mongodb.com/manual/reference/bson-types/">数据类型</a>。</li><li>区分类型和大小写。</li><li>键不能重复。</li></ol><p><strong>命名规范</strong>：</p><ul><li>不能含有<code>\0</code>（空字符）</li><li><code>.</code>和<code>$</code>有特别的意义，只有在特定环境下使用</li><li>以<code>_</code>开头的键是保留的</li></ul></li></ul><h3 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h3><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>字符串,UTF-8编码的字符串才是合法的</td></tr><tr><td>Integer</td><td>整型数值</td></tr><tr><td>Boolean</td><td>布尔值</td></tr><tr><td>Double</td><td>双精度浮点值</td></tr><tr><td>Min/Max keys</td><td>将一个值与BSON元素的最低值和最高值相对比</td></tr><tr><td>Array</td><td>数组</td></tr><tr><td>Timestamp</td><td>时间戳，64位的值，前32位是一个time_t值，后32位是在某秒钟操作的一个递增的序数</td></tr><tr><td>Object</td><td>内嵌文档</td></tr><tr><td>Null</td><td>空值</td></tr><tr><td>Symbol</td><td>符号</td></tr><tr><td>Date</td><td>日期时间用UNIX时间格式来存储当前日期或时间</td></tr><tr><td>Object ID</td><td>对象ID</td></tr><tr><td>Binary Data</td><td>二进制数据</td></tr><tr><td>Code</td><td>代码类型</td></tr><tr><td>Regular expression</td><td>正则表达式类型</td></tr></tbody></table><h3 id="五、基本指令"><a href="#五、基本指令" class="headerlink" title="五、基本指令"></a>五、基本指令</h3><p>启动<code>mongo</code>客户端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show dbs/databases        <span class="token comment"># 显示当前的所有数据库</span>use <span class="token operator">&lt;</span>database<span class="token operator">></span>            <span class="token comment"># 进入到指定的数据库中/创建不存在的数据库</span>db                        <span class="token comment"># 查看当前所处的数据库</span>show collections          <span class="token comment"># 显示当前数据库中的所有集合</span>db.dropDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 删除数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、CRUD指令"><a href="#六、CRUD指令" class="headerlink" title="六、CRUD指令"></a>六、CRUD指令</h3><blockquote><p>query指查询条件，documnent指文档。</p></blockquote><ul><li><p>插入文档</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.insert<span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment"># 插入一个或多个文档</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.insertOne<span class="token punctuation">(</span>document<span class="token punctuation">)</span>                     <span class="token comment"># 插入一个文档      </span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.insertMany<span class="token punctuation">(</span><span class="token punctuation">[</span>document1, document2, <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 插入多个文档</span><span class="token comment"># 示例：</span>db.users.insert<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name: <span class="token string">'admin'</span>, age: <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>db.users.insertOne<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name: <span class="token string">'admin'</span>, age: <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>db.users.insertMany<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span> name: <span class="token string">'admin'</span>, age: <span class="token number">16</span> <span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span> name: <span class="token string">'admin2'</span>, age: <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查询文档</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.find<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                 <span class="token comment"># 查询所有文档</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.find<span class="token punctuation">(</span>query<span class="token punctuation">)</span>                                            <span class="token comment"># 查询符合查询条件的文档集合</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.findOne<span class="token punctuation">(</span>query<span class="token punctuation">)</span>                                         <span class="token comment"># 查询符合查询条件的第一个文档</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.find<span class="token punctuation">(</span>query<span class="token punctuation">)</span>.count<span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment"># 查询文档数量</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.find<span class="token punctuation">(</span>query<span class="token punctuation">)</span>.limit<span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>                            <span class="token comment"># 限制查询数量</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.find<span class="token punctuation">(</span>query<span class="token punctuation">)</span>.skip<span class="token punctuation">(</span><span class="token punctuation">[</span>pageNum-1<span class="token punctuation">]</span>*pageSize<span class="token punctuation">)</span>.limit<span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span> <span class="token comment"># 查询分页</span><span class="token comment"># 示例：</span>db.users.find<span class="token punctuation">(</span><span class="token punctuation">)</span>db.users.find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age: <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>db.users.findOne<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age: <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.update<span class="token punctuation">(</span>query, document<span class="token punctuation">)</span>                <span class="token comment"># 替换文档</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.update<span class="token punctuation">(</span>query, <span class="token punctuation">&#123;</span> <span class="token variable">$set</span>：newDocument <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token comment"># 修改文档</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.updateMany<span class="token punctuation">(</span>filter, update, options<span class="token punctuation">)</span>    <span class="token comment"># 修改多个文档</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.updateOne<span class="token punctuation">(</span>filter, update, options<span class="token punctuation">)</span>     <span class="token comment"># 修改一个文档</span><span class="token comment"># 示例：</span>db.users.update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name: <span class="token string">'mike'</span> <span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span> name: <span class="token string">'Jack'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 查找到的文档会被&#123; name:'Jack' &#125;替换</span>db.users.update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name: <span class="token string">'mike'</span>, <span class="token punctuation">&#123;</span> <span class="token variable">$set</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span> age: <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment"># 查到的第一个文档age值会被修改为17</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">db.users.remove<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                         <span class="token comment"># 删除集合中所有文档</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.remove<span class="token punctuation">(</span>query, options<span class="token punctuation">)</span>      <span class="token comment"># 删除符合条件的文档</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.deleteOne<span class="token punctuation">(</span>filter, options<span class="token punctuation">)</span>  <span class="token comment"># 删除一个文档</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.deleteMany<span class="token punctuation">(</span>filter, options<span class="token punctuation">)</span> <span class="token comment"># 删除多个文档</span>db.<span class="token operator">&lt;</span>collection<span class="token operator">></span>.drop<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 删除集合</span>db.dropDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment"># 删除数据库</span><span class="token comment"># 示例：</span>db.users.remove<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name: <span class="token string">'Mike'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>db.users.deleteOne<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="七、操作符"><a href="#七、操作符" class="headerlink" title="七、操作符"></a>七、操作符</h3><ul><li>比较操作符</li></ul><table><thead><tr><th align="center">操作符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">$gt</td><td align="center">&gt;</td></tr><tr><td align="center">$gte</td><td align="center">&gt;=</td></tr><tr><td align="center">$lt</td><td align="center">&lt;</td></tr><tr><td align="center">$lte</td><td align="center">&lt;=</td></tr><tr><td align="center">$eq</td><td align="center">=</td></tr><tr><td align="center">$ne</td><td align="center">!=</td></tr><tr><td align="center">$type</td><td align="center">数据类型</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">db.users.find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age: <span class="token punctuation">&#123;</span> <span class="token variable">$gt</span><span class="token builtin class-name">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment"># 查询age>20的文档数据</span>db.users.find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age: <span class="token punctuation">&#123;</span> <span class="token variable">$gt</span><span class="token builtin class-name">:</span> <span class="token number">20</span>, <span class="token variable">$lt</span><span class="token builtin class-name">:</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment"># 查询20&lt;age&lt;40的文档</span>db.blogs.find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token variable">$type</span><span class="token builtin class-name">:</span> <span class="token string">'string'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment"># 查找title属性的值为string类型的文档</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="八、文档间的关系"><a href="#八、文档间的关系" class="headerlink" title="八、文档间的关系"></a>八、文档间的关系</h3><ul><li>一对一</li><li>一对多</li><li>多对多</li></ul><h3 id="九、文档排序"><a href="#九、文档排序" class="headerlink" title="九、文档排序"></a>九、文档排序</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sort()可以用来指定文档的排序规则 </span><span class="token comment"># 参数为&#123; &lt;field>: 1|-1 &#125;</span><span class="token comment"># &lt;field>为要排序的字段，1表示升序 -1表示降序</span>db.users.find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>.sort<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age: <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment"># users集合中的文档按照age升序返回</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十、限制查询的返回字段"><a href="#十、限制查询的返回字段" class="headerlink" title="十、限制查询的返回字段"></a>十、限制查询的返回字段</h3><p>默认情况下，MongoDB中的查询返回匹配文档中的所有字段。可以在查询中来配置指定货限制返回的字段。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">db.inventory.find<span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> status: <span class="token string">"A"</span> <span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span> item: <span class="token number">1</span>, status: <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span> <span class="token comment"># 查找status为A的文档，返回的查询结果仅包含item,status,_id三个字段</span>db.inventory.find<span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> status: <span class="token string">"A"</span> <span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span> item: <span class="token number">1</span>, status: <span class="token number">1</span>, _id: <span class="token number">0</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span> <span class="token comment"># 查找status为A的文档，返回的查询结果仅包含item,status两个字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="十一、使用mongoose连接mongoDB"><a href="#十一、使用mongoose连接mongoDB" class="headerlink" title="十一、使用mongoose连接mongoDB"></a>十一、使用mongoose连接mongoDB</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 连接数据库</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/adminclient"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听连接状态</span><span class="token keyword">const</span> connection <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库连接成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>connection<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库连接断开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 断开数据库连接(一般无需使用)</span>mongoose<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 定义Schema（集合中的文档结构）</span><span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token keyword">const</span> blogSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span>  String<span class="token punctuation">,</span>    <span class="token literal-property property">author</span><span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span>   String<span class="token punctuation">,</span>    <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">body</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> Date <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>now <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">hidden</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">votes</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>      <span class="token literal-property property">favs</span><span class="token operator">:</span>  Number    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建Model（文档集合），以便后续来操作集合</span><span class="token keyword">const</span> BlogModel <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'blog'</span><span class="token punctuation">,</span> blogSchema<span class="token punctuation">)</span><span class="token comment">// 使用BlogModel来进行CRUD</span>BlogModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'第一篇博客'</span><span class="token punctuation">,</span>    <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">'Snail-Lu'</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">'这是我的第一篇博客'</span><span class="token punctuation">,</span>    <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">'写的不错'</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">'2022/4/1 22:23:14'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">'2022-4-1 22:22:22'</span><span class="token punctuation">,</span>    <span class="token literal-property property">hidden</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">votes</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      <span class="token literal-property property">favs</span><span class="token operator">:</span>  <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'插入成功'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> BlogModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'第一篇博客'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> doc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 利用document方法进行文档修改</span>        doc<span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">hidden</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        doc<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://www.runoob.com/mongodb/mongodb-tutorial.html">菜鸟MongoDB教程</a></li><li><a href="https://www.mongodb.com/docs/manual/tutorial/getting-started/">MongoDB官方文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript基础知识总结</title>
      <link href="/2022-03-21-typescript-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2022-03-21-typescript-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h3><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> isDone<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 数字(全是浮点数)</span><span class="token keyword">let</span> deLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>           <span class="token comment">// 十进制 </span><span class="token keyword">let</span> hexLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> oxfood<span class="token punctuation">;</span>     <span class="token comment">// 十六进制 </span><span class="token keyword">let</span> binaryLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制 </span><span class="token keyword">let</span> octalLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span>    <span class="token comment">// 八进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"bob"</span><span class="token punctuation">;</span> name <span class="token operator">=</span> <span class="token string">"smith"</span><span class="token punctuation">;</span> <span class="token comment">// 模板字符串，支持定义多行文本，支持使用$&#123;&#125;内嵌表达式</span><span class="token keyword">let</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span> <span class="token keyword">let</span> sentence<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">. I'll be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">years old next month.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>元素的类型相同，两种定义方式：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 1.元素类型后面接上[] </span><span class="token keyword">let</span> list<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 2.数组泛型，Array&lt;元素类型> </span><span class="token keyword">let</span> list<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h4><p>已知元素数量和类型的数组，各元素的类型不必相同。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// OK </span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Gender <span class="token punctuation">&#123;</span> Male<span class="token punctuation">,</span> Female <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//默认情况下，从0开始为元素编号，</span><span class="token keyword">let</span> person<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> gender<span class="token operator">:</span> Gender <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Nike'</span><span class="token punctuation">,</span>  gender<span class="token operator">:</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">&#125;</span><span class="token comment">// 也可以手动指定成员的数值 </span><span class="token comment">// enum Gender &#123; Male = 1, Female &#125;; </span><span class="token comment">// 可以根据枚举的值获得它对应的名字</span><span class="token keyword">let</span> gender<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> Gender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Female</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h4><p>对于暂时还不确定类型的变量可以使用any类型，类型检查器在编译时不会检查变量的数据类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> notSure<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> notSure <span class="token operator">=</span> <span class="token string">"Maybe a string instead"</span><span class="token punctuation">;</span>   <span class="token comment">// OK </span>notSure <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                      <span class="token comment">// OK</span><span class="token keyword">let</span> list<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"free"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// OK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h4><p>与<code>Any</code>类型相反，表示没有任何类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 没有返回值 </span><span class="token keyword">function</span> <span class="token function">warnUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This is my warning message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// void类型变量只能赋值undefined和null </span><span class="token keyword">let</span> unusable<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token keyword">let</span> unusable<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h4><p>默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型。当<code>--strictNullChecks</code>标记关闭的情况下，可以将这两个类型赋值给别的类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> test<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> u<span class="token punctuation">;</span> <span class="token comment">// OK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h4><p>表示永不存在的值的类型。</p><p><code>never</code>类型是任何类型的子类型，也可以赋值给任何类型；除了<code>never</code>类型自身，别的类型都不可以赋值给never类型，包括<code>any</code>类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 返回never的函数必须存在无法达到的终点 </span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 返回never的函数必须存在无法达到的终点 </span><span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 推断的返回值类型为never </span><span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Something failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>o<span class="token operator">:</span> object <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> prop<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类型断言</strong></p><p>两种形式。当使用<code>JSX</code>时，只能使用as语法形式</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 形式1： 尖括号语法 </span><span class="token keyword">let</span> someValue<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> strLength<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 形式2：as语法 </span><span class="token keyword">let</span> someValue<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> strLength<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h3><p>接口的作用：定义对象的结构。</p><h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><p>接口里的属性不全都是必须的，可选属性名字定义的后面加一个<code>?</code>符号</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">&#123;</span>      color<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>     width<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">creatSquare</span><span class="token punctuation">(</span>config<span class="token operator">:</span> SquareConfig<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> area<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> newSquare <span class="token operator">=</span> <span class="token punctuation">&#123;</span> color<span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span> area<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newSquare<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span>color<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newSquare<span class="token punctuation">.</span>area <span class="token operator">=</span> config<span class="token punctuation">.</span>width <span class="token operator">*</span> config<span class="token punctuation">.</span>width<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> newSquare<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">creatSquare</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="额外的属性校验"><a href="#额外的属性校验" class="headerlink" title="额外的属性校验"></a>额外的属性校验</h4><p>在上述示例代码中，只给<code>createSquare()</code>传递只包含部分属性的对象是可以的，如果传递了接口定义中不存在的属性，TS检查器会报错。这是因为将对象字面量赋值给变量或作为参数传递的时候会被进行<code>额外的属性检查</code>。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">&#123;</span>      color<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>     width<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">creatSquare</span><span class="token punctuation">(</span>config<span class="token operator">:</span> SquareConfig<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> area<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> newSquare <span class="token operator">=</span> <span class="token punctuation">&#123;</span> color<span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span> area<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newSquare<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span>color<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newSquare<span class="token punctuation">.</span>area <span class="token operator">=</span> config<span class="token punctuation">.</span>width <span class="token operator">*</span> config<span class="token punctuation">.</span>width<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> newSquare<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// error: 'opacity' not expected in type 'SquareConfig'</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">creatSquare</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> color<span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span> opacity<span class="token operator">:</span> <span class="token number">0.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解决方法1：使用类型断言</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">creatSquare</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> color<span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span> opacity<span class="token operator">:</span> <span class="token number">0.5</span> <span class="token punctuation">&#125;</span> <span class="token keyword">as</span> SquareConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解决方法2：使用一个额外变量作为中转</span><span class="token keyword">let</span> squareOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span> color<span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span> opacity<span class="token operator">:</span> <span class="token number">0.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">creatSquare</span><span class="token punctuation">(</span>squareOptions<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h4><p>在属性名前使用<code>readonly</code>来指定只读属性。另有<code>ReadonlyArray&lt;T&gt;</code>类型来指定数组为只读数组。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">readonly</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token keyword">readonly</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">let</span> p1<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> p1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>      <span class="token comment">// Error </span><span class="token comment">// ReadonlyArray&lt;T> 数组创建后，不能再修改 </span><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> ro<span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> a<span class="token punctuation">;</span> ro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">// Error</span>a <span class="token operator">=</span> ro<span class="token punctuation">;</span>  <span class="token comment">// Error，ro和a为同一个引用，不可修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>readonlly VS const</p><p>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。</p></blockquote><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><p>接口不仅可以描述带有属性的普通对象，也可以描述函数类型。使用接口表示函数类型时，需要给接口定义一个<code>调用签名</code>，它就像是一个只有参数列表和返回值类型的函数定义，参数列表里的每个参数都需要名字和类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span> <span class="token comment">// 函数的参数名不需要与接口里定义的名字相同，对应位置的参数类型匹配即可。</span><span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> sub<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h4><p>可索引类型具有一个<code>索引签名</code>，它描述了对象索引的类型，还有相应的索引返回值类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义StringArray类型的接口，该类型的索引是number类型，值是string类型</span><span class="token keyword">interface</span> <span class="token class-name">StringArray</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myArray<span class="token operator">:</span> StringArray<span class="token punctuation">;</span>myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myStr<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 索引签名设置为只读</span><span class="token keyword">interface</span> <span class="token class-name">ReadonlyStringArray</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">readonly</span> <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myAnotherArray<span class="token operator">:</span> ReadonlyStringArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myAnotherArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Snail'</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TypeScript支持两种索引签名：<code>string</code>和<code>number</code>。可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。因为当使用<code>number</code>来索引时，会将其转换成<code>string</code>，因此两者返回值需要保持一致。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    breed<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span><span class="token keyword">interface</span> <span class="token class-name">NotOkay</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> Animal<span class="token punctuation">;</span>    <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> Dog<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">&#123;</span>    currentTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>    <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">&#123;</span>    currentTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>    <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>h<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> m<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h4><p>接口也可以相互继承。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">PenStroke</span> <span class="token punctuation">&#123;</span>    penWidth<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承单个接口</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    sideLength<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承多个接口</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">,</span> PenStroke <span class="token punctuation">&#123;</span>  sideLength<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h4><p>具有多个类型的接口</p><p>示例：可以同时作为函数和对象使用的接口。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    interval<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Counter <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token operator">&lt;</span>Counter<span class="token operator">></span><span class="token keyword">function</span> <span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    counter<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    counter<span class="token punctuation">.</span><span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h4><p>当接口继承了一个<code>类</code>类型时，它会继承类的成员但不包括其实现。接口同样会继承到类的<code>private</code>和<code>protected</code>成员。这意味着这个接口类型只能被这个类或其子类所实现（implement）。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Control</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> state<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">SelectableControl</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token punctuation">&#123;</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token keyword">implements</span> <span class="token class-name">SelectableControl</span> <span class="token punctuation">&#123;</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">TextBox</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token punctuation">&#123;</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 错误：“Image”类型缺少“state”属性，无法实现SelectableControl接口</span><span class="token keyword">class</span> <span class="token class-name">Image</span> <span class="token keyword">implements</span> <span class="token class-name">SelectableControl</span> <span class="token punctuation">&#123;</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h3><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 常规形式</span><span class="token keyword">function</span> <span class="token function">myAdd1</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 函数表达式形式</span><span class="token keyword">let</span> <span class="token function-variable function">myAdd</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token comment">// 函数赋值</span><span class="token function-variable function">myAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数完整类型"><a href="#函数完整类型" class="headerlink" title="函数完整类型"></a>函数完整类型</h4><p>包含两部分：参数类型和返回值类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 声明的同时定义函数</span><span class="token keyword">let</span> <span class="token function-variable function">myAdd</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>参数名后面添加<code>?</code>即表示该参数为可选参数。可选参数必须跟在必须参数后面。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span>        <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>可以给参数提供默认值以供用户没有传递这个参数或者传递了<code>undefined</code>时使用。</p><ul><li>在所有必须参数后面的有默认值的参数都是可选参数。</li><li>带默认值的参数不必一定放在必选参数后面。</li><li>带默认值的参数出现在必须参数前时，当且仅当用户传入<code>undefined</code>时，才会使用默认参数。<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName <span class="token operator">=</span> <span class="token string">"Will"</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">"Adams"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// okay and returns "Will Adams"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><p>可以把函数的所有参数收集到一个变量里，该变量即为剩余参数。剩余参数为可选参数，不限个数。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> employeeName <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Joseph"</span><span class="token punctuation">,</span> <span class="token string">"Samuel"</span><span class="token punctuation">,</span> <span class="token string">"Lucas"</span><span class="token punctuation">,</span> <span class="token string">"MacKinzie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>TS中为同一个函数提供多个函数类型定义来进行函数重载。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> object<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      name<span class="token punctuation">,</span>      age    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h3><p>在定义函数或类时，如果遇到类型不明确就可以使用泛型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 此处定义泛型是为了保证函数入参与返回值是同一数据类型</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用时不指定泛型，TS会自动推断</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用时指定泛型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、联合类型"><a href="#五、联合类型" class="headerlink" title="五、联合类型"></a>五、联合类型</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">B</span><span class="token comment">// 下面三种使用都是可以的</span><span class="token keyword">const</span> c1<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'snail'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> c2<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  age<span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> c3<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'snail'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用联合类型，执行具体操作时，需要收窄类型，不然ts会报错：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Property 'toFixed' does not exist on type 'string | number'.</span>  <span class="token comment">// Property 'toFixed' does not exist on type 'string'</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用js做类型收窄（类型区分）：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用类型谓词<code>is</code>做类型区分：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Rect</span> <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>  height<span class="token operator">:</span> <span class="token builtin">number</span>  width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Circle</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  center<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   radius<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> Rect <span class="token operator">|</span> Circle<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isCircle</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isRect</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Rect <span class="token operator">|</span> Circle<span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> Rect <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">'height'</span> <span class="token keyword">in</span> x <span class="token operator">&amp;&amp;</span> <span class="token string">'width'</span> <span class="token keyword">in</span> x<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isCircle</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Rect <span class="token operator">|</span> Circle<span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> Circle <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">'center'</span> <span class="token keyword">in</span> x <span class="token operator">&amp;&amp;</span> <span class="token string">'radius'</span> <span class="token keyword">in</span> x<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>kind</code>做类型区分：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> kind<span class="token operator">:</span> <span class="token string">"Circle"</span><span class="token punctuation">;</span> radius<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token punctuation">&#123;</span> kind<span class="token operator">:</span> <span class="token string">"Rect"</span><span class="token punctuation">;</span> width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> height<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">"Circle"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>radius <span class="token operator">*</span> s<span class="token punctuation">.</span>radius<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">"Rect"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>width <span class="token operator">*</span> s<span class="token punctuation">.</span>height<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、交叉类型"><a href="#六、交叉类型" class="headerlink" title="六、交叉类型"></a>六、交叉类型</h3><p>将多个类型叠加合并组成新的类型，新类型包含了所有被合并类型的所有属性。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token constant">B</span><span class="token comment">// 报错</span><span class="token comment">// 1. id属性类型为string &amp; number => never, 1不可赋值给never</span><span class="token comment">// 2. 缺少属性age</span><span class="token keyword">const</span> c1<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">'snail'</span><span class="token punctuation">&#125;</span><span class="token comment">// 报错</span><span class="token comment">// 1. id属性类型为string &amp; number => never, 1不可赋值给never</span><span class="token comment">// 2. 缺少属性name</span><span class="token keyword">const</span> c2<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  age<span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">&#125;</span><span class="token comment">// ok</span><span class="token keyword">const</span> c3<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">1</span> <span class="token keyword">as</span> <span class="token builtin">never</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">'snail'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li><code>type</code>和<code>interface</code>的区别</li></ol><ul><li>interface只描述对象，type则描述所有数据</li><li>interface是类型声明，type只是别名</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常用工具方法</title>
      <link href="/2022-01-12-javascript-chang-yong-gong-ju-fang-fa.html"/>
      <url>/2022-01-12-javascript-chang-yong-gong-ju-fang-fa.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-数组查重"><a href="#1-数组查重" class="headerlink" title="1. 数组查重"></a>1. 数组查重</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">checkDuplicates</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      o<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数组去重"><a href="#2-数组去重" class="headerlink" title="2. 数组去重"></a>2. 数组去重</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 利用Object中key的唯一性来筛选掉重复元素</span><span class="token keyword">function</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      o<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 利用Set去重</span><span class="token keyword">function</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数组扁平化"><a href="#3-数组扁平化" class="headerlink" title="3. 数组扁平化"></a>3. 数组扁平化</h3><p>多维数组转换成一维数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 常规实现</span><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// reduce实现</span><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-对象数组排序"><a href="#4-对象数组排序" class="headerlink" title="4. 对象数组排序"></a>4. 对象数组排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 排序函数 * @param &#123;string&#125; key - 要排序的键名 * @param &#123;string&#125; order - asc:升序 desc:降序 * @return &#123;function&#125; */</span><span class="token keyword">function</span> <span class="token function">objectArraySort</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token string">'asc'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">object1<span class="token punctuation">,</span> object2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> a <span class="token operator">=</span> object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token operator">===</span><span class="token string">'asc'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">></span>b <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">&lt;</span>b <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用示例：</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'赵六'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>obj<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">objectArraySort</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-日期格式化"><a href="#5-日期格式化" class="headerlink" title="5. 日期格式化"></a>5. 日期格式化</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * * @fmt : 输出格式 * @date : 日期 * */</span><span class="token keyword">function</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token parameter">fmt<span class="token punctuation">,</span> date</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> ret<span class="token punctuation">;</span><span class="token keyword">const</span> opt <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'Y+'</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 年</span><span class="token string-property property">'m+'</span><span class="token operator">:</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 月</span><span class="token string-property property">'d+'</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 日</span><span class="token string-property property">'H+'</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 时</span><span class="token string-property property">'M+'</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 分</span><span class="token string-property property">'S+'</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 秒</span><span class="token comment">// 有其他格式化字符需求可以继续添加，必须转化成字符串</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> opt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'('</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> opt<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">:</span> opt<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> fmt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token string">'YYYY-mm-dd HH:MM:SS'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "2021-01-12 14:25:43"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://stevenlevithan.com/assets/misc/date.format.js">日期格式化（全能版）源码地址</a> | 使用示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'dS mmm. yyyy HH:MM:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "12th Jan. 2021 14:28:09"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'shortDate'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1/12/21"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd HH:MM:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "2022-01-12 14:32:13"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-回到顶部"><a href="#6-回到顶部" class="headerlink" title="6. 回到顶部"></a>6. 回到顶部</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">backToTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> top <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span><span class="token keyword">const</span> timeTop <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> top <span class="token operator">-=</span> <span class="token number">400</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timeTop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-获取url参数"><a href="#7-获取url参数" class="headerlink" title="7. 获取url参数"></a>7. 获取url参数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//解析参数</span><span class="token function">analysisUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> str <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> item <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">var</span> b <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>obj<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> obj<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-全屏"><a href="#8-全屏" class="headerlink" title="8. 全屏"></a>8. 全屏</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 判断是否为全屏</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span>  <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>    document<span class="token punctuation">.</span>fullscreen <span class="token operator">||</span>     document<span class="token punctuation">.</span>mozFullScreen <span class="token operator">||</span>                             document<span class="token punctuation">.</span>webkitIsFullScreen <span class="token operator">||</span>           document<span class="token punctuation">.</span>webkitFullScreen <span class="token operator">||</span>     document<span class="token punctuation">.</span>msFullScreen   <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 全屏/退出全屏操作</span><span class="token keyword">function</span> <span class="token function">handleFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>  <span class="token comment">// 退出全屏</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>exitFullscreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">exitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>webkitCancelFullScreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">webkitCancelFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>mozCancelFullScreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">mozCancelFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>msExitFullscreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">msExitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>requestFullscreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      element<span class="token punctuation">.</span><span class="token function">requestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>webkitRequestFullScreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      element<span class="token punctuation">.</span><span class="token function">webkitRequestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>mozRequestFullScreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      element<span class="token punctuation">.</span><span class="token function">mozRequestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>msRequestFullscreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      element<span class="token punctuation">.</span><span class="token function">msRequestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常见开发问题记录</title>
      <link href="/2021-12-20-qian-duan-chang-jian-kai-fa-wen-ti-ji-lu.html"/>
      <url>/2021-12-20-qian-duan-chang-jian-kai-fa-wen-ti-ji-lu.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-input输入框保存对象格式的数据"><a href="#1-input输入框保存对象格式的数据" class="headerlink" title="1. input输入框保存对象格式的数据"></a>1. input输入框保存对象格式的数据</h3><p>有时候需要将JavaScript对象（或数组）格式的数据利用表单保存起来，但是输入框会将输入的对象数据当作字符串，这样存到数据库中的数据格式也是字符串。<br>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// input输入框中输入的是 &#123; name: 'snail', age: 20 &#125;</span><span class="token comment">// 表单提交时，该条数据就是 "&#123;name: 'snail', age: 20 &#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>针对这种使用场景，开发时可以从两个方面入手：</p><ol><li>利用input保存数据前，将要保存的数据转为标准的JSON格式，再复制到输入框中，这样在使用保存的该条数据时，可以直接使用<code>JSON.parse()</code>转换为JavaScript对象或数组。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// JSON字符串</span><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token string">'&#123; "name": "snail", "age": 20 &#125;'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以被转成JavaScript对象 </span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'snail'</span><span class="token punctuation">,</span>     <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token comment">// “数组”的JSON数据</span><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token string">"[1234, 4324, 432]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可以被转成JS数组 </span><span class="token punctuation">[</span><span class="token number">1234</span><span class="token punctuation">,</span> <span class="token number">4324</span><span class="token punctuation">,</span> <span class="token number">432</span><span class="token punctuation">]</span><span class="token comment">// “数组”的JSON数据</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token string">'[&#123;"name": "jack", "age": 13 &#125;, &#123; "name": "mike", "age": 15 &#125;]'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  可以被转成数组 </span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">// 多层JSON数据</span><span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token string">'&#123; "name": "snail", "age": 20, "other": &#123; "sex": "male", "address": "上海市黄浦区人民广场" &#125;&#125;'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以被转成对象</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"snail"</span><span class="token punctuation">,</span>    <span class="token literal-property property">other</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>         <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">'上海市黄浦区人民广场'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>一些字符串数据格式不符合标准的JSON格式，直接使用<code>JSON.parse()</code>会报错，这时可以使用<code>eval()</code>来进行格式转换<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o3 <span class="token operator">=</span> <span class="token string">"&#123; name: 'snail', age: 20, other: &#123; sex: 'male', address: '上海市黄浦区人民广场' &#125;&#125;"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>o3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：Uncaught SyntaxError: Unexpected token n in JSON at position 2</span><span class="token comment">// 使用eval()，为了避免eval()解析对象时将其当做语句执行，需要在对象字符串外使用()包裹，转换数组时，无需加()</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'('</span> <span class="token operator">+</span> o3 <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 可以正常转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-苹果IOS中Date的兼容性问题"><a href="#2-苹果IOS中Date的兼容性问题" class="headerlink" title="2. 苹果IOS中Date的兼容性问题"></a>2. 苹果IOS中Date的兼容性问题</h3><p><code>2001-01-01 12:00:00</code>这种格式使用<code>new Date()</code>时，会报错，需要转变为<code>2001/01/01 12:00:00</code>格式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token string">'2001-01-01 12:00:00'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// IOS系统中报错 invalid Date</span>date <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IOS中正常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-生成海报图片发生错位-偏移问题"><a href="#3-生成海报图片发生错位-偏移问题" class="headerlink" title="3. 生成海报图片发生错位/偏移问题"></a>3. 生成海报图片发生错位/偏移问题</h3><p>原来使用的是<code>html-2-canvas</code>库，版本较旧，改用新库<code>html-to-image</code>完美解决问题。<a href="https://www.npmjs.com/package/html-to-image">文档地址</a></p><h3 id="4-Vue项目过渡行为和滚动行为的冲突问题"><a href="#4-Vue项目过渡行为和滚动行为的冲突问题" class="headerlink" title="4. Vue项目过渡行为和滚动行为的冲突问题"></a>4. Vue项目过渡行为和滚动行为的冲突问题</h3><p>项目中使用<code>transition</code>组件来实现组件的过渡行为，同时也使用<code>vue-router</code>中的<code>scrollBehavior</code>定义了滚动行为。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-transform<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createRouter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'hash'</span><span class="token punctuation">,</span>        <span class="token function-variable function">scrollBehavior</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> savedPosition</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>savedPosition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token function">setTimout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>savedPosition<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        routes    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实测下来，在已发生滚动的页面切换至别的页面时，滚动条首先会被置顶，之后出现页面过渡效果，然后进入新页面。返回旧页面时，没有自动回退到之前的滚动位置。<br>禁用过渡组件后，返回页面时是可以自动到达之前的滚动位置的。<br>这应该是过渡组件<code>transition</code>导致组件加载被延迟，滚动行为没有正确作用到组件上，所以没有达到滚动位置被记录的效果。</p><p><strong>解决方案：</strong></p><ol><li><p><span style="color:green;">【已测试】</span><code>scrollBehavior</code>中使用延迟滚动，同时设置一下<code>scroll-behavior</code>样式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createRouter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'hash'</span><span class="token punctuation">,</span>        <span class="token function-variable function">scrollBehavior</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> savedPosition</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 这里的延迟时间根据过渡时间来决定，>过渡时间即可</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>savedPosition <span class="token operator">?</span> savedPosition <span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        routes    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>平滑滚动，目前除了<code>IE</code>浏览器，主流浏览器都已经支持。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span> <span class="token punctuation">&#123;</span>    <span class="token property">scroll-behavior</span><span class="token punctuation">:</span> smooth<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><span style="color:grey;">【待测试】</span>使用<code>vue-router-view-transition</code>组件替换<code>transition</code>组件替换</p></li><li><p><span style="color:red;">【已测试，无效】</span><code>history</code>路由模式下，设置<code>history.scrollRestoration = &#39;manual&#39;</code></p></li><li><p><span style="color:grey;">【待测试】</span>自定义过渡动画，弃用<code>transition</code>组件</p></li></ol><h3 id="5-Canvas设置window-innerHeight时出现滚动条的问题"><a href="#5-Canvas设置window-innerHeight时出现滚动条的问题" class="headerlink" title="5. Canvas设置window.innerHeight时出现滚动条的问题"></a>5. Canvas设置<code>window.innerHeight</code>时出现滚动条的问题</h3><p>项目中利用<code>Three.js</code>做<a href="https://snaillu.gitee.io/portfolio/demo/three-js">全屏3D模型</a>，分别给canvas设置<code>window.innerWidth</code>和<code>window.innerHeight</code>作为宽高，发现始终在竖直方向上会出现<br>滚动条，这就导致水平方向上也会出现滚动条（因为innerWidth是包含滚动条的宽度）。<br><strong>解决办法：</strong></p><ol><li>确保<code>body</code>元素的<code>margin</code>被清零</li><li>给<code>canvas</code>元素设置<code>display: block;</code>，或给<code>canvas</code>的父元素设置<code>font-size:0;</code>以确保元素之间的间隙被清零</li><li>电脑屏幕设置了缩放的情况下（我的缩放是125%），<code>window.innerHeight</code>高度是窗口理论缩放高度<code>原始innerHeight/devicePixelRatio</code>四舍五入<br>后的结果，所以<code>window.innerHeight</code>有可能大于理论缩放高度，这就导致设置了滚动条的出现。<br>我这里进行了一定抹零处理。如果想省事也可以直接<code>window.innerHeight - 0.5</code>。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> innerWidth<span class="token punctuation">,</span> innerHeight<span class="token punctuation">,</span> devicePixelRatio <span class="token punctuation">&#125;</span> <span class="token operator">=</span> window<span class="token punctuation">;</span><span class="token comment">// 现在电脑的高分辨率屏幕一般都会设置缩放（我的屏幕设置了125%）</span><span class="token comment">// 此时window.innerHeight = Math.round(理论上屏幕缩放后分辨率)</span><span class="token comment">// 这时候如果给元素设置的高度 = window.innerHeight，可能就会出现滚动条</span><span class="token comment">// 这里利用devicePixelRatio计算一下window.innerHeight缩放前的高度（这是一个近似之后的值）</span><span class="token comment">// 对缩放前的高度抹零后再计算缩放值，这样就能保证永远不会出现滚动条</span><span class="token keyword">const</span> canvasHeight <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>innerHeight <span class="token operator">*</span> devicePixelRatio<span class="token punctuation">)</span> <span class="token operator">/</span> devicePixelRatio<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>renderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>innerWidth<span class="token punctuation">,</span> canvasHeight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置渲染区域尺寸</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解ES6读书笔记</title>
      <link href="/2021-12-19-shen-ru-li-jie-es6-du-shu-bi-ji.html"/>
      <url>/2021-12-19-shen-ru-li-jie-es6-du-shu-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-块级绑定"><a href="#第一章-块级绑定" class="headerlink" title="第一章 块级绑定"></a>第一章 块级绑定</h3><blockquote><p>变量提升<br>使用<code>var</code>声明的变量，无论其实际声明位置在何处，都会被视为声明于所在函数的顶部（如果不在函数内，则视为在全局作用域的顶部）</p></blockquote><h4 id="块级声明"><a href="#块级声明" class="headerlink" title="块级声明"></a>块级声明</h4><p><code>块级声明</code>就是让所声明的变量在指定块的作用域外无法被访问。<br><code>块级作用域</code>（又称<code>词法作用域</code>）在如下情况被创建：</p><ol><li>一个函数内部</li><li>代码块（花括号{}包裹）内部</li></ol><h4 id="let、const"><a href="#let、const" class="headerlink" title="let、const"></a>let、const</h4><p>特性：</p><ol><li>属于块级声明，声明的变量只能在块级作用域内被访问；</li><li>不会变量提升，存在TDZ（暂时性死区），为了在整个代码块内可用，需要手动将声明置顶；</li><li>禁止重复声明同名变量；</li><li>const声明的变量只可在声明时被赋值，对该变量成员（属性）的修改不受限制。</li><li>在全局作用域中使用let、const声明变量，变量不会被绑定到<code>window</code>对象上。</li></ol><p>循环中使用let、const时，在每次迭代中，都会创建一个新的同名变量并对其进行初始化。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// 使用let声明i</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>funcs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fun</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从0到9依次输出</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 使用const声明i，在执行i++时会抛出错误</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 可以在`for-in`或`for-of`中使用，效果与let一致，因为这两种循环，没有试图改变i的值。</span><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 以下两种写法效果相同</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二章-字符串与正则表达式"><a href="#第二章-字符串与正则表达式" class="headerlink" title="第二章 字符串与正则表达式"></a>第二章 字符串与正则表达式</h3><p>这一章节涉及到字符集内容，可先阅读阮一峰老师的文章<a href="http://www.ruanyifeng.com/blog/2014/12/unicode.html">Unicode与JavaScript详解</a>补充下相关知识。</p><h4 id="新增字符串方法"><a href="#新增字符串方法" class="headerlink" title="新增字符串方法"></a>新增字符串方法</h4><ul><li>String.fromCodePoint(): 从Unicode码点返回对应字符</li><li>String.prototype.codePointAt(): 从位置返回对应的码点</li><li>String.prototype.normalize(): 按照指定形式将字符串标准化，便于字符串比较</li><li>String.prototype.includes(): 当前字符串中是否包含另一个给定字符串</li><li>String.prototype.startsWith(): 当前字符串是否以另外一个给定的子字符串开头</li><li>String.prototype.endsWith(): 当前字符串是否以另外一个给定的子字符串结尾</li><li>String.prototype.repeat(): 返回重复构造后的新字符串</li></ul><h4 id="正则表达式改动"><a href="#正则表达式改动" class="headerlink" title="正则表达式改动"></a>正则表达式改动</h4><ul><li>新增了u修饰符，对正则表达式添加4字节码点的支持</li><li>新增了y修饰符，影响正则表达式搜索时的粘连（sticky）属性，表示从正则表达式的<code>lastIndex</code>属性值的位置开始检索字符串中的匹配字符</li><li>新增了<code>flags</code>属性，返回正则表达式中所有标志组成的字符串形式</li></ul><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 单行字符串</span><span class="token keyword">let</span> message1 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello World!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Hello World!"</span><span class="token comment">// 多行字符串</span><span class="token keyword">let</span> message2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello World!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "Hello"</span><span class="token comment">// "World!"</span><span class="token comment">// 制造替换位</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Hello Mike"</span><span class="token comment">// 替换位中进行计算、函数调用等</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>    b <span class="token operator">=</span> <span class="token number">0.035</span><span class="token punctuation">,</span>    result <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> multiplied by </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三章-函数"><a href="#第三章-函数" class="headerlink" title="第三章 函数"></a>第三章 函数</h3><h4 id="ES6中的函数参数默认值"><a href="#ES6中的函数参数默认值" class="headerlink" title="ES6中的函数参数默认值"></a>ES6中的函数参数默认值</h4><p>ES6中的函数参数默认值，只有在未传递或者指定为<code>undefined</code>时才会被使用，即使是传入<code>null</code>也会被认为是有效的从而不使用默认值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 函数的其余部分</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用默认的 timeout 与 callback</span><span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token string">'/api/getGoodsList'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用默认的 callback</span><span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token string">'/api/getGoodsList'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用默认的 callback</span><span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token string">'/api/getGoodsList'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不使用默认值</span><span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token string">'/api/getGoodsList'</span><span class="token punctuation">,</span> <span class="token number">500</span>， <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数默认值与arguments对象"><a href="#参数默认值与arguments对象" class="headerlink" title="参数默认值与arguments对象"></a>参数默认值与arguments对象</h4><p>ES5非严格模式下，<code>arguments</code>对象总是会被更新以反映出具名参数的变化。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mixArgs</span><span class="token punctuation">(</span><span class="token parameter">first<span class="token punctuation">,</span> second</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first <span class="token operator">===</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second <span class="token operator">===</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     first <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">;</span>    second <span class="token operator">=</span> <span class="token string">"d"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first <span class="token operator">===</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second <span class="token operator">===</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">mixArgs</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果为： </span><span class="token boolean">true</span> <span class="token boolean">true</span> <span class="token boolean">true</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES5严格模式下，arguments对象不再反映出具名参数的变化。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 输出结果为： </span><span class="token boolean">true</span> <span class="token boolean">true</span>  <span class="token boolean">false</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ES6中（无论是否是严格模式），<code>arguments</code>对象的表现与ES5的严格模式下一致，即<code>arguments</code>的值始终与实参保持一致，函数体内对函数形参的修改，不会影响到<code>arguments</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mixArgs</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first <span class="token operator">===</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second <span class="token operator">===</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arguments[1] === undefined</span>    first <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">;</span>    second <span class="token operator">=</span> <span class="token string">"d"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first <span class="token operator">===</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second <span class="token operator">===</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">mixArgs</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果为：</span><span class="token number">1</span> <span class="token boolean">true</span> <span class="token boolean">false</span> <span class="token boolean">false</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数默认值表达式"><a href="#参数默认值表达式" class="headerlink" title="参数默认值表达式"></a>参数默认值表达式</h4><p>参数默认值并不要求一定是基本类型的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">first<span class="token punctuation">,</span> second <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以将前面的参数作为后面参数的默认值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//OK</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">first<span class="token punctuation">,</span> second <span class="token operator">=</span> first</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不可以使用后面的参数作为前面参数的默认值，因为后面的参数还未定义，不可直接使用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">first <span class="token operator">=</span> second<span class="token punctuation">,</span> second</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: Cannot access 'second' before initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数默认值的暂时性死区"><a href="#参数默认值的暂时性死区" class="headerlink" title="参数默认值的暂时性死区"></a>参数默认值的暂时性死区</h4><p>函数参数与<code>let</code>声明的变量相似，在声明之前存在暂时性死区，在其初始化之前不允许被访问。  </p><blockquote><p>函数参数拥有各自的作用域和暂时性死区，与函数体的作用域相分离。这意味着参数的默认值不允许访问在函数体内部声明的任意变量。</p></blockquote><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><p>剩余参数由三个点（<code>...</code>）与一个紧跟着的具名参数决定，它是包含传递给函数的其余参数的一个数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// keys是一个在object之后的所有参数组成的数组。</span><span class="token keyword">function</span> <span class="token function">pick</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> <span class="token operator">...</span>keys</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        result<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩余参数的两点限制条件：  </p><ol><li>一个函数只能有一个剩余参数，并且必须放在最后。  </li><li>剩余参数不能在对象字面量的<code>setter</code>属性中使用。（原因是对象字面量的setter被限定只能使用单个参数）<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// SyntaxError: Rest parameter must be last formal parameter</span><span class="token keyword">function</span> <span class="token function">pick</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> <span class="token operator">...</span>keys<span class="token punctuation">,</span> last</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        result<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// SyntaxError: Setter function argument must not be a rest parameter</span><span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 一些操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>剩余参数允许我们把多个独立的参数合并到一个数组中，而扩展运算符则允许将一个数组分割，并将各个项作为分离的参数传给函数。在大部分场景中，扩展运算符都是<code>apply()</code>方法的合适替代品。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ES6之前</span><span class="token comment">// Math.max()只允许分开传入每个需要比较的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span><span class="token comment">// 给数组中各个值比较时需要借助apply</span><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 100</span><span class="token comment">// ES6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="名称属性"><a href="#名称属性" class="headerlink" title="名称属性"></a>名称属性</h4><p>ES6给所有的函数添加了name属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数自身具有函数名</span><span class="token keyword">function</span> <span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数内容</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>function1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "function1"</span><span class="token comment">// 函数表达式</span><span class="token keyword">var</span> <span class="token function-variable function">function2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数内容</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>function2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "function2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自身函数名的优先级高于赋值目标</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">function3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">function4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数内容</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>function3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "function4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对象的<code>getter</code>及方法的名称</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">get</span> <span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Nicholas"</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thsi<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>sayName<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "sayName"</span><span class="token keyword">let</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'firstName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>get<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "get firstName"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>bind()</code>创建的函数及<code>Function</code>构造器构造的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数内容</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doSomething</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "bound doSomethind"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "anonymous"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数的双重用途"><a href="#函数的双重用途" class="headerlink" title="函数的双重用途"></a>函数的双重用途</h4><p>JS为函数提供了两个不同的内部方法：<code>[[Call]]</code>和<code>[[Construct]]</code>。</p><ul><li>当函数未使用new进行调用时，<code>[[Call]]</code>方法会被调用，运行代码中显示的函数体。</li><li>当函数使用new进行调用时，<code>[[Construct]]</code>方法会被执行，负责创建一个被称为新目标的新的对象，并且使用该新目标作为this去执行函数体，最后将该对象作为函数的返回值。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> notAPerson <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[Object,Object]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notAPerson<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h4><p>ES6引入了<code>new.target</code>元属性。<code>元属性</code>指的是“非对象”上的一个属性，并提供关联到它的目标的附加信息。当函数的<code>[[Construct]</code>方法被调用时，<code>new.target</code>会被填入<code>new</code>运算符的作用目标（构造器）。而<code>[[Call]]</code>被执行，<code>new.target</code>的值则会是<code>undefined</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> Person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"You must use new with Person."</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span><span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error "You must use new width Person."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="块级函数"><a href="#块级函数" class="headerlink" title="块级函数"></a>块级函数</h4><p>块级函数是指在代码块中声明函数。<br>严格模式下，ES5中会抛出语法错误。ES6会将该函数视为块级声明，并将其声明提升至代码块顶部，允许它在块内部被访问，块外部无法访问到。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 函数体</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 代码块外部无法访问到该函数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非严格模式下，ES6会将该函数声明提升至所在函数或全局环境的顶部，而不是代码块的顶部。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "function"</span>    <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 函数体</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "function"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>与传统JS函数的差异：</p><ul><li>没有<code>this</code>、<code>super</code>、<code>arguments</code>及<code>new.target</code>绑定，<code>this</code>、<code>super</code>、<code>arguments</code>及<code>new.target</code>的值由所在的、最靠近的非箭头函数来决定；</li><li>不能被使用<code>new</code>调用；</li><li>没有原型；</li><li>不能更改<code>this</code>；</li><li>不允许重复的具名参数，传统的函数中参数可以重名。</li></ul><p>语法形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 无参数</span><span class="token keyword">var</span> <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'Jack'</span><span class="token punctuation">;</span><span class="token comment">// 单个参数</span><span class="token keyword">var</span> <span class="token function-variable function">reflect</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> value<span class="token punctuation">;</span><span class="token comment">// 多个参数</span><span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value1<span class="token punctuation">,</span> value2</span><span class="token punctuation">)</span> <span class="token operator">=></span> value2 <span class="token operator">+</span> value2<span class="token punctuation">;</span><span class="token comment">// 返回一个对象字面量</span><span class="token keyword">var</span> <span class="token function-variable function">getPersonInfo</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传统的函数体</span><span class="token keyword">var</span> sum <span class="token operator">=</span> （value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value1 <span class="token operator">+</span> value2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="立即调用函数表达式（IIFE）"><a href="#立即调用函数表达式（IIFE）" class="headerlink" title="立即调用函数表达式（IIFE）"></a>立即调用函数表达式（IIFE）</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 传统写法</span><span class="token keyword">let</span> <span class="token function-variable function">person</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Jack"</span><span class="token comment">// 箭头函数写法</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Jack"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h4><p><strong>尾调用</strong>：函数的最后一步（不一定非在函数尾部）是调用另一个函数。<br>ES5引擎中实现的尾调用，其处理就像其他函数一样：一个新的帧栈被创建并推到调用栈之上，用于表示该次函数调用，这意味着之前每次帧栈都保留在内存中，当调用栈太大时会出现超出报错，进行尾调用优化可以大大节省内存。<br>ES6严格模式下，同时满足以下条件时，ES6引擎会自动进行尾调用优化（清除当前帧栈并在此利用它，而不是为尾调用创建新的帧栈）：</p><ul><li>尾调用不能引用当前帧栈中的变量（意味着该函数不能是闭包）；</li><li>进行尾调用的函数在尾调用返回结果后不能做额外操作；</li><li>尾调用的结果作为当前函数的返回值  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 尾调用</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 尾调用</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">m</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">n</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 不是尾调用，无法被优化</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h4><p>函数调用自身，称为<code>递归</code>。如果尾调用自身，就称为<code>尾递归</code>。<br>尾调用优化的主要用例是在递归函数中，在其中的优化具有最大效果。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 不是尾调用，无法被优化，复杂度O(n)</span><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 改写为尾递归，复杂度O(1)</span><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四章-扩展的对象功能"><a href="#第四章-扩展的对象功能" class="headerlink" title="第四章 扩展的对象功能"></a>第四章 扩展的对象功能</h3><h4 id="对象类别"><a href="#对象类别" class="headerlink" title="对象类别"></a>对象类别</h4><p>ES6规范明确的对象类别包括：  </p><ul><li>普通对象：拥有JS对象所有默认的内部行为。</li><li>奇异对象：其内部行为在某些方便有别于默认行为。</li><li>标准对象：在ES6中被定义的对象。标准对象可以是普通的，也可以是奇异的。</li><li>内置对象：在脚本开始运行时由JS运行环境提供的对象。所有的标准对象都是内置对象。</li></ul><h4 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h4><p>属性名与赋值变量名同名时，可以简写。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        name<span class="token punctuation">,</span>        age    <span class="token punctuation">&#125;</span>    <span class="token comment">// 等价于</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> age    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法简写"><a href="#方法简写" class="headerlink" title="方法简写"></a>方法简写</h4><p>可以省略冒号与<code>function</code>关键字。简写的方法中可以使用<a href="#super"><code>super</code></a>，非简写的方法不能使用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 等价于</span>    <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算属性名"><a href="#计算属性名" class="headerlink" title="计算属性名"></a>计算属性名</h4><p>ES5及之前，对象实例上才能使用<code>计算属性名</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     firstName <span class="token operator">=</span> <span class="token string">"first name"</span><span class="token punctuation">;</span>person<span class="token punctuation">[</span>firstName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>firstName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES6中，对象字面量上可以直接使用计算属性名。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">"first name"</span><span class="token punctuation">;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>firstName<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Object-is-方法"><a href="#Object-is-方法" class="headerlink" title="Object.is()方法"></a><code>Object.is()</code>方法</h4><p>严格相等运算符<code>===</code>存在两个怪异点：</p><ul><li><code>+0 === -0</code>会返回<code>true</code></li><li><code>NaN === NaN</code>会返回<code>false</code>  </li></ul><p><code>Object.is()</code>弥补了上述两个问题，其他比较结果与<code>===</code>一致。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">===</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Object-assign-方法"><a href="#Object-assign-方法" class="headerlink" title="Object.assign()方法"></a><code>Object.assign()</code>方法</h4><p>用于将所有可枚举属性的值从一个或多个源对象分配到目标对象，并返回目标对象。  </p><p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。<br>值得注意的是，使用<code>Object.assign()</code>会将源对象上的访问器属性（如果有的话）转变为目标对象上的数据属性，所以有访问器属性的源对象使用<code>Object.assign()</code>时要谨慎。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> returnedTarget <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object &#123; a: 1, b: 4, c: 5 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnedTarget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object &#123; a: 1, b: 4, c: 5 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自有属性的枚举顺序"><a href="#自有属性的枚举顺序" class="headerlink" title="自有属性的枚举顺序"></a>自有属性的枚举顺序</h4><p>ES6严格定义了对象自有属性在被枚举时返回的顺序。自有枚举属性枚举时基本顺序如下：</p><ol><li>所有的数字类型键，按升序排列。</li><li>所有的字符串类型键，按被添加到对象的顺序排列。</li><li>所有的符号类型键，也按添加顺序排列。</li></ol><p>这个规则对<code>Object.getOwnPorpertyNames()</code>、<code>Reflct.ownKeys</code>及<code>Object.assign()</code>方法有影响，<code>for-in</code>、<code>Object.keys()</code>循环的枚举顺序<br>仍未被明确规定，可能因JS引擎而异。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "012acbd"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Object-setPrototypeOf-修改对象的原型"><a href="#Object-setPrototypeOf-修改对象的原型" class="headerlink" title="Object.setPrototypeOf()修改对象的原型"></a><code>Object.setPrototypeOf()</code>修改对象的原型</h4><p>此方法允许你修改任意指定对象的原型，接受两个参数：需要被修改原型的对象，以及将会成为前者原型的对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Woof"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> friend <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span><span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Hello"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>friend<span class="token punctuation">)</span> <span class="token operator">===</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// 重设原型</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>friend<span class="token punctuation">,</span> dog<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span><span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Woof"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>friend<span class="token punctuation">)</span> <span class="token operator">===</span> dog<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用super访问原型"><a href="#使用super访问原型" class="headerlink" title="使用super访问原型"></a><span id="super">使用<code>super</code>访问原型</span></h4><p><code>super</code>是指向当前对象的原型的一个指针，实际上就是<code>Object.getPrototypeOf(this)</code>的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> friend <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 重写getGreeting方法，其中调用了原型上的同名方法</span>  <span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Nice to meet you!"</span><span class="token punctuation">;</span>     <span class="token comment">// 等价于</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Nice to meet you!"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">// 非简写语法会报错</span>  <span class="token function-variable function">getGreeting</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Nice to meet you!"</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: 'super' keyword unexpected here</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正式的“方法”定义"><a href="#正式的“方法”定义" class="headerlink" title="正式的“方法”定义"></a>正式的“方法”定义</h4><p><strong>方法</strong>是一个拥有<code>[[HomeObject]]</code>内部属性的函数，此内部属性指向该方法所属的对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> preson <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">// 方法</span>  <span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 不是方法</span><span class="token keyword">function</span> <span class="token function">shareGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"Hi"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第五章-解构"><a href="#第五章-解构" class="headerlink" title="第五章 解构"></a>第五章 解构</h3><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><p>对象解构语法在赋值语句的左侧使用了对象字面量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 变量声明时使用解构赋值</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> name <span class="token punctuation">&#125;</span> <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">// 变量声明之后使用解构赋值，要使用()包裹，否则&#123;&#125;会被认为是代码块而报错</span><span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token string">"Literal"</span><span class="token punctuation">;</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> name <span class="token punctuation">&#125;</span> <span class="token operator">=</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Identifier"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "foo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h5><p>给变量进行解构赋值时，如果在对象中没有找到同名属性，该变量会被赋值为<code>undefined</code>。可以给变量定义一个默认值，以便在属性不存在或属性值为<code>undefined</code>时使用该值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 变量声明时使用解构赋值</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Identifier"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "foo"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="变量名与属性名不一致"><a href="#变量名与属性名不一致" class="headerlink" title="变量名与属性名不一致"></a>变量名与属性名不一致</h5><p>使用<code>[propertyName]:[variableName]</code>的语法形式进行解构。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 将node上的type、name、value分别解构赋值给localType、localName、localValue</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> localType<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> localName<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> localValue <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Identifier"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "foo"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="嵌套的对象解构"><a href="#嵌套的对象解构" class="headerlink" title="嵌套的对象解构"></a>嵌套的对象解构</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span>  <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">line</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> start <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token punctuation">.</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token punctuation">.</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><p>语法与对象结构相似，解构作用在数组内部的位置上。（对象解构作用在对象的具名属性上）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token keyword">let</span> <span class="token punctuation">[</span> firstColor<span class="token punctuation">,</span> secondColor <span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> thirdColor <span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'red'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'green'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thirdColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'blue'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组解构巧用：交换变量的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>     b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>     c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h5><p>变量对应位置的值不存在或者等于<code>undefined</code>时，变量会使用默认值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span> firstColor<span class="token punctuation">,</span> secondColor <span class="token operator">=</span> <span class="token string">"green"</span> <span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "green"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="嵌套的数组解构"><a href="#嵌套的数组解构" class="headerlink" title="嵌套的数组解构"></a>嵌套的数组解构</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span> firstColor<span class="token punctuation">,</span> <span class="token punctuation">[</span> secondColor <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'green'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="剩余项"><a href="#剩余项" class="headerlink" title="剩余项"></a>剩余项</h5><p>使用<code>...</code>语法将数组剩余的项目赋值给一个指定的变量。剩余项必须是数组解构模式中最后的部分。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token keyword">let</span> <span class="token punctuation">[</span> firstColor<span class="token punctuation">,</span> <span class="token operator">...</span>restColors <span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'red'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>restColors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['green', 'blue']</span><span class="token comment">// 利用剩余项克隆数组</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token operator">...</span>cloneColors<span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneColors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['red', 'green', 'blue']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="混合解构"><a href="#混合解构" class="headerlink" title="混合解构"></a>混合解构</h4><p>对象与数组解构混合使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span>  <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">line</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> start <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token punctuation">.</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token punctuation">.</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数解构"><a href="#参数解构" class="headerlink" title="参数解构"></a>参数解构</h4><p>对于非必需且无顺序要求的参数，可使用对象或数组的解构来替代具名参数，这样可以很方便的通过查看函数定义就能判断出函数所期望的输入。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 传统写法</span><span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> secure <span class="token operator">=</span> options<span class="token punctuation">.</span>secure<span class="token punctuation">,</span>      path <span class="token operator">=</span> options<span class="token punctuation">.</span>path<span class="token punctuation">,</span>      domain <span class="token operator">=</span> options<span class="token punctuation">.</span>domain<span class="token punctuation">,</span>      expires <span class="token operator">=</span> options<span class="token punctuation">.</span>expires<span class="token punctuation">;</span>    <span class="token comment">// 设置cookie的代码</span><span class="token punctuation">&#125;</span><span class="token comment">// ES6 解构改写</span><span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> secure<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> expires <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置cookie的代码</span><span class="token punctuation">&#125;</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">expires</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参数解构的默认值"><a href="#参数解构的默认值" class="headerlink" title="参数解构的默认值"></a>参数解构的默认值</h5><p>上述示例中， 若不传递第三个参数，函数调用会因为解构出错而报错，若要解构的参数是非必选参数，可以通过给解构的参数提供默认值来解决这个问题。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 解构参数设置默认值</span><span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> secure<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> expires <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置cookie的代码</span><span class="token punctuation">&#125;</span><span class="token comment">// 也可以给每个参数指定默认值</span><span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   secure <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   path <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">,</span>   domain <span class="token operator">=</span> <span class="token string">"example.com"</span><span class="token punctuation">,</span>   expires <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">360000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置cookie的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第六章-符号与符号属性"><a href="#第六章-符号与符号属性" class="headerlink" title="第六章 符号与符号属性"></a>第六章 符号与符号属性</h3><p>JS已有的基本类型： <code>string</code>、<code>number</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code></p><p>ES6中新增的基本类型：<code>Symbol</code>（符号） </p><h4 id="创建符号值"><a href="#创建符号值" class="headerlink" title="创建符号值"></a>创建符号值</h4><p>符号没有字面量形式，可以使用全局<code>Symbol</code>函数来创建一个符号值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 因为是基本类型，不能使用new关键字，会报错function is not a constructor </span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> person<span class="token punctuation">[</span>firstName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>firstName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Nicholas"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Symbol</code>接受一个额外的参数用于描述符号值，描述信息存储在内部属性<code>[[Description]]</code>中，当符号的<code>toString()</code>方法被显式或隐式调用时，该属性会被读取。该描述不能用来访问对应属性，但能用于调试。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"first name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 因为是基本类型，不能使用new关键字，会报错function is not a constructor </span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> person<span class="token punctuation">[</span>firstName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>firstName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Nicholas </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Symbol(first name)"</span><span class="token comment">// 识别符号值，优先使用typeof运算符 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "symbol"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用符号值"><a href="#使用符号值" class="headerlink" title="使用符号值"></a>使用符号值</h4><p>可以在需计算属性名的场合，也可以在<code>Object.defineProperty()</code>或<code>Object.defineProperties()</code>中使用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"first name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用一个需计算字面量属性 </span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span>firstName<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 让该属性变为只读 </span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> firstName<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"last name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">[</span>lastName<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Zakas"</span><span class="token punctuation">,</span>            <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>firstName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Nicholas" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>lastName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "Zakas"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="共享符号值"><a href="#共享符号值" class="headerlink" title="共享符号值"></a>共享符号值</h4><p>ES6提供了<code>全局符号注册表</code>，可以跨越文件或代码来追踪符号值。</p><p><code>全局符号注册表</code>类似于全局作用域，是一个共享环境，这意味着你不应当假设某些值是否已存在于其中。</p><p>使用<code>Symbol.for()</code>方法来创建共享符号值，该方法仅接受单个字符串类型的参数，作为目标符号值的标识符，同时该参数也会成为该符号的描述信息。</p><p>使用<code>Symbol.for()</code>会先检索全局符号注册表中是否存在该符号值，若存在则返回该值，若不存在则会新创建一个符号值到全局注册表中，然后再返回该值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> uid <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> object<span class="token punctuation">[</span>uid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>uid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "12345"  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Symbol(uid)"</span><span class="token keyword">let</span> uid2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uid <span class="token operator">===</span> uid2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>uid2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "12345"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uid2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Symbol(uid)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用 <code>Symbol.keyFor()</code> 方法在全局符号注册表中根据符号值检索出对应的键值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> uid <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "uid" </span><span class="token keyword">let</span> uid2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>uid2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "uid" </span><span class="token keyword">let</span> uid3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>uid3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="符号值的转换"><a href="#符号值的转换" class="headerlink" title="符号值的转换"></a>符号值的转换</h4><p>符号值无法被转换为字符串值或数值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> uid <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里是隐式调用了符号的String()方法 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Symbol(uid)"  </span><span class="token comment">// 利用+转换为字符串，会引发错误 </span><span class="token keyword">let</span> desc <span class="token operator">=</span> uid <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// 引发错误! </span><span class="token comment">//使用数学运算符，也会引发错误 </span><span class="token keyword">let</span> sum <span class="token operator">=</span> uid <span class="token operator">/</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 引发错误! </span><span class="token comment">// 使用逻辑运算符是可以的，符号值在逻辑运算中等价于true </span><span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true </span>flag <span class="token operator">=</span> <span class="token operator">!</span>uid <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检索符号属性"><a href="#检索符号属性" class="headerlink" title="检索符号属性"></a>检索符号属性</h4><p><code>Object.getOwnPropertySymbols()</code>用于检索对象的符号类型属性，返回对象中符号值类型的自有属性名组成的数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> uid <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span>uid<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"12345"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> symbols <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbols<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbols<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// "Symbol(uid)" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>symbols<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "12345"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用知名符号暴露内部方法"><a href="#使用知名符号暴露内部方法" class="headerlink" title="使用知名符号暴露内部方法"></a>使用知名符号暴露内部方法</h4><p>ES6定义了“知名符号”来代表 JS 中一些公共行为，而这些行为此前被认为只能是内部操作。每一个知名符号都对应全局 Symbol 对象的一个属性，这些知名符号是：</p><ul><li><code>Symbol.hasInstance</code>：供instanceof 运算符使用的一个方法，用于判断对象继承关 系。</li><li><code>Symbol.isConcatSpreadable</code>：一个布尔类型值，在集合对象作为参数传递给Array.prototype.concat() 方法时，指示是否要将该集合的元素扁平化。</li><li><code>Symbol.iterator</code>：返回迭代器(参阅第七章)的一个方法。</li><li><code>Symbol.match</code>：供 String.prototype.match() 函数使用的一个方法，用于比较字符串。</li><li><code>Symbol.replace</code>：供 String.prototype.replace() 函数使用的一个方法，用于替换子字符串。</li><li><code>Symbol.search</code>：供 String.prototype.search() 函数使用的一个方法，用于定位子字符串。</li><li><code>Symbol.species</code>：用于产生派生对象(参阅第八章)的构造器。</li><li><code>Symbol.split</code>：供String.prototype.split() 函数使用的一个方法，用于分割字符串。</li><li><code>Symbol.toPrimitive</code>：返回对象所对应的基本类型值的一个方法。</li><li><code>Symbol.toStringTag</code>：供 String.prototype.toString() 函数使用的一个方法，用于创建对象的描述信息。</li><li><code>Symbol.unscopables</code>：一个对象，该对象的属性指示了哪些属性名不允许被包含在 with 语句中。</li></ul><h3 id="第七章-Set和Map"><a href="#第七章-Set和Map" class="headerlink" title="第七章 Set和Map"></a>第七章 Set和Map</h3><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p><code>Set</code>是不包含重复值的有序列表，常用来检查某个值是否存在。  </p><h5 id="Set的方法"><a href="#Set的方法" class="headerlink" title="Set的方法"></a>Set的方法</h5><ul><li><code>add()</code>: 添加值</li><li><code>has()</code>: 测试值是否存在</li><li><code>delete()</code>: 删除单个值</li><li><code>clear()</code>: 清除所有值</li></ul><p>示例代码：  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//2 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1</span>set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Set上的forEach方法"><a href="#Set上的forEach方法" class="headerlink" title="Set上的forEach方法"></a>Set上的forEach方法</h5><p>与数组上的<code>forEach</code>方法类似，接收一个回调函数，回调函数接收三个参数：</p><ol><li>Set中下个位置的值</li><li>Set中下个位置的值</li><li>目标Set自身</li></ol><p>示例代码： </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ownerSet</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">", "</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ownerSet <span class="token operator">===</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token boolean">true</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token boolean">true</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="利用Set为数组去重"><a href="#利用Set为数组去重" class="headerlink" title="利用Set为数组去重"></a>利用Set为数组去重</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">eliminateDuplicates</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> noDuplicates <span class="token operator">=</span> <span class="token function">eliminateDuplicates</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>noDuplicates<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1,2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Weak-Set"><a href="#Weak-Set" class="headerlink" title="Weak Set"></a>Weak Set</h4><p><code>Weak Set</code>类型只允许存储对象弱引用，不能存储基本类型的值。对象的弱引用在它成为该对象的唯一引用时，不会阻止垃圾回收。</p><h5 id="Weak-Set的方法"><a href="#Weak-Set的方法" class="headerlink" title="Weak Set的方法"></a>Weak Set的方法</h5><ul><li>add()</li><li>has()</li><li>delete()  </li></ul><p>示例代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token comment">// 移除对象的强引用，set中的引用依然还在</span>key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span><span class="token keyword">let</span> weakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>weakSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token comment">// 移除对于该对象的最后一个强引用，Weak Set中的引用会自动解除</span>key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="与Set的关键差异"><a href="#与Set的关键差异" class="headerlink" title="与Set的关键差异"></a>与Set的关键差异</h5><ul><li>不可添加非对象，会抛出错误</li><li>不可迭代，不可使用<code>for-of</code>、<code>keys()</code>、<code>values()</code>及<code>forEach()</code>方法</li><li>没有<code>size</code>属性和<code>clear()</code>方法</li></ul><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><code>Map</code>类型是键值对的<code>有序列表</code>，常用作缓存，存储数据以便以后快速检索。<code>Map</code>的<code>键</code>和<code>值</code>都可以是<code>任意类型</code>。</p><h5 id="Map的方法"><a href="#Map的方法" class="headerlink" title="Map的方法"></a>Map的方法</h5><ul><li><code>set(key,value)</code>: 给<code>Map</code>添加项 </li><li><code>get(key)</code>: 提取键值对应的值</li><li><code>has(key)</code>：判断键是否存在于<code>Map</code>中</li><li><code>delete(key)</code>：移除Map中的键以及对应的值</li><li><code>clear()</code>： 移除Map中所有的键与值</li></ul><p>示例代码：  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Jack"</span>map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Map上的forEach方法"><a href="#Map上的forEach方法" class="headerlink" title="Map上的forEach方法"></a>Map上的forEach方法</h5><p>接收一个能接收三个参数的回调函数：  </p><ol><li>Map中下个位置的值</li><li>该值所对应的键</li><li>目标Map本身</li></ol><p>示例代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Nicholas"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ownerMap</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ownerMap <span class="token operator">===</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果</span>name<span class="token punctuation">,</span>Nicholas<span class="token boolean">true</span>age<span class="token punctuation">,</span> <span class="token number">20</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Weak-Map"><a href="#Weak-Map" class="headerlink" title="Weak Map"></a>Weak Map</h4><p>Map的弱引用方式（键才是弱引用，值不是），所有的键都必须是非空的对象，值可以是任意类型。</p><h5 id="Weak-Map的方法"><a href="#Weak-Map的方法" class="headerlink" title="Weak Map的方法"></a>Weak Map的方法</h5><ul><li><code>set()</code>: 添加数据</li><li><code>get()</code>: 提取数据 </li><li><code>has()</code>: 判断指定的键是否存在于Map中</li><li><code>delete()</code>: 移除一个特定的键值对</li></ul><p>示例代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">weakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token string">"Original"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "Original"</span>element<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>element <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          <span class="token comment">// weakMap中对应的数据也会被移除    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="与Map的差异"><a href="#与Map的差异" class="headerlink" title="与Map的差异"></a>与Map的差异</h5><ul><li>Weak Map只接受非空对象作为键值</li><li>不可迭代和枚举</li><li>没有<code>size</code>属性和<code>clear()</code>方法</li></ul><h3 id="第八章-迭代器（Iterator）和生成器（Generator）"><a href="#第八章-迭代器（Iterator）和生成器（Generator）" class="headerlink" title="第八章 迭代器（Iterator）和生成器（Generator）"></a>第八章 迭代器（Iterator）和生成器（Generator）</h3><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>迭代器是被设计专用于迭代的对象，带有特定接口。所有的迭代器对象都拥有<code>next()</code>方法，会返回一个<code>结果对象</code>。该<code>结果对象</code>有两个属性：</p><ul><li><code>value</code>: 下一个值</li><li><code>done</code>: 是否迭代完成<br><code>ES5</code>中迭代器简易实现：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> done <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token operator">!</span>done <span class="token operator">?</span> items<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">done</span><span class="token operator">:</span> done<span class="token punctuation">,</span>                <span class="token literal-property property">value</span><span class="token operator">:</span> value            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 生成迭代器</span><span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;done: false, value: 1&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;done: false, value: 2&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;done: false, value: 3&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;done: true, value: undefined&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="何为生成器"><a href="#何为生成器" class="headerlink" title="何为生成器"></a>何为生成器</h4><p>生成器是能返回一个迭代器的函数。生成器函数由放在<code>function</code>关键字之后的一个星号<code>*</code>来表示，并能使用新的关键字<code>yield</code>。</p><blockquote><p><code>yield</code>关键字只能用在生成器内部，用于其他位置会被认为是语法错误。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 生成器</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;done: false, value: 1&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;done: false, value: 2&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;done: false, value: 3&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;done: true, value: undefined&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以创建生成器函数表达式，不可以使用箭头函数。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createIterator</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token operator">*</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;done: false, value: 1&#125;</span><span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问默认迭代器"><a href="#访问默认迭代器" class="headerlink" title="访问默认迭代器"></a>访问默认迭代器</h4><p><span id="iterableObject">可迭代对象</span>是包含<code>Symbol.iterator</code>属性的对象。<code>for-of</code>只可用在可迭代对象上。常用的<code>数组</code>、<code>Set</code>、<code>Map</code>以及<code>字符串</code>都是可迭代对象，用户自定义创建的对象默认不是可迭代对象。<br><code>Symbol.iterator</code>定义了为指定对象返回迭代器的函数，可以使用<code>Symbol.iterator</code>来访问对象上的默认迭代器。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> values<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;done: false, value: 1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>Symbol.iterator</code>来检测一个对象是否能进行迭代。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isIterable</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> object<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="创建可迭代对象"><a href="#创建可迭代对象" class="headerlink" title="创建可迭代对象"></a>创建可迭代对象</h4><p>为自定义的对象添加<code>Symbol.iterator</code>属性，可以使其成为可迭代对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token operator">*</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">yield</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">// 1 2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="集合的迭代器"><a href="#集合的迭代器" class="headerlink" title="集合的迭代器"></a>集合的迭代器</h4><p>ES6中的三种集合对象类型（数组、<code>Map</code>和<code>Set</code>），都拥有如下迭代器：</p><ul><li><code>entries()</code>：返回一个包含键值对的迭代器；</li><li><code>values()</code>：返回一个包含集合中的值的迭代器；</li><li><code>keys()</code>：返回一个包含集合中的建的迭代器。<br><code>values()</code>是数组与<code>Set</code>的默认迭代器，<code>entries()</code>是<code>Map</code>的默认迭代器。</li></ul><h4 id="扩展运算符与非数组的可迭代对象"><a href="#扩展运算符与非数组的可迭代对象" class="headerlink" title="扩展运算符与非数组的可迭代对象"></a>扩展运算符与非数组的可迭代对象</h4><p>扩展运算符能作用域所有可迭代对象，并且会使用默认迭代器来判断需要使用哪些值。<br>作用于<code>Set</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>作用于<code>Map</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Nicholas"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ ["name", "Nicholas"], ["age", 25]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>作用于字符串：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">,</span>    array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["h","e","l","l","o"," ","w","o","r","l","d"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传递参数给迭代器"><a href="#传递参数给迭代器" class="headerlink" title="传递参数给迭代器"></a>传递参数给迭代器</h4><p>可以通过<code>next()</code>方法向迭代器传递参数，该参数会成为生成器内部<code>yield</code>语句的值。</p><blockquote><p>注：<code>yield语句</code>是指上次生成器中断执行出得语句。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token keyword">yield</span> first <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 4 + 2 </span>    <span class="token keyword">yield</span> second <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>              <span class="token comment">// 5 + 3 </span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// "&#123; value: 1, done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// "&#123; value: 6, done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// "&#123; value: 8, done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// "&#123; value: undefined, done: true &#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<code>next()</code>的首次调用，传递给它的任一参数都会被忽略。</p><h4 id="迭代器中抛出错误"><a href="#迭代器中抛出错误" class="headerlink" title="迭代器中抛出错误"></a>迭代器中抛出错误</h4><p>传递错误对象给迭代器的<code>throw()</code>方法，可以让迭代器抛出该错误。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token keyword">yield</span> first <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// yield 4 + 2 ，然后抛出错误 </span>    <span class="token keyword">yield</span> second <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 永不会被执行 </span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: 1, done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: 6, done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Boom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从生成器中抛出了错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>try-catch</code>来捕捉错误。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token keyword">yield</span> first <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// yield 4 + 2 ，然后抛出错误 </span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        second <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                   <span class="token comment">// 捕捉到错误时，赋予新值</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">yield</span> second <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: 1, done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: 6, done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Boom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: 9, done: false &#125;" </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成器的Return语句"><a href="#生成器的Return语句" class="headerlink" title="生成器的Return语句"></a>生成器的<code>Return</code>语句</h4><p>生成器中使用<code>return</code>，可以让生成器在指定位置退出执行，且指定最后一次调用<code>next()</code>的返回值。使用<code>return</code>语句，<code>done</code>属性会被设置为<code>true</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">99</span><span class="token punctuation">;</span>     <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: 1, done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: 99, done: true &#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成器委托"><a href="#生成器委托" class="headerlink" title="生成器委托"></a>生成器委托</h4><p>可以将多个生成器合并成一个生成器来使用，该合并后的生成器创建出来的迭代器从外部来看就是一个单一的迭代器。该迭代器在<code>next()</code>调用过程中，<br>会委托给合适的生成器。合并后的生成器中，可以</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createNumberIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createRepeatingIterator</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">yield</span> <span class="token string">"repeat"</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createCombinedIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">createNumberIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第3次调用next()时result会被赋值为3，并传递给下一个生成器</span>    <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">createRepeatingIterator</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token function">createCombinedIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: 1, done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: 2, done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: "repeat", done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: "repeat", done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: "repeat", done: false &#125;" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&#123; value: undefined, done: true &#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第九章-JS的类"><a href="#第九章-JS的类" class="headerlink" title="第九章 JS的类"></a>第九章 JS的类</h3><h4 id="ES5的仿类结构"><a href="#ES5的仿类结构" class="headerlink" title="ES5的仿类结构"></a>ES5的仿类结构</h4><p>创建一个构造函数，然后在该构造函数的原型上定义方法，由此构造函数创建的实例对象都可以调用该方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基本的类声明"><a href="#基本的类声明" class="headerlink" title="基本的类声明"></a>基本的类声明</h4><p>以<code>class</code>关键字开始，其后是类的名称，剩余部分类似对象的字面量形式。<code>class</code>是ES6中的一个语法糖，本质上还是基于原型的继承。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 构造器，作用相当于构造函数</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 自有属性在这里面创建</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 等价于Person.prototype.sayName</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类与构造函数之间的区别"><a href="#类与构造函数之间的区别" class="headerlink" title="类与构造函数之间的区别"></a>类与构造函数之间的区别</h4><ul><li>类声明不会被提升，行为类似于<code>let</code></li><li>类声明中的所有代码会自动运行在严格模式下，并且也无法退出严格模式</li><li>类的所有方法都是不可枚举的</li><li>类的所有方法内部都没有<code>[[Construct]]</code>，使用<code>new</code>来调用它们会出错</li><li>调用类构造器时不使用<code>new</code>，会抛出错误</li><li>试图在类的方法内部重写类名，会抛出错误（外部可以）</li></ul><h4 id="基本的类表达式"><a href="#基本的类表达式" class="headerlink" title="基本的类表达式"></a>基本的类表达式</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//除了语法差异，功能等价于类声明</span><span class="token keyword">let</span> PersonClass <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonClass</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//"Nicholas"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具名类表达式"><a href="#具名类表达式" class="headerlink" title="具名类表达式"></a>具名类表达式</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//与函数表达式类似，PersonClass2 只在类定义内部存在</span><span class="token keyword">let</span> PersonClass <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">PersonClass2</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonClass</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//"Nicholas"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> PersonClass<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'function'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> PersonClass2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'undefined'   //外部访问结果为"undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="作为一级公民的类"><a href="#作为一级公民的类" class="headerlink" title="作为一级公民的类"></a>作为一级公民的类</h4><p>能被当作值来使用的就称为<code>一级公民</code>，意味着它能作为参数传给函数、能作为函数返回值、能用来给变量赋值。JS的函数就是一级公民。ES6中，类也是一级公民。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token parameter">classDef</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">classDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//匿名类表达式作为参数</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">&#123;</span>    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"Hi!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>立即调用类构造器，以创建单例，需使用<code>new</code>配合类表达式来使用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"Nicholas"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h4><p>getter和setter分别使用get和set关键字来创建。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">CustomHTMLElement</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">get</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="需计算的成员名"><a href="#需计算的成员名" class="headerlink" title="需计算的成员名"></a>需计算的成员名</h4><p>语法相当于对象字面量中的需计算名称：无需使用标识符，而是用方括号来包裹一个表达式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> methodName <span class="token operator">=</span> <span class="token string">"sayName"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PersonClass</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonClass</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>me<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>使用<code>static</code>关键字标注的成员即为类的静态成员。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PersonClass</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 静态方法，直接使用PersonClass.create()访问</span>    <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PersonClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> person <span class="token operator">=</span> PersonClass<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"Nicholas"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><p>使用<code>extends</code>关键字来进行类的继承，生成的类的原型会被自动调整，还能使用<code>super()</code>方法来访问基类的构造器。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基类：被继承的类</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">length<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 派生类：继承别的类的类</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="super-使用需要注意的点"><a href="#super-使用需要注意的点" class="headerlink" title="super()使用需要注意的点"></a><code>super()</code>使用需要注意的点</h5><ul><li>只能在派生类中使用<code>super()</code>，否则会报错</li><li>在构造器中，必须在访问<code>this</code>之前调用<code>super()</code>，因为<code>super()</code>负责初始化<code>this</code>，否则会报错</li><li>唯一能避免使用<code>super()</code>的办法，是从类构造器中返回一个对象。<blockquote><p>解读：使用extends实现的类的继承，要么在子类中不指定<code>constructor</code>（此时super()会被自动调用），要么就手动指明<code>constructor</code>，此时<code>constructor</code>中必须手动调用<code>super()</code>，否则会报错。若不想使用<code>super()</code>且不想报错，唯一的办法就是<code>constructor</code>中返回一个对象，但一旦这么做，虽然仍然实现了继承，但使用该派生类创建的类实例，就与该派生类断开了联系，也违背了继承的目的。示例代码附下。  </p></blockquote></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>            <span class="token literal-property property">age</span><span class="token operator">:</span> age        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="屏蔽类方法"><a href="#屏蔽类方法" class="headerlink" title="屏蔽类方法"></a>屏蔽类方法</h4><p>派生类中的方法总是会屏蔽基类的同名方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">length<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 重写并屏蔽了Reactangle中的getArea()</span>    <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>        <span class="token comment">// 仍然可以通过super来调用Rectangle的getArea()</span>    <span class="token function">getRectangelArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="继承静态成员"><a href="#继承静态成员" class="headerlink" title="继承静态成员"></a>继承静态成员</h4><p>基类中的静态成员会被继承给派生类。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">supe</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 静态方法继承</span><span class="token constant">B</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从表达式中派生类"><a href="#从表达式中派生类" class="headerlink" title="从表达式中派生类"></a>从表达式中派生类</h4><p>只要一个表达式能够返回一个具有<code>[[Construct]</code>属性以及原型的函数，就可以对其使用<code>extends</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> SerializableMixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> AreaMixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mixin</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>mixins</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token function-variable function">base</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token operator">...</span>mixins<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> base<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">mixin</span><span class="token punctuation">(</span>AreaMixin<span class="token punctuation">,</span> SerializableMixin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;"length":3,"width":3&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="继承内置对象"><a href="#继承内置对象" class="headerlink" title="继承内置对象"></a>继承内置对象</h4><p>在ES5的传统继承中，<code>this</code>的值会被派生类创建，随后基类构造器才被调用，这意味着<code>this</code>一开始是派生类的实例，之后才使用了基类的附加属性对其进行了装饰。这样就出现了基于内置对象的派生类不具备内置对象部分功能的情况。<br>在ES6中基于类的继承中，<code>this</code>的值会先被基类创建，随后才会被派生类的构造器所修改。这样<code>this</code>就拥有了作为基类的内置对象的所有功能。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span><span class="token comment">// 内置数组的功能：设置length=0会清空数组</span><span class="token comment">// 在ES5中实现的继承中，设置length=0无法清空数组</span>colors<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在类构造器中使用new-target"><a href="#在类构造器中使用new-target" class="headerlink" title="在类构造器中使用new.target"></a>在类构造器中使用new.target</h4><p>类构造器在调用时不能缺少<code>new</code>，因此<code>new.target</code>属性在类构造器内就始终存在，由此可以来判断类是如何被调用的。由此可以创建一个抽象基类（一种不能被实例化的类）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">==</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"This class connot be instantiated directly."</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">length<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token punctuation">;</span> <span class="token comment">// 抛错，"This class connot be instantiated directly."</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y <span class="token keyword">instanceof</span> <span class="token class-name">Shape</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第十章-改进的数组功能"><a href="#第十章-改进的数组功能" class="headerlink" title="第十章 改进的数组功能"></a>第十章 改进的数组功能</h3><h4 id="ES5中创建数组的常用方式"><a href="#ES5中创建数组的常用方式" class="headerlink" title="ES5中创建数组的常用方式"></a>ES5中创建数组的常用方式</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方式1：字面量</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 方式2：Array构造函数</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -> [undefined, undefined]</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -> [1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Array-of-方法"><a href="#Array-of-方法" class="headerlink" title="Array.of()方法"></a>Array.of()方法</h4><p>由上例可知，在利用<code>Array</code>构造函数创建数组时，传入一个数值型参数，该参数并不会成为数组的元素，利用ES6中的<code>Array.of()</code>方法可以规避这种风险。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// -> [2]</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// -> [1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="ES5中类数组对象转换为数组的方式"><a href="#ES5中类数组对象转换为数组的方式" class="headerlink" title="ES5中类数组对象转换为数组的方式"></a>ES5中类数组对象转换为数组的方式</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// for循环遍历</span><span class="token keyword">function</span> <span class="token function">makeArray</span><span class="token punctuation">(</span><span class="token parameter">arryLike</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arrayLike<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arryLike<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 利用数组的slice()</span><span class="token keyword">function</span> <span class="token function">makeArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Array-from-方法"><a href="#Array-from-方法" class="headerlink" title="Array.from()方法"></a>Array.from()方法</h4><p>接收<a href="#iterableObject">可迭代对象</a>或<code>类数组对象</code>(arguments对象或带有length属性的对象)作为第一个参数，接收一个映射函数作为第二个参数，接收第三个参数作为映射函数的this值，最终返回一个数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> argumentArr <span class="token operator">=</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ->[2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="find-和findIndex-方法"><a href="#find-和findIndex-方法" class="headerlink" title="find()和findIndex()方法"></a>find()和findIndex()方法</h4><ul><li>接收两个参数，一个是回调函数，另一个是可选参数，用于指定回调函数中的this值。  </li><li>回调函数接收的参数与<code>map()</code>、<code>forEach()</code>一致。  </li><li>回调函数一旦返回true，会停止搜索，<code>find()</code>会返回查找到的值，<code>findIndex()</code>会返回查找到的值的索引。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> number1 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -> 2</span><span class="token keyword">let</span> number1Index <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -> 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="fill-方法"><a href="#fill-方法" class="headerlink" title="fill()方法"></a>fill()方法</h4><p>用指定的值填充数组。</p><ul><li>传入一个参数时，数组全部元素被重写为该值。</li><li>传入两个参数时，数组从参数2表示的索引及其之后的的全部元素被重写为参数1。</li><li>传入三个参数时，数组从参数2开始到参数3之前的元素被重写为参数1。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -> [0, 0, 0, 0]</span>numbers<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -> [0, 0, 1, 1]</span>numbers<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -> [0, 2, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="copyWithin-方法"><a href="#copyWithin-方法" class="headerlink" title="copyWithin()方法"></a>copyWithin()方法</h4><p>从指定的索引开始复制元素值填充到指定的索引处。</p><ul><li>接收三个参数，参数1是开始填充值的索引位置；参数2是开始复制值的索引位置；参数3是停止复制值的索引位置（不包含结束索引）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 从索引2处开始复制到，填充到索引0开始的元素上</span>numbers<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -> [3, 4, 3, 4]</span><span class="token comment">// 从索引0开始复制到索引2之前的元素，填充到索引1开始的元素上</span>munbers<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// -> [3, 3, 4, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第十一章-Promise和异步编程"><a href="#第十一章-Promise和异步编程" class="headerlink" title="第十一章 Promise和异步编程"></a>第十一章 Promise和异步编程</h3><blockquote><p>Promise是异步编程的另一种选择，它的工作方式类似于在其他语言中延迟并在将来执行作业。一个Promise指定一些稍后要执行的代码，并且也明确标示了作业的代码是否执行成功。</p></blockquote><h4 id="异步编程的背景"><a href="#异步编程的背景" class="headerlink" title="异步编程的背景"></a>异步编程的背景</h4><p>JS引擎建立在<code>单线程事件循环</code>的概念上。单线程意味着在同一时刻只能执行一段代码。代码会被放置在<code>作业队列（job queue）</code>中，每当一段代码准备被执行，它就被添加到作业队列 。当JS引擎结束当前代码的执行后，<code>事件循环（event loop）</code>就会执行队列中的下一个作业。<br>回调函数模式是异步编程的最常用的一种选择，但是当回调函数嵌套过多时，会陷入回调地狱（callback hell），代码会可读性会变差且调试困难。</p><h4 id="Promise的生命周期"><a href="#Promise的生命周期" class="headerlink" title="Promise的生命周期"></a>Promise的生命周期</h4><p>Promise初始为<code>挂起态（pending）</code>时，表示异步操作尚未结束，此时的Promise是未决的（unsettled），异步操作结束的Promise是已决的（settled），已决的Promise有<code>完成（fullfilled）</code>及<code>拒绝（rejected）</code>两种状态。</p><pre class="mermaid">graph LRA[挂起态 pending]-->B[已完成 fulfilled]A-->C[已拒绝 rejected]</pre><h4 id="使用then-方法监测Promise状态的改变"><a href="#使用then-方法监测Promise状态的改变" class="headerlink" title="使用then()方法监测Promise状态的改变"></a>使用<code>then()</code>方法监测Promise状态的改变</h4><p><code>then()</code>方法在所有Promise上都存在，接收两个参数（非必传的）。第一个参数为Promise状态变为<code>已完成（fullfilled）</code>时要调用的函数，第二个参数是Promise状态改变为<code>已拒绝（rejected）</code>时要调用的函数。<br>示例代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"example.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同时监听完成和拒绝</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">contents</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 完成</span>    <span class="token comment">//contents中包含异步操作成功相关的数据</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 拒绝</span>    <span class="token comment">//err中包含异步操作被拒绝相关的数据</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只监听完成</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">contents</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只监听拒绝</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等价于使用catch()</span>promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建未决的Promise"><a href="#创建未决的Promise" class="headerlink" title="创建未决的Promise"></a>创建未决的Promise</h4><p>使用Promise构造器来创建，接收一个执行器函数作为参数，该函数传递<code>resolve</code>及<code>reject</code>两个参数。<br>示例代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Node.js 范例</span><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建promise并作为函数的返回值</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 触发异步操作</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">"utf8"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> contents</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 检查错误</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// promise状态会改变为rejected</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token comment">// 读取成功，promise状态会变为fullfilled</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//调用readFile，得到返回的Promise对象</span><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"example.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听promise对象的状态</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">contents</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 完成</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 拒绝</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建已处理的Promise"><a href="#创建已处理的Promise" class="headerlink" title="创建已处理的Promise"></a>创建已处理的Promise</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个已完成的promise</span><span class="token keyword">let</span> promise1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">688</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    consol<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 688</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 创建一个已拒绝的promise</span><span class="token keyword">let</span> promise2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">422</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise2<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    conosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 422</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="串联Promise"><a href="#串联Promise" class="headerlink" title="串联Promise"></a>串联Promise</h4><p>每次调用<code>then()</code>或<code>catch()</code>方法时实际上创建并返回了另一个Promise，只有当前面的promise完成或拒绝后，后面的才会被解决。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Finished'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 输出结果</span><span class="token number">42</span>Finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在promise链的末尾保留一个<code>catch()</code>方法，用以捕获处理promise链中的错误。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Error Happened!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Finished'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 输出结果</span><span class="token number">42</span>Error Happened<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在promise链中使用<code>return</code>传递数据到下游promise中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 传递普通数据</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p3<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> res <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 输出结果</span><span class="token number">42</span><span class="token number">52</span><span class="token comment">// 传递promise</span><span class="token comment">// 传递普通数据</span><span class="token keyword">let</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p4<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> p5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 输出结果</span><span class="token number">42</span><span class="token number">52</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="响应多个Promise"><a href="#响应多个Promise" class="headerlink" title="响应多个Promise"></a>响应多个Promise</h4><p>ES6中提供了<code>Promise.all()</code>和<code>Promise.race()</code>两个方法来监听多个Promise。<br><code>Promise.all()</code>接受含多个受监视Promise的可迭代对象作为唯一参数，返回一个Promise。只有当可迭代对象中的所有Promise都完成，返回的Promise才会完成，只要有一个被拒绝，返回的Promise就会被立即拒绝。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p4 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p4<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 输出结果</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Promise.race()</code>接受含多个受监视Promise的可迭代对象作为唯一参数，返回一个Promise，只要有一个被解决（完成或拒绝），返回的Promise就会被立即解决。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> p4 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p4<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 输出结果</span><span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第十二章-代理与反射接口"><a href="#第十二章-代理与反射接口" class="headerlink" title="第十二章 代理与反射接口"></a>第十二章 代理与反射接口</h3><blockquote><p>ES6通过代理（proxy）暴露了在对象上的内部工作，代理是一种封装，能够拦截并改变JS引擎的底层操作。</p></blockquote><h4 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h4><p>使用<code>Proxy</code>构造函数来创建一个代理时，需要传递两个参数：<code>目标对象</code>以及<code>处理器</code>。处理器是定义了一个或多个陷阱函数的对象。如果未提供陷阱函数，代理会对所有操作采取默认行为。</p><table><thead><tr><th>陷阱函数</th><th>触发时机</th><th>默认行为</th></tr></thead><tbody><tr><td>get</td><td>读取一个属性的值</td><td>Reflect.get()</td></tr><tr><td>set</td><td>写入一个属性</td><td>Reflect.set()</td></tr><tr><td>has</td><td>in 运算符</td><td>Reflect.has()</td></tr><tr><td>deleteProperty</td><td>delete 运算符</td><td>Reflect.deleteProperty()</td></tr><tr><td>getPrototypeOf</td><td>Object.getPrototypeOf()</td><td>Reflect.getPrototypeOf()</td></tr><tr><td>setPrototypeOf</td><td>Object.setPrototypeOf()</td><td>Reflect.setPrototypeOf()</td></tr><tr><td>isExtensible</td><td>Object.isExtensible()</td><td>Reflect.isExtensible()</td></tr><tr><td>preventExtensions</td><td>Object.preventExtensions()</td><td>Reflect.preventExtensions()</td></tr><tr><td>getOwnPropertyDescriptor</td><td>Object.getOwnPropertyDescriptor()</td><td>Reflect.getOwnPropertyDescriptor()</td></tr><tr><td>defineProperty</td><td>Object.defineProperty()</td><td>Reflect.defineProperty</td></tr><tr><td>ownKeys</td><td>Object.keys() Object.getOwnPropertyNames() 与 Object.getOwnPropertySymbols()</td><td>Reflect.ownKeys()</td></tr><tr><td>apply</td><td>调用一个函数</td><td>Reflect.apply()</td></tr><tr><td>construct</td><td>使用 new 调用一个函数</td><td>Reflect.construct()</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"proxy"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>name<span class="token punctuation">,</span> target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "proxy,proxy"</span>target<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"target"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>name<span class="token punctuation">,</span> target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "target,target"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用set陷阱验证属性"><a href="#使用set陷阱验证属性" class="headerlink" title="使用set陷阱验证属性"></a>使用set陷阱验证属性</h4><p>示例：创建一个属性值只能是数值的对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"target"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">set</span><span class="token punctuation">(</span>trapTarget<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 新增属性且属性值非数字时报错</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>trapTarget<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Property must be a number.'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 新增属性值为数字或已有属性可以正常操作</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>trapTarget<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 新增属性</span>proxy<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>count<span class="token punctuation">,</span> target<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "1,1"</span><span class="token comment">// 修改已有属性</span>proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"proxy"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>name<span class="token punctuation">,</span> target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "proxy,proxy"</span><span class="token comment">// 新增属性但属性值非数字</span>proxy<span class="token punctuation">.</span>anotherName <span class="token operator">=</span> <span class="token string">"proxy"</span><span class="token punctuation">;</span> <span class="token comment">// 报错，"Property must be a number."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用get陷阱验证对象结构"><a href="#用get陷阱验证对象结构" class="headerlink" title="用get陷阱验证对象结构"></a>用get陷阱验证对象结构</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>trapTarget<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 属性不存在时报错</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> receiver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Property </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> doesn't exist.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>trapTarget<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 报错 "Uncaught TypeError: Property name doesn't exist."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第十三章-用模块封装代码"><a href="#第十三章-用模块封装代码" class="headerlink" title="第十三章 用模块封装代码"></a>第十三章 用模块封装代码</h3><h4 id="基本的导出"><a href="#基本的导出" class="headerlink" title="基本的导出"></a>基本的导出</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导出数据</span><span class="token keyword">export</span> <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token punctuation">;</span><span class="token comment">//导出函数</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//模块私有函数</span>funtion <span class="token function">substract</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1<span class="token operator">*</span>num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> multiply <span class="token punctuation">&#125;</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：除了export关键字之外，每个声明都与正常形式完全一样，每个被导出的函数或类都有名称（所以不能使用这种语法来导出匿名函数后匿名类）。</p><h4 id="基本的导入"><a href="#基本的导入" class="headerlink" title="基本的导入"></a>基本的导入</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入单个绑定</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sum <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span><span class="token comment">//引入多个绑定</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sum<span class="token punctuation">,</span>multiply<span class="token punctuation">,</span>name <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span><span class="token comment">//完全导入一个模块      ---- 命名空间导入</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> example <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span>example<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入绑定的一个怪异点：<br>ES6的import语句为变量、函数与类创建了只读绑定，即导入绑定的模块无法绑定修改的值，但负责导出的模块却可以。<br>导出文件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">newName</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    name <span class="token operator">=</span> newName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>导入文件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span>setName <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./example.js"</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">;</span>       <span class="token comment">//error</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重命名导出与导入"><a href="#重命名导出与导入" class="headerlink" title="重命名导出与导入"></a>重命名导出与导入</h4><ol><li>导出的时候重命名   </li></ol><p>导出文件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> sum <span class="token keyword">as</span> add <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//sum是本地名称，add是导出名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> add <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>导入的时候重命名<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sum <span class="token keyword">as</span> add <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="导出默认值"><a href="#导出默认值" class="headerlink" title="导出默认值"></a>导出默认值</h4><p>模块的默认值是使用default关键字所指定的单个变量、函数或类，在每个模块中只能设置一个默认导出。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum1 <span class="token operator">+</span> sum2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 也可以使用重命名语法来进行默认导出</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sum1 <span class="token operator">+</span> sum2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> sum <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导入默认导出的模块不用使用花括号</span><span class="token keyword">import</span> sum<span class="token punctuation">,</span><span class="token punctuation">&#123;</span> color <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span><span class="token comment">//使用重命名来进行默认导入</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">as</span> sum<span class="token punctuation">,</span> color <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：import语句中默认名称必须位于非默认名称之前。</p><h4 id="绑定的再导出"><a href="#绑定的再导出" class="headerlink" title="绑定的再导出"></a>绑定的再导出</h4><p>即将导入的模块重新再导出：<br>传统方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sum <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> sum <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>改进方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> sum <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span><span class="token comment">//重命名导出</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> sum <span class="token keyword">as</span> add <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span><span class="token comment">//完全导出</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的JavaScript读书笔记</title>
      <link href="/2021-12-18-ni-bu-zhi-dao-de-javascript-du-shu-bi-ji.html"/>
      <url>/2021-12-18-ni-bu-zhi-dao-de-javascript-du-shu-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一部分-作用域和闭包"><a href="#第一部分-作用域和闭包" class="headerlink" title="第一部分 作用域和闭包"></a>第一部分 作用域和闭包</h2><h3 id="第1章-作用域"><a href="#第1章-作用域" class="headerlink" title="第1章 作用域"></a>第1章 作用域</h3><h4 id="1-1-编译原理"><a href="#1-1-编译原理" class="headerlink" title="1.1 编译原理"></a>1.1 编译原理</h4><p>在传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为<code>编译</code>。</p><ul><li>分词/词法分析（Tokenizing/Lexing）<br>这个过程会将由字符组成的字符串分解成有意义的代码块，这些代码块被称为<code>词法单元</code>。</li><li>解析/语法分析<br>这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树，这个树被称为<code>抽象语法树</code>（Abstract Syntax Tree，AST）。</li><li>代码生成<br>将AST转换成可执行代码的过程。</li></ul><p>尽管通常将JavaScript归类为<code>动态</code>或<code>解释执行</code>语言，但事实上它是一门编译语言。对于JavaScript来说，大部分情况下编译发生在代码执行前的几微妙（甚至更短）的时间内。</p><h4 id="1-2-理解作用域"><a href="#1-2-理解作用域" class="headerlink" title="1.2 理解作用域"></a>1.2 理解作用域</h4><p>总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量，然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。</p><p>LHS和RHS查询？赋值操作的左侧或右侧。</p><h4 id="1-3-作用域嵌套"><a href="#1-3-作用域嵌套" class="headerlink" title="1.3 作用域嵌套"></a>1.3 作用域嵌套</h4><p>遍历嵌套作用域链的规则：</p><blockquote><p>引擎从当前的执行作用域开始查找变量，如果找不到，就会向上一级继续查找，当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都会停止。</p></blockquote><h4 id="1-4-异常"><a href="#1-4-异常" class="headerlink" title="1.4 异常"></a>1.4 异常</h4><p>如果RHS查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出<code>ReferenceError</code>异常。试图对一个非函数类型的值进行函数操作，或者引用null或undefined类型的值中的属性，引擎会抛出<code>TypeError</code>异常。<br>ReferenceError同作用域判别失败相关，而TypeError则代表作用域判别成功了，但是对结果的操作是非法或不合理的。</p><h3 id="第2章-词法作用域"><a href="#第2章-词法作用域" class="headerlink" title="第2章 词法作用域"></a>第2章 词法作用域</h3><h4 id="2-1-词法阶段"><a href="#2-1-词法阶段" class="headerlink" title="2.1 词法阶段"></a>2.1 词法阶段</h4><p>词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里决定的。<br>作用域查找会在找到第一个匹配的标识符时停止。在多层的嵌套作用域中可以定义同名的标识符，这叫作<code>遮蔽效应</code>（内部的标识符遮蔽了外部的标识符）。</p><h4 id="2-2-欺骗词法"><a href="#2-2-欺骗词法" class="headerlink" title="2.2 欺骗词法"></a>2.2 欺骗词法</h4><p>词法作用域是由写代码期间函数所声明的位置决定的，如何来修改（欺骗）词法作用域呢？<br>两种机制：</p><ul><li><p>eval<br>eval函数可以接收一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。<br>示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">eval</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"var b=3;"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//1,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>with<br>with通常被当作重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//使用with关键字</span><span class="token keyword">with</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// with的词法示例</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span> o1 <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o1<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 </span><span class="token function">foo</span><span class="token punctuation">(</span> o2 <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o2<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2——不好，a 被泄漏到全局作用域上了！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>with 声明实际上是根据你传递给它的对象凭空创建了一个全新的词法作用域。<br>当传递 o1 给 with 时，with 所声明的作用域是 o1，而这个作用域中含有一个同 o1.a 属性相符的标识符。但将 o2 作为作用域时，其中并没有 a 标识符， 因此进行了正常的 LHS 标识符查找。 o2 的作用域、foo(..) 的作用域和全局作用域中都没有找到标识符 a，因此当 a＝2 执行 时，自动创建了一个全局变量。</p></li></ul><h3 id="第3章-函数作用域和块作用域"><a href="#第3章-函数作用域和块作用域" class="headerlink" title="第3章 函数作用域和块作用域"></a>第3章 函数作用域和块作用域</h3><h4 id="3-1-函数中的作用域"><a href="#3-1-函数中的作用域" class="headerlink" title="3.1 函数中的作用域"></a>3.1 函数中的作用域</h4><p>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用。</p><h4 id="3-2-隐藏内部实现"><a href="#3-2-隐藏内部实现" class="headerlink" title="3.2 隐藏内部实现"></a>3.2 隐藏内部实现</h4><p>最小授权或最小暴露原则：是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来。</p><h4 id="3-3-函数作用域"><a href="#3-3-函数作用域" class="headerlink" title="3.3 函数作用域"></a>3.3 函数作用域</h4><p>通过声明一个具名函数的方法可以创建一个函数作用域，但是函数名的存在也是对所在作用域的一种“污染”，解决办法：</p><ul><li>匿名和具名<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I waited 1 second!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>其中的function()…就是匿名函数表达式。<br>匿名函数的缺点：</p><ul><li><p>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。</p></li><li><p>当函数需要引用自身时只能使用已经过期的arguments.callee引用。</p></li><li><p>匿名函数省略了对于代码可读性/可理解性很重要的函数名。</p></li><li><p>立即执行函数表达式(IIFE)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2</span>匿名函数的两种形式：两种形式在功能上是一致的。可以随意选择。<span class="token comment">//形式1:</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//形式2：</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进阶用法：传递参数进去</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进阶用法：倒置代码的运行顺序</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token constant">IIFE</span><span class="token punctuation">(</span><span class="token parameter">def</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">def</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-4-块作用域"><a href="#3-4-块作用域" class="headerlink" title="3.4 块作用域"></a>3.4 块作用域</h4><p>表面上看JavaScript并没有块作用域的相关功能。</p><ul><li><p>with<br>with是块作用域的一种形式。用with从对象中创建出来的作用域仅在with声明中而非外部作用域中有效。</p></li><li><p>try/catch<br>ES3规范中规定try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效。</p></li><li><p>let<br>let关键字可以将变量绑定到所在的任意作用域。（通常是{….}内部）<br>使用let进行的声明不会被提升。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//会被提升到作用域顶部</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//ReferenceError</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>               <span class="token comment">//不会被提升</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>const<br>const同样可以用来创建块作用域变量，但其值是固定的（常量），之后任何试图修改值得操作都会引起错误。（但是可以修改对象的属性）</p></li></ul><h3 id="第4章-提升"><a href="#第4章-提升" class="headerlink" title="第4章 提升"></a>第4章 提升</h3><p>只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//不会报错</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//函数声明会被提升，所以第一行代码不会报错</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//undefined</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                 <span class="token comment">//声明会被提升至函数作用域顶部，但是赋值不会被提升</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数优先<br>函数声明和变量声明都会被提升，但是函数会首先被提升，然后才是变量。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//1</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="第5章-作用域闭包"><a href="#第5章-作用域闭包" class="headerlink" title="第5章  作用域闭包"></a>第5章  作用域闭包</h3><h4 id="5-4-循环和闭包"><a href="#5-4-循环和闭包" class="headerlink" title="5.4 循环和闭包"></a>5.4 循环和闭包</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>i<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果6个6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们以为循环中的每个迭代在运行时都会给自己“捕获”一个i的副本，但是根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的，但是他们都被封闭在一个共享的全局作用域中，因此实际上只有一个i。<br>那么使用IIFE来创建独立的块作用域可以么？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>i<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果依然是6个6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用IIFE虽然将每次创建的作用域封闭起来了，但是每个作用域中依然共享着上层作用域中的同一个i，所以结果依然没有改变。试着为每个封闭的作用域创建块级变量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>j<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果为1，2，3，4,5,6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进写法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>j<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-5-模块"><a href="#5-5-模块" class="headerlink" title="5.5 模块"></a>5.5 模块</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CoolModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token comment">//封闭函数</span>    <span class="token keyword">var</span> something <span class="token operator">=</span> <span class="token string">"cool"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> another <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">doAnother</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>another<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span>  <span class="token punctuation">&#123;</span>                       <span class="token comment">//返回了一个以上的内部函数</span>        <span class="token literal-property property">doSomthing</span><span class="token operator">:</span> doSomething<span class="token punctuation">,</span>            <span class="token literal-property property">doAnother</span><span class="token operator">:</span> doAnother    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">CoolModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//至少被调用一次</span>foo<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//coolo</span>foo<span class="token punctuation">.</span><span class="token function">doAnother</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1！2！3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模块模式需要具备两个必要条件：</p><ol><li>必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）</li><li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态</li></ol><h2 id="第二部分-this和对象原型"><a href="#第二部分-this和对象原型" class="headerlink" title="第二部分 this和对象原型"></a>第二部分 this和对象原型</h2><h3 id="第1章-关于this"><a href="#第1章-关于this" class="headerlink" title="第1章 关于this"></a>第1章 关于this</h3><h4 id="1-2-误解"><a href="#1-2-误解" class="headerlink" title="1.2 误解"></a>1.2 误解</h4><p>有两种常见的对于this的误解，但是它们都是错误的。</p><ol><li>指向自身<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"foo: "</span> <span class="token operator">+</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 记录 foo 被调用的次数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>foo<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token comment">//为函数对象foo添加了一个属性count</span><span class="token keyword">var</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">foo</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//foo.call(foo,i);      //可以通过call方法将this执行函数对象foo本身</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// foo: 6</span><span class="token comment">// foo: 7</span><span class="token comment">// foo: 8</span><span class="token comment">// foo: 9</span><span class="token comment">// foo 被调用了多少次？</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> foo<span class="token punctuation">.</span>count <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 -- WTF?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><code>foo.count = 0</code>为<code>foo</code>对象添加了一个<code>count</code>属性，同时<code>this.count++</code>也执行了四次，但是最终的输出结果<code>console.log(foo.count)</code>却为<code>0</code>，说明将<code>this</code>理解为指向自身是错误的。<br>2. 指向函数的作用域<br>某些情况下是正确的，某些情况下是错误的。<br>但是可以明确的是，this在任何情况下都不指向函数的词法作用域。</p><h4 id="1-3-this到底是什么"><a href="#1-3-this到底是什么" class="headerlink" title="1.3 this到底是什么"></a>1.3 this到底是什么</h4><p><code>this</code>是在运行时进行绑定的，并不是在编写时绑定的，它的上下文取决于函数调用时的各种条件，this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。<br>当一个函数被调用时，会创建一个活动记录（执行上下文）。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this就是记录的其中一个属性，会在函数执行的过程中用到。</p><h3 id="第2章-this全面解析"><a href="#第2章-this全面解析" class="headerlink" title="第2章 this全面解析"></a>第2章 this全面解析</h3><h4 id="2-1-调用位置"><a href="#2-1-调用位置" class="headerlink" title="2.1 调用位置"></a>2.1 调用位置</h4><p>调用栈就是为了能达到当前执行位置所调用的所有函数，调用位置就在当前正在执行的函数的前一个调用中。</p><h4 id="2-2-绑定规则"><a href="#2-2-绑定规则" class="headerlink" title="2.2 绑定规则"></a>2.2 绑定规则</h4><ul><li><p>默认绑定</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>隐式绑定</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token literal-property property">foo</span><span class="token operator">:</span> foo<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>当函数引用有上下文对象时，隐式绑定规则会把函数调用中的this绑定到这个上下文对象。</p><ul><li>隐式丢失<br>一个常见的this绑定问题就是被隐式绑定的函数会丢失绑定对象，也就是说它会应用默认绑定，从而把this绑定到全局对象或者undefined上，取决于是否是严格模式。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token literal-property property">foo</span><span class="token operator">:</span> foo<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//"global"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此应用了默认绑定。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doFoo</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token literal-property property">foo</span><span class="token operator">:</span> foo<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span><span class="token function">doFoo</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//"global"</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//回调函数也会丢失this的绑定，结果也为"global"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数传递其实就是一种隐式赋值，所以结果和之前的一样。</p><ul><li>显示绑定<br><code>JavaScript</code>提供的绝大多数函数以及你自己创建的所有函数都可以使用<code>call()</code>和<code>apply()</code>方法，这两个方法的第一个参数是一个对象，它们会把这个对象绑定到<code>this</code>，接着在调用函数的时候指定这个<code>this</code>，因此你可以指定<code>this</code>的绑定对象，因此我们称之为<code>显示绑定</code>。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作this的绑定对象，这个原始值会被转换成它的对象形式（new String()、new Boolean()、new Number()），这通常被称为“装箱”。</p><ol><li>硬绑定<br>可以解决前面提到的丢失绑定的问题。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>ES5中提供了内置的方法<code>Function.prototype.bind</code>，它会返回一个硬编码的新函数，它会把参数设置为this的上下文并调用原始函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">something</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> something<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> something<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 2 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>API调用的“上下文”</li></ol><p>第三方库的许多函数，以及JavaScript语言和宿主环境中的许多新的内置函数，都提供了一个可选的参数，通常被称为“上下文”（context），其作用和bind()一样，确保你的回调函数使用指定的this。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"awesome"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1 awesome 2 awesome 3 awesome</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>new绑定</li></ul><p>在JavaScript中，构造函数只是一些使用new操作符时被调用的函数，他们不会属于这个类，也不会实例化一个类，实际上，他们甚至都不能说是一种特殊类型的函数类型，他们只是被new操作符调用的普通函数而已。<br>实际上并不存在所谓的“构造函数”，只有对函数的“构造调用”。<br>使用new来调用函数，或者说发生构造函数调用时，会自动执行下面的操作：</p><ol><li>创建一个全新的对象。</li><li>这个新对象会被执行[[原型]]连接。</li><li>这个新对象会绑定到函数调用的this。</li><li>如果函数没有返回其它对象，那么new表达式中的函数调用会自动返回这个新对象。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-3-优先级"><a href="#2-3-优先级" class="headerlink" title="2.3 优先级"></a>2.3 优先级</h4><p>new绑定&gt;显示绑定&gt;隐式绑定&gt;默认绑定<br>根据优先级来判断this，顺序如下：</p><ol><li>函数是否在new中调用（new绑定）？如果是的话this绑定的就是新创建的对象。</li><li>函数是否通过call、apply（显示绑定）或者硬绑定（bind）调用？如果是的话，this绑定的就是指定的对象。</li><li>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this绑定的就是那个上下文对象。示例： var bar = obj1.foo();</li><li>如果都不是的话，使用默认绑定，如果在严格模式下，就绑定到undefined，否则绑定到全局对象。</li></ol><h4 id="2-4-绑定例外"><a href="#2-4-绑定例外" class="headerlink" title="2.4 绑定例外"></a>2.4 绑定例外</h4><ul><li><p>被忽略的this<br>如果把null或者undefined作为this的绑定对象传入call、apply或者bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>间接引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> foo<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>foo <span class="token operator">=</span> o<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>赋值表达式p.foo = o.foo是对函数foo的引用，应用的是默认绑定规则。</p></li><li><p>软绑定<br>软绑定实现的效果：可以给默认绑定指定一个全局对象或undefined以外的值，那就可以实现和硬绑定相同的效果，同时保留隐式绑定或者显示绑定修改this的能力。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//软绑定函数定义</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>softBind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">softBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment">// 捕获所有 curried 参数</span>        <span class="token keyword">var</span> curried <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token function-variable function">bound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span> <span class="token operator">||</span> <span class="token keyword">this</span> <span class="token operator">===</span> <span class="token punctuation">(</span>window <span class="token operator">||</span> global<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> obj <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>                curried<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> curried<span class="token punctuation">,</span> arguments <span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        bound<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> fn<span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bound<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试是否实现了软绑定</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>obj3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj3"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> fooOBJ <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">softBind</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fooOBJ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: obj</span>obj2<span class="token punctuation">.</span>foo <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">softBind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: obj2 &lt;---- 看！ ！ ！</span><span class="token function">fooOBJ</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> obj3 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: obj3 &lt;---- 看！</span><span class="token function">setTimeout</span><span class="token punctuation">(</span> obj2<span class="token punctuation">.</span>foo<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// name: obj &lt;---- 应用了软绑定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-5-this词法"><a href="#2-5-this词法" class="headerlink" title="2.5 this词法"></a>2.5 this词法</h4><p>箭头函数不使用this绑定的四种标准规则，而是根据外层（函数或全局）作用域来决定this。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//2 ,不是3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>foo()内部创建的箭头函数会捕获调用时foo()的this，由于foo()的this绑定到obj1，bar的this也会绑定到obj1，箭头函数的绑定无法被修改。</p><h3 id="第3章-对象"><a href="#第3章-对象" class="headerlink" title="第3章 对象"></a>第3章 对象</h3><h4 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h4><p>对象可以通过两种形式定义：<code>声明形式</code>和<code>构造形式</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//声明形式</span><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">key</span><span class="token operator">:</span> value    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token comment">//构造形式</span><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myObj<span class="token punctuation">.</span>key <span class="token operator">=</span> value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-类型"><a href="#3-2-类型" class="headerlink" title="3.2 类型"></a>3.2 类型</h4><p>内置对象：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Object</li><li>Function</li><li>Array</li><li>Date</li><li>RegExp</li><li>Error<br>这些内置对象从表现形式上来看很像其他语言中的类型（type）或者类（class），但是在JavaScript中，他们实际上只是一些内置函数。这些内置函数可以当做构造函数来使用，从而可以构造出一个对应类型的新对象。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> strPrimitive <span class="token operator">=</span> <span class="token string">"I am a string"</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> strPrimitive<span class="token punctuation">;</span>      <span class="token comment">//'string'</span>strPrimitive <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>    <span class="token comment">//false</span><span class="token keyword">var</span> strObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"I am a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> strObject<span class="token punctuation">;</span>     <span class="token comment">//'object'</span>strObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>     <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-3-内容"><a href="#3-3-内容" class="headerlink" title="3.3 内容"></a>3.3 内容</h4><p>在对象中，属性名永远都是字符串。如果你使用string（字面量）以外的其他值作为属性名，那它首先会被转换为一个字符。即使是一个数字也不例外。</p><ul><li><p>可计算属性名<br>ES6增加了可计算属性名，可以在文字形式中使用[]包裹一个表达式来当作属性名：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> prefix <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>prefix <span class="token operator">+</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>prefix <span class="token operator">+</span> <span class="token string">'baz'</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"world"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>属性与方法<br>从技术角度来说，函数永远不会“属于”一个对象，所有把对象呢内部引用的函数称为“方法”似乎有点不妥。<br>最保险的说法可能是，“函数”和“方法”在JavaScript中是可以互换的。</p></li><li><p>数组<br>数组也是对象，所以虽然每个下标都是整数，但是仍然可以给数组添加属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myArr<span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token string">"baz"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//3      数组长度没有发生变化</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArr<span class="token punctuation">.</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//"baz"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>复制对象<br>深复制：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>someObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>浅复制：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>属性描述符<br>查看某个对象某个属性对应的属性描述符：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>对象，属性名<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>创建对象时根据需要设置属性描述符：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>对象，属性名，<span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> 属性值，    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment">//该属性是否可修改</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment">//该属性是否可配置属性描述符</span>    <span class="token literal-property property">enumberable</span><span class="token operator">:</span> <span class="token boolean">true</span>          <span class="token comment">//该属性是否可枚举</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不变性<br>对象常量<br>结合<code>writable:false</code>和<code>configurable:false</code>就可以创建一个真正的常量属性（不可修改、重定义或者删除）：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span> myObject<span class="token punctuation">,</span> <span class="token string">"FAVORITE_NUMBER"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>禁止扩展<br>如果想禁止一个对象添加新属性并且保留已有属性，可以使用<code>Object.preventExtensions(..)</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>myObject<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>myObject<span class="token punctuation">.</span>b<span class="token punctuation">;</span>     <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>密封<br><code>Object.seal(...)</code>会创建一个“密封”的对象，这个方法会该对象上调用<code>Object.preventExtensions(..)</code>并把所有现有属性标记为<code>configurable:false</code>。<br>所以密封的属性不仅不能添加新属性，也不能重新配置或者删除任何现有属性。（可以修改值）<br>冻结<br><code>Object.freeze(..)</code>会创建一个冻结对象，这个方法会在该对象上调用<code>Object.seal(..)</code>并把所有“数据访问”属性标记为<code>writable:false</code>。</p><ul><li>[[Get]]<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>myObject<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>在语言规范中，myObject.a在myObject上实际上是实现了[[Get]]操作。对象默认的内置[[Get]]操作首先在对象那种查找是否有同名属性，如果有，就返回这个属性的值，如果没有，就会遍历可能存在的[[Prototype]]链（原型链）。</p><ul><li>[[Put]]</li></ul><p>[[Put]]触发时，实际的行为取决于许多因素，包括对象中是否已经存在这个属性（这是最重要的因素）。<br>如果已经存在这个属性，[[Put]]算法大致会检查下列内容：<br>属性是否是访问描述符？是，并且存在setter就调用setter。<br>属性的数据描述符中writable是否是false？是，在非严格模式下静默失败，在严格模式下抛出TypeError异常。<br>都不是，将该值设置为属性的值。</p><ul><li>Getter和Setter</li></ul><p>属性分为数据属性和访问器属性。<br>数据属性拥有value、writable、configurable和enumberable特性，而访问器属性拥有configurable、enumberable、[[Get]]和[[Set]]特性。</p><ul><li>存在性</li></ul><p>myObject.a的属性访问返回值可能是undefined，但是这个值有可能是属性中存储的undefined，也可能是因为属性不存在返回的undefined。可以通过hasOwnProperty()来检查某一对象是否有某一属性。<br>枚举<br>可枚举相当于”可以出现在对象属性的遍历中”，可以使用for…in循环来遍历对象的可枚举属性。<br>可使用myObject.propertyIsEnumerable(“a”)来检查指定的属性名是否直接存在于某一对象中。<br>Object.keys(..)会返回一个数组，包含所有的可枚举属性。</p><h4 id="3-4-遍历"><a href="#3-4-遍历" class="headerlink" title="3.4 遍历"></a>3.4 遍历</h4><p>使用for..in遍历对象是无法直接获取属性值的，因为它实际上遍历的是对象中的所有可枚举属性，你需要手动获取属性值。<br>使用ES6中的for..of语法来遍历数据结构（数组、对象，等等）中的值，for..of会寻找内置或者自定义的@@interator对象并调用它的next()方法来遍历数据值。</p><h3 id="第4章-混合对象“类”"><a href="#第4章-混合对象“类”" class="headerlink" title="第4章 混合对象“类”"></a>第4章 混合对象“类”</h3><h4 id="4-1-类理论"><a href="#4-1-类理论" class="headerlink" title="4.1 类理论"></a>4.1 类理论</h4><p>面向对象编程强调的是数据和操作数据的行为本质是相互关联的，因此好的设计就是把数据以及和它相关的行为打包（或者说封装）起来。这在正式的计算机科学中有时被称为数据结构。</p><h4 id="4-2-类的机制"><a href="#4-2-类的机制" class="headerlink" title="4.2 类的机制"></a>4.2 类的机制</h4><ul><li>建造</li></ul><p>为了获得真正可以交互的对象，我们必须按照类来实例化一个东西，这个东西通常被称为实例，有需要的话，我们可以直接在实例上调用方法并访问其所有公有数据属性。<br>这个对象就是类中描述的所以特性的一份副本。</p><ul><li>构造函数</li></ul><p>类实例是由一个特殊的类方法构造的，这个方法名通常和类名相同，被称为构造函数，这个方法的任务就是初始化实例所需要的所有信息。</p><h4 id="4-3-类的继承"><a href="#4-3-类的继承" class="headerlink" title="4.3 类的继承"></a>4.3 类的继承</h4><p>在面向类的语言中，你可以先定义一个类，然后定义一个继承前者的类，后者通常被称为“子类”，前者通常被称为“父类”。<br>定义好一个子类之后，相当于父类来说他就是一个独立并且完全不同的类。子类会包含父类行为的原始副本，但是也可以重写所有继承的行为甚至定义新行为。</p><ul><li>多态</li></ul><p>相对多态：任何方法都可以引用继承层次中高层的方法（无论高层的方法名和当前方法名是否相同）。之所以说“相对”是因为我们并不会定义想要访问的绝对继承层次，而是使用相对引用“查找上一层”。<br>多态的另一个方面是，在继承链的不同层次中一个方法名可以被多次定义，当调用方法时会自动选择合适的定义。</p><ul><li>多重继承<br>有些面向类的语言允许你继承多个“类”。多重继承意味着所有父类的定义都会被复制到子类中。<br>相比之下，JavaScript本身并不提供“多重继承”功能。但是可以使用一些方法来实现多重继承。</li></ul><h4 id="4-4-混入"><a href="#4-4-混入" class="headerlink" title="4.4 混入"></a>4.4 混入</h4><ul><li>显示混入<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 非常简单的 mixin(..) 例子 :</span><span class="token keyword">function</span> <span class="token function">mixin</span><span class="token punctuation">(</span> <span class="token parameter">sourceObj<span class="token punctuation">,</span> targetObj</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> sourceObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 只会在不存在的情况下复制</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> targetObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> sourceObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> targetObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> Vehicle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">engines</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token function-variable function">ignition</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Turning on my engine."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">drive</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ignition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Steering and moving forward!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> Car <span class="token operator">=</span> <span class="token function">mixin</span><span class="token punctuation">(</span> Vehicle<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">wheels</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token function-variable function">drive</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Vehicle<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Rolling on all "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wheels <span class="token operator">+</span> <span class="token string">" wheels!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>mixin(..)的工作原理：它会遍历sourceObj的属性，如果在targetObj没有这个属性就会进行复制。由于我们是在目标对象初始化之后进行复制，因此一定要小心不要覆盖目标对象的原有属性。<br>如果是先进行复制然对目标对象进行特殊化处理的话，就可以跳过存在性检查。不过这种方法并不好用并且效率更低。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 另一种混入函数， 可能有重写风险</span><span class="token keyword">function</span> <span class="token function">mixin</span><span class="token punctuation">(</span> <span class="token parameter">sourceObj<span class="token punctuation">,</span> targetObj</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> sourceObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> sourceObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> targetObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> Vehicle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 首先创建一个空对象并把 Vehicle 的内容复制进去</span><span class="token keyword">var</span> Car <span class="token operator">=</span> <span class="token function">mixin</span><span class="token punctuation">(</span> Vehicle<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 然后把新内容复制到 Car 中</span><span class="token function">mixin</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">wheels</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token function-variable function">drive</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Car <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寄生继承：显示混入模式的一种变体，它既是显示的又是隐式的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//“传统的 JavaScript 类” Vehicle</span><span class="token keyword">function</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>engines <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">Vehicle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">ignition</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Turning on my engine."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Vehicle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">drive</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ignition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Steering and moving forward!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//“寄生类” Car</span><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 首先， car 是一个 Vehicle</span>    <span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 接着我们对 car 进行定制</span>    car<span class="token punctuation">.</span>wheels <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment">// 保存到 Vehicle::drive() 的特殊引用</span>    <span class="token keyword">var</span> vehDrive <span class="token operator">=</span> car<span class="token punctuation">.</span>drive<span class="token punctuation">;</span>        <span class="token comment">// 重写 Vehicle::drive()</span>    car<span class="token punctuation">.</span><span class="token function-variable function">drive</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">vehDrive</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>        <span class="token string">"Rolling on all "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wheels <span class="token operator">+</span> <span class="token string">" wheels!"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> car<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myCar<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发动引擎。</span><span class="token comment">// 手握方向盘！</span><span class="token comment">// 全速前进</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们复制一份Vehicle父类（对象）的定义，然后混入子类（对象）的定义，然后用这个复合对象构建实例。</p><ul><li>隐式混入<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Something <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">cool</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Something<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Something<span class="token punctuation">.</span>greeting<span class="token punctuation">;</span> <span class="token comment">// "Hello World"</span>Something<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">var</span> Another <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">cool</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 隐式把 Something 混入 Another</span>        Something<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Another<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Another<span class="token punctuation">.</span>greeting<span class="token punctuation">;</span> <span class="token comment">// "Hello World"</span>Another<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment">// 1（count 不是共享状态）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>通过在构造函数调用或者方法调用中使用Something.cool.call(this)，我们实际上“借用”了函数Something.cool()并在Another的上下文中调用了它（通过this绑定），最终的结果就是Something.cool()中的夫妇只操作都会在Another对象上而不是Something对象上。</p><h3 id="第5章-原型"><a href="#第5章-原型" class="headerlink" title="第5章 原型"></a>第5章 原型</h3><h4 id="5-1-Prototype"><a href="#5-1-Prototype" class="headerlink" title="5.1 [[Prototype]]"></a>5.1 [[Prototype]]</h4><ul><li><p>Object.prototype<br>所有普通的[[Prototype]]链最终都会指向内置的Object.prototype，它包含JavaScript中许多通用的功能。</p></li><li><p>属性设置和屏蔽<br>给一个对象设置属性并不仅仅是添加一个新属性或者修改已有的属性值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">myObject<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果myObject对象中包含名为foo的普通数据访问属性，这条语句只会修改已有的属性值。<br>如果foo既出现在myObject也出现在myObject的[[Prototype]]链上，那么myObject中的foo属性机就会屏蔽原型链上层的foo属性。<br>如果foo不是直接存在于myObject中，[[Prototype]]链就会被遍历，如果原型链上找不到foo，就会在myObject上添加一个foo属性。如果原型链上存在foo属性，可能会出现以下三种情况：</p></li></ul><ol><li>原型链上存在名为foo的普通数据访问属性并且没有被标记为只读，那么就会在myObject中添加一个名为foo的新属性，它是屏蔽属性。</li><li>原型链上存在foo，但是foo被标记为只读，那么无法修改已有属性或者在myObject上创建屏蔽属性，如果在严格模式下，代码会抛出一个错误。否则，该赋值语句会被忽略，总之，不会发生屏蔽。</li><li>原型脸上存在的foo是一个setter，那就一定会调用这 个setter，foo不会被添加到myObject，也不会重新定义foo这个setter。</li></ol><h4 id="5-2-“类”"><a href="#5-2-“类”" class="headerlink" title="5.2 “类”"></a>5.2 “类”</h4><ul><li>“构造函数”<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">;</span>      <span class="token comment">//true</span><span class="token keyword">var</span> a  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">;</span>     <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>实际上，Foo函数经常被认为是一个构造函数，其实构造函数和普通函数没有任何区别，函数本身并不是构造函数，但是使用new关键字之后，就会把这个函数调用编程一个“构造函数”调用。</p><h4 id="5-3-（原型）继承"><a href="#5-3-（原型）继承" class="headerlink" title="5.3 （原型）继承"></a>5.3 （原型）继承</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>label</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> label<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 我们创建了一个新的 Bar.prototype 对象并关联到 Foo.prototype</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注意！ 现在没有 Bar.prototype.constructor 了</span><span class="token comment">// 如果你需要这个属性的话可能需要手动修复一下它</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myLabel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"obj a"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">myName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "a"</span>a<span class="token punctuation">.</span><span class="token function">myLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "obj a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查”类“关系<br>在传统的面向类环境中，检查一个实例（JS中的对象）的继承祖先（JS中的委托关联）通常被称为内省（或者反射）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 非常简单： b 是否出现在 c 的 [[Prototype]] 链中？</span>b<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ES5中，标准的方法</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">//非标准方法</span>a<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-对象关联"><a href="#5-4-对象关联" class="headerlink" title="5.4 对象关联"></a>5.4 对象关联</h4><p>[[Prototype]]机制急就是存在于对象中的一个内部链接，它会引用其它对象。<br>通常来说，这个链接的作用是：如果在对象上没有找到需要的属性或者方法引用，引擎就会继续在[[Prototype]]关联的对象上进行查找。同理，如果在后者中页没有找到需要的引用就会继续查找它的[[Prototype]]。以此类推，这一系列对象的链接被称为“原型链”。</p><ul><li><p>创建关联</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">something</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Tell me something good..."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span>bar<span class="token punctuation">.</span><span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tell me something good...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关联关系是备用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> anotherObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">cool</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"cool!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> myObject <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> anotherObject <span class="token punctuation">)</span><span class="token punctuation">;</span>myObject<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//"cool!"           //直接委托</span>myObject<span class="token punctuation">.</span><span class="token function-variable function">doCool</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内部委托！</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>myObject<span class="token punctuation">.</span><span class="token function">doCool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "cool!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部委托可以让API接口更加清晰。</p></li></ul><h3 id="第6章-行为委托"><a href="#第6章-行为委托" class="headerlink" title="第6章 行为委托"></a>第6章 行为委托</h3><h4 id="6-1-面向委托的设计"><a href="#6-1-面向委托的设计" class="headerlink" title="6.1 面向委托的设计"></a>6.1 面向委托的设计</h4><p>委托行为意味着某些对象在找不到属性或者方法引用时会把这个请求委托给另一个对象。<br>互相委托（禁止）<br>禁止在两个或两个以上互相（双向）委托的对象之间创建循环委托。之所以要禁用互相委托，是因为引擎的开发者们发现在设置时检查（并禁止）一次无线循环引用要更加高效，否则每次从对象中查找属性时都要进行检查。</p><h4 id="6-2-类与对象"><a href="#6-2-类与对象" class="headerlink" title="6.2 类与对象"></a>6.2 类与对象</h4><p>使用纯JavaScript实现类风格的代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token parameter">width<span class="token punctuation">,</span>height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">||</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">||</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$elem <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">Widget</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$where</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$elem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$elem<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">"px"</span>        <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span> $where <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token parameter">width<span class="token punctuation">,</span>height<span class="token punctuation">,</span>label</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用“super” 构造函数</span>    <span class="token function">Widget</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> label <span class="token operator">||</span> <span class="token string">"Default"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$elem <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span> <span class="token string">"&lt;button>"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// 让 Button“继承” Widget</span><span class="token class-name">Button</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> <span class="token class-name">Widget</span><span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重写 render(..)</span><span class="token class-name">Button</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$where</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//“super” 调用</span>    <span class="token class-name">Widget</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> $where <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$elem<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Button</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Button '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">+</span> <span class="token string">"' clicked!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span> document <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> $body <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span> document<span class="token punctuation">.</span>body <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"World"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    btn1<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> $body <span class="token punctuation">)</span><span class="token punctuation">;</span>    btn2<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> $body <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中出现了丑陋的显示伪多态，即通过Widget.call和Widget.prototype.render.call从子类方法中引用父类中的基础方法。</p><p>ES6的class语法糖</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">width<span class="token punctuation">,</span>height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">||</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">||</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$elem <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">$where</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$elem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$elem<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>                <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">"px"</span>            <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span> $where <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">Widget</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">width<span class="token punctuation">,</span>height<span class="token punctuation">,</span>label</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span> width<span class="token punctuation">,</span> height <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> label <span class="token operator">||</span> <span class="token string">"Default"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$elem <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span> <span class="token string">"&lt;button>"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">$where</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span> $where <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$elem<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Button '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">+</span> <span class="token string">"' clicked!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">$</span><span class="token punctuation">(</span> document <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> $body <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span> document<span class="token punctuation">.</span>body <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"World"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    btn1<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> $body <span class="token punctuation">)</span><span class="token punctuation">;</span>    btn2<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> $body <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用对象关联委托实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Widget <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">width<span class="token punctuation">,</span>height</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">||</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">||</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$elem <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">insert</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$where</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$elem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$elem<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">"px"</span>            <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span> $where <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> Button <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> Widget <span class="token punctuation">)</span><span class="token punctuation">;</span>Button<span class="token punctuation">.</span><span class="token function-variable function">setup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">width<span class="token punctuation">,</span>height<span class="token punctuation">,</span>label</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 委托调用</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span> width<span class="token punctuation">,</span> height <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> label <span class="token operator">||</span> <span class="token string">"Default"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$elem <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span> <span class="token string">"&lt;button>"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Button<span class="token punctuation">.</span><span class="token function-variable function">build</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$where</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 委托调用</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> $where <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$elem<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Button<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Button '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">+</span> <span class="token string">"' clicked!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span> document <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> $body <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span> document<span class="token punctuation">.</span>body <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> Button <span class="token punctuation">)</span><span class="token punctuation">;</span>    btn1<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> Button <span class="token punctuation">)</span><span class="token punctuation">;</span>    btn2<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"World"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    btn1<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span> $body <span class="token punctuation">)</span><span class="token punctuation">;</span>    btn2<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span> $body <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-5-内省"><a href="#6-5-内省" class="headerlink" title="6.5 内省"></a>6.5 内省</h4><p>自省就是检查实例的类型。类实例的自省主要目的是通过创建方式来判断对象的结构和功能。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* .. */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> Bar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> Foo <span class="token punctuation">)</span><span class="token punctuation">;</span>Bar<span class="token operator">...</span><span class="token keyword">var</span> b1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> Bar <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内省</span><span class="token comment">// 让 Foo 和 Bar 互相关联</span>Foo<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span> Bar <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span> Bar <span class="token punctuation">)</span> <span class="token operator">===</span> Foo<span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// 让 b1 关联到 Foo 和 Bar</span>Foo<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span> b1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>Bar<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span> b1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span> b1 <span class="token punctuation">)</span> <span class="token operator">===</span> Bar<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows11系统WSL2安装记录</title>
      <link href="/2021-12-16-windows11-xi-tong-wsl2-an-zhuang-ji-lu.html"/>
      <url>/2021-12-16-windows11-xi-tong-wsl2-an-zhuang-ji-lu.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、需求场景"><a href="#一、需求场景" class="headerlink" title="一、需求场景"></a>一、需求场景</h3><p>今天在安装<code>Docker Desktop</code>时，出现提示<code>WSL2 installation is incomplete.</code>：<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdigcn.png"><br>于是，开始动手安装<code>WSL2</code>。</p><h3 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h3><ol><li><p>确保<code>控制面板</code>–<code>程序</code>–<code>Windows功能</code>中启用<code>适用于Linux的Windows子系统</code>及<code>虚拟机平台</code>;<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdi2Xq.png"></p></li><li><p>管理员身份运行<code>PowerShell</code>，执行<code>wsl --install</code>，并不会像官方文档介绍的那样<code>安装运行适用于 Linux 的 Windows 子系统 (WSL) 所需的全部内容。</code>，而是出现<code>wsl</code>命令用法的帮助文档。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdic1s.png"><br>查阅各种资料，使用<code>wsl --install</code>依然无效，只能改用<a href="https://docs.microsoft.com/zh-cn/windows/wsl/">WSL文档</a>中的<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">旧版本的手动安装步骤</a>进行安装。</p></li><li><p>按照<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">旧版本的手动安装步骤</a>进行安装，最终顺利安装完成。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdi6pj.png"></p></li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/">WSL文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS常用实现总结</title>
      <link href="/2021-12-15-css-chang-yong-shi-xian-zong-jie.html"/>
      <url>/2021-12-15-css-chang-yong-shi-xian-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、文本超长省略"><a href="#一、文本超长省略" class="headerlink" title="一、文本超长省略"></a>一、文本超长省略</h3><p>溢出的前提条件是宽度超出了，所以要确保元素有宽度确定，这样才能配合下列代码实现溢出效果。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 单行溢出 */</span><span class="token selector">.oneline-overflow</span> <span class="token punctuation">&#123;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 多行溢出 */</span><span class="token selector">.multiline-overflow</span><span class="token punctuation">&#123;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>    <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>    <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>    <span class="token comment">/* 设置行数 */</span>    <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、浏览器12px以下字号设置"><a href="#二、浏览器12px以下字号设置" class="headerlink" title="二、浏览器12px以下字号设置"></a>二、浏览器12px以下字号设置</h3><p>大部分常用浏览器上显示字体最小为<code>12px</code>，css设置小于<code>12px</code>，显示的时候还是<code>12px</code>大小，可以利用css中的<code>transform</code>或者<code>zoom</code>来缩小：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.small-font</span><span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>                 <span class="token comment">/* 以此为基准进行缩放 */</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transform-origin</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>          <span class="token comment">/* 设置缩放起始位置 */</span>        <span class="token comment">/* 利用transform: scale()缩小字体，虽然字体会变小，但是该元素所占的空间不会跟着缩放, 可以配合maring来调整位置 */</span>    <span class="token property">margin</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>     <span class="token comment">/* 如果不想要上述效果，可以使用zoom进行缩放 */</span>    <span class="token property">zoom</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 浏览器兼容处理 */</span><span class="token comment">/* IE、FF没有字体最小限制，可以直接设置字体大小 */</span><span class="token selector">.small-font-fix</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 20*0.5px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、隐藏滚动条"><a href="#三、隐藏滚动条" class="headerlink" title="三、隐藏滚动条"></a>三、隐藏滚动条</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box1::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="四、三角形符号"><a href="#四、三角形符号" class="headerlink" title="四、三角形符号"></a>四、三角形符号</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 向上的三角形 */</span><span class="token selector">.triangle-up</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 100px solid red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 向右的三角形 */</span><span class="token selector">.triangle-right</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 100px solid red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 向右上的三角形 */</span><span class="token selector">.triangle-top-right</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid red<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 向左下的三角形 */</span><span class="token selector">.triangle-top-right</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid red<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 其他方向类推即可 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、解决图片底部存在间隙问题"><a href="#五、解决图片底部存在间隙问题" class="headerlink" title="五、解决图片底部存在间隙问题"></a>五、解决图片底部存在间隙问题</h3><p>出现间隙的原因：图片文字等inline元素默许是跟父级元素的baseline对齐，而baseline又和底边有一定间距。<br>解决方法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 设置图片元素的垂直对齐方式 */</span><span class="token selector">.img</span> <span class="token punctuation">&#123;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 设为块级元素 */</span><span class="token selector">.img</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 父元素中没有别的元素时，可以设置父元素行高为0 */</span><span class="token selector">.img-box</span> <span class="token punctuation">&#123;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、多行文字两端对齐"><a href="#六、多行文字两端对齐" class="headerlink" title="六、多行文字两端对齐"></a>六、多行文字两端对齐</h3><p><code>H5</code>或<code>web</code>端：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 退换货政策 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>refund-policy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退换货政策<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1.收到货品七天内可申请退换货（以签收日为准起始7天内），退换商品需保证包装及吊牌完好，未经穿着、洗涤、人为损坏、加工等不影响二次销售的情况我们的产品不满意，我们将提供退换货的服务，对于贴身衣服（内裤、袜子等），非质量问题，不予退换。若交易已完成，发现质量问题，请在交易完成后1客服沟通协商处理；对于参与多件多折、多金额段满减等产生差价的商品产生局部退货时，需要重新计算商品的价格，按实际收货的商品件数和金额来计算修改实际退款金额。换货仅支持调换同款尺码。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>2.非质量问题退换货买家需承担运费，有质量问题的商品请先与我们联系，关于质量问题和发错商品的，我们承担运费。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>3.退货时发票需跟随商品同时退回。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>4.仓库确认收货后，退款将在5个工作日内退还，换货的商品也将在5个工作日内发出。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.refund-policy </span><span class="token punctuation">&#123;</span><span class="token property">padding</span><span class="token punctuation">:</span> 0 30px<span class="token punctuation">;</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token selector">.title </span><span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 28rpx<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 30rpx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content </span><span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> pre-line<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>微信小程序：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 此种标签写法，内部使用了换行符，安卓手机上文本可以两端对齐，ios上无效 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>refund-policy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退换货政策<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1.收到货品七天内可申请退换货（以签收日为准起始7天内），退换商品需保证包装及吊牌完好，未经穿着、洗涤、人为损坏、加工等不影响二次销售的情况下，如您对我们的产品不满意，我们将提供退换货的服务，对于贴身衣服（内裤、袜子等），非质量问题，不予退换。若交易已完成，发现质量问题，请在交易完成后15天内联系客服沟通协商处理；对于参与多件多折、多金额段满减等产生差价的商品产生局部退货时，需要重新计算商品的价格，按实际收货的商品件数和金额来计算优惠金额，修改实际退款金额。换货仅支持调换同款尺码。\n2.非质量问题退换货买家需承担运费，有质量问题的商品请先与我们联系，关于质量问题和发错商品的，我们承担运费。\n3.退货时发票需跟随商品同时退回；\n4.仓库确认收货后，退款将在5个工作日内退还，换货的商品也将在5个工作日内发出。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 为了兼容ios，将文本拆分 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>refund-policy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退换货政策<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1.收到货品七天内可申请退换货（以签收日为准起始7天内），退换商品需保证包装及吊牌完好，未经穿着、洗涤、人为损坏、加工等不影响二次销售的情况下，如您对我们的产品不满意，我们将提供退换货的服务，对于贴身衣服（内裤、袜子等），非质量问题，不予退换。若交易已完成，发现质量问题，请在交易完成后15天内联系客服沟通协商处理；对于参与多件多折、多金额段满减等产生差价的商品产生局部退货时，需要重新计算商品的价格，按实际收货的商品件数和金额来计算优惠金额，修改实际退款金额。换货仅支持调换同款尺码。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.非质量问题退换货买家需承担运费，有质量问题的商品请先与我们联系，关于质量问题和发错商品的，我们承担运费。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3.退货时发票需跟随商品同时退回。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4.仓库确认收货后，退款将在5个工作日内退还，换货的商品也将在5个工作日内发出。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.refund-policy </span><span class="token punctuation">&#123;</span><span class="token property">padding</span><span class="token punctuation">:</span> 0 30px<span class="token punctuation">;</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token selector">.title </span><span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 28rpx<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 30rpx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content </span><span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> pre-line<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 为了兼容ios</span><span class="token selector">.refund-policy </span><span class="token punctuation">&#123;</span><span class="token property">padding</span><span class="token punctuation">:</span> 0 30px<span class="token punctuation">;</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token selector">.content </span><span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、不同大小文字底部对齐"><a href="#七、不同大小文字底部对齐" class="headerlink" title="七、不同大小文字底部对齐"></a>七、不同大小文字底部对齐</h3><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 利用vertical-align，看效果选择</span><span class="token selector">.box </span><span class="token punctuation">&#123;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span>    <span class="token comment">// 或</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 利用flex布局的align-items</span><span class="token selector">.box </span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span>    <span class="token comment">// 或</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用配置</title>
      <link href="/2021-12-15-git-chang-yong-pei-zhi.html"/>
      <url>/2021-12-15-git-chang-yong-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、设置用户名和邮箱"><a href="#一、设置用户名和邮箱" class="headerlink" title="一、设置用户名和邮箱"></a>一、设置用户名和邮箱</h3><p>全局设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$  <span class="token function">git</span> config --global user.name  <span class="token string">"xxxx"</span>$  <span class="token function">git</span> config --global user.email  <span class="token string">"xxxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>项目单独设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$  <span class="token function">git</span> config user.name  <span class="token string">"xxxx"</span>$  <span class="token function">git</span> config user.email  <span class="token string">"xxxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看全局配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$  <span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前项目配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">方法一：$  <span class="token function">git</span> config --local --list方法二（项目根目录下）：$ <span class="token builtin class-name">cd</span> .git$ <span class="token function">cat</span> config方法三：$ <span class="token function">git</span> config user.name $ <span class="token function">git</span> config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、配置多个SSH秘钥"><a href="#二、配置多个SSH秘钥" class="headerlink" title="二、配置多个SSH秘钥"></a>二、配置多个SSH秘钥</h3><p>在公司电脑上，有时需要同时访问公司私有gitlab和个人github仓库，用到的ssh秘钥不同，需要以下简单配置。  </p><ol><li>利用公司邮箱生成的ssh密钥对<code>id_rsa</code>及<code>id_rsa.pub</code></li><li>利用个人邮箱生成ssh密钥对<code>id_rsa.github</code>及<code>id_rsa.github.pub</code></li><li>将上述密钥对的公钥<code>id_rsa.pub</code>及<code>id_rsa.github.pub</code>分别配置到<code>gitlab</code>及<code>github</code>平台上。</li><li>进入<code>~/.ssh/</code>目录，执行<code>touch config</code>创建<code>config</code>文件，执行<code>vim config</code>，添加如下内容：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host *github.com    User <span class="token comment">### // 用户名</span>    HostName github.com    PreferredAuthentications publickey    IdentityFile ~/.ssh/id_rsa.github    ServerAliveInterval <span class="token number">300</span>    ServerAliveCountMax <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>按下<code>ESC</code>，输入<code>:wq</code>，（保存并退出）即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript之Event Loop</title>
      <link href="/2021-12-14-javascript-zhi-event-loop.html"/>
      <url>/2021-12-14-javascript-zhi-event-loop.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、事件循环"><a href="#一、事件循环" class="headerlink" title="一、事件循环"></a>一、事件循环</h3><p>JS中的任务分为<code>同步任务</code>和<code>异步任务</code>。 </p><p>同步任务都在主线程（JS引擎线程）上依次执行，会形成一个<code>执行栈</code>。</p><p>异步任务由浏览器渲染进程中的相应线程（比如定时器线程和异步网络请求线程）管理，当异步任务有了运行结果，事件触发线程就会将异步任务的事件回调放到<code>任务队列</code>之中。</p><p>一旦主线程<code>执行栈</code>中的所有同步任务执行完毕，主线程就会读取<code>任务队列</code>中的任务添加到<code>执行栈</code>中 ，继续开始执行，执行完毕后，就会再去任务队列中读取，这中循环往复的执行机制就是<code>事件循环</code>。</p><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2023/02/14/pSTDebT.png"></p><p>示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">setTimeoutCallBack</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器回调'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">httpCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http请求回调'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 同步任务</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步任务1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 异步定时任务</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>setTimeoutCallBack<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 异步http请求任务</span>ajax<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/info'</span><span class="token punctuation">,</span> httpCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 同步任务</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步任务2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码执行过程：</p><ol><li>执行<code>console.log(&#39;同步任务1&#39;)</code>。</li><li>执行<code>setTimeout(setTimeoutCallBack, 1000);</code>，会将该异步任务移交给定时器线程，定时器线程在1s 后将<code>setTimeoutCallBack</code> 这个回调交给事件触发线程处理，事件触发线程收到回调后把它加入到事件触发线程所管理的任务队列中等待执行。</li><li>执行<code>ajax.get(&#39;/info&#39;, httpCallback);</code>，会将该异步任务移交给异步http请求线程，http请求线程在请求结束后将<code>httpCallback</code>这个回调交由事件触发线程处理，事件触发线程收到 回调后把它加入到事件触发线程所管理的事件队列中等待执行。</li><li>执行<code>console.log(&#39;同步任务2&#39;)</code>。</li><li>至此执行栈中的任务执行完毕，JS引擎线程已经空闲，开始向事件触发线程发起询问，询问事件触发线程的任务队列中是否有需要执行的回调函数，如果有将任务队列中的回调加入执行栈中，开始执行回调；如果任务队列中没有回调，JS引擎线程会一直发起询问，直到有为止。</li></ol><h3 id="二、宏任务-amp-微任务"><a href="#二、宏任务-amp-微任务" class="headerlink" title="二、宏任务 &amp; 微任务"></a>二、宏任务 &amp; 微任务</h3><h4 id="1-宏任务-macrotask-task"><a href="#1-宏任务-macrotask-task" class="headerlink" title="1.宏任务(macrotask|task)"></a>1.宏任务(macrotask|task)</h4><p>本质: 宿主（Node或浏览器）发起的任务。<br>主要包含：</p><ul><li><code>整体代码script</code></li><li><code>setTimeout</code></li><li><code>setInterval</code></li><li><code>I/O</code></li><li><code>UI交互事件</code></li><li><code>postMessage</code></li><li><code>MessageChannel</code>（Web Worker）</li><li><code>setImmediate</code>（setTimeout(fn, 0)）</li></ul><h4 id="2-微任务-microtask"><a href="#2-微任务-microtask" class="headerlink" title="2.微任务(microtask)"></a>2.微任务(microtask)</h4><p>本质：Javascript 引擎发起的任务。<br>主要包含: </p><ul><li><code>process.nextTick(Node.js)</code></li><li><code>Promise.then</code></li><li><code>catch</code>、<code>finally</code></li><li><code>MutationObserver</code>(DOM变化观察器)</li></ul><p>任务队列中分为<code>宏任务队列</code>和<code>微任务队列</code>，每执行一次任务都可能注册新的宏任务或微任务到相应的任务队列中，遵循<code>每执行一个宏任务，就会清空一次任务队列中的所有微任务</code>这一循环规则。<br>大致过程如下：</p><ul><li>一开始整个脚本作为一个宏任务执行</li><li>执行过程中同步代码直接执行，宏任务进入宏任务队列，微任务进入微任务队列</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>微任务执行完成，GUI线程开始渲染工作</li><li>渲染完毕后，JS线程继续接管，开始下一个宏任务，依次循环</li></ul><h3 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h3><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pro'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        i <span class="token operator">==</span> <span class="token number">99</span> <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'then'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印结果</span>proendthen setTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码执行过程：</p><ol><li>整段代码作为宏任务执行，遇到<code>setTimeout()</code>分配到宏任务队列中；</li><li>遇到<code>new Promise</code>，其中的代码为同步代码，立即执行。打印<code>pro</code>；</li><li>将<code>then</code>的回调分配到微任务队列中；</li><li>遇到同步代码<code>console.log</code>，打印<code>end</code>；</li><li>至此主代码宏任务执行结束；</li><li>将微任务队列中的代码提取到主线程开始执行，打印<code>then</code>；</li><li>微任务队列中执行完毕后，读取宏任务队列中的下一个宏任务开始执行，打印<code>setTimeout</code>。</li></ol><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><p>微任务和宏任务嵌套创建：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记作 set1</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// set4</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// pro2</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 记作 pro1</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// set3</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 记作 set2</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 记作 pro3</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 代码打印结果</span><span class="token number">1</span><span class="token number">6</span><span class="token number">7</span><span class="token number">2</span><span class="token number">4</span><span class="token number">5</span><span class="token number">9</span><span class="token number">10</span><span class="token number">11</span><span class="token number">8</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码执行过程：</p><ol><li><p>整体代码作为第一个宏任务进入执行栈中开始执行。打印<code>1</code>；</p><table> <tr>     <th style="background:#ccc">主线程</th> <th style="background:#ccc" colspan="2">Event Queue</th> </tr> <tr>     <td>执行栈</td>     <td>宏任务队列</td>     <td>微任务队列</td> </tr> <tr>     <td>整体js代码</td>     <td></td>     <td></td> </tr> <tr>     <td></td>     <td></td>     <td></td> </tr> <tr>     <td></td>     <td></td>     <td></td> </tr></table></li><li><p>遇到<code>set1</code>, 将<code>set1回调</code>分发到宏任务队列中。</p><table> <tr>     <th style="background:#ccc">主线程</th>     <th style="background:#ccc" colspan="2">Event Queue</th> </tr> <tr>     <td>执行栈</td>     <td>宏任务队列</td>     <td>微任务队列</td> </tr> <tr>     <td>整体js代码</td>     <td>set1回调</td>     <td></td> </tr> <tr>     <td></td>     <td></td>     <td></td> </tr> <tr>     <td></td>     <td></td>     <td></td> </tr></table></li><li><p>遇到<code>pro1</code>，打印<code>6</code>，将<code>pro1的then回调</code>分发至微任务队列。</p><table> <tr>     <th style="background:#ccc">主线程</th>     <th style="background:#ccc" colspan="2">Event Queue</th> </tr> <tr>     <td>执行栈</td>     <td>宏任务队列</td>     <td>微任务队列</td> </tr> <tr>     <td>整体js代码</td>     <td>set1回调</td>     <td>pro1的then回调</td> </tr> <tr>     <td></td>     <td></td>     <td></td> </tr> <tr>     <td></td>     <td></td>     <td></td> </tr></table></li><li><p>遇到<code>set1</code>, 将<code>set2回调</code>分发到宏任务队列中。</p><table> <tr>     <th style="background:#ccc">主线程</th>     <th style="background:#ccc" colspan="2">Event Queue</th> </tr> <tr>     <td>执行栈</td>     <td>宏任务队列</td>     <td>微任务队列</td> </tr> <tr>     <td>整体js代码</td>     <td>set1回调</td>     <td>pro1的then回调</td> </tr> <tr>     <td></td>     <td>set2回调</td>     <td></td> </tr> <tr>     <td></td>     <td></td>     <td></td> </tr></table></li><li><p><code>整体js代码</code>宏任务至此执行完毕，js引擎读取<code>微任务队列</code>到执行栈中。</p><table> <tr>     <th style="background:#ccc">主线程</th>     <th style="background:#ccc" colspan="2">Event Queue</th> </tr> <tr>     <td>执行栈</td>     <td>宏任务队列</td>     <td>微任务队列</td> </tr> <tr>     <td>pro1的then回调</td>     <td>set1回调</td>     <td></td> </tr> <tr>     <td></td>     <td>set2回调</td>     <td></td> </tr> <tr>     <td></td>     <td></td>     <td></td> </tr></table></li><li><p>将<code>pro1的then回调</code>读取到执行栈中，打印<code>7</code>，将<code>set3的回调</code>分发至宏任务队列。</p><table> <tr>     <th style="background:#ccc">主线程</th>     <th style="background:#ccc" colspan="2">Event Queue</th> </tr> <tr>     <td>执行栈</td>     <td>宏任务队列</td>     <td>微任务队列</td> </tr> <tr>     <td>pro1的then回调</td>     <td>set1回调</td>     <td></td> </tr> <tr>     <td></td>     <td>set2回调</td>     <td></td> </tr> <tr>     <td></td>     <td>set3回调</td>     <td></td> </tr></table></li><li><p><code>pro1的then回调</code>执行完毕，且微任务队列中已经无任务，读取宏任务队列，将<code>set1回调</code>宏任务添加到执行栈中。</p><table> <tr>     <th style="background:#ccc">主线程</th>     <th style="background:#ccc" colspan="2">Event Queue</th> </tr> <tr>     <td>执行栈</td>     <td>宏任务队列</td>     <td>微任务队列</td> </tr> <tr>     <td>set1回调</td>     <td>set2回调</td>     <td></td> </tr> <tr>     <td></td>     <td>set3回调</td>     <td></td> </tr> <tr>     <td></td>     <td></td>     <td></td> </tr></table></li><li><p>打印<code>2</code>，将<code>set4回调</code>分发至宏任务队列；遇到<code>pro2</code>，打印<code>4</code>，将<code>pro2的then回调</code>分发至微任务队列。</p><table> <tr>     <th style="background:#ccc">主线程</th>     <th style="background:#ccc" colspan="2">Event Queue</th> </tr> <tr>     <td>执行栈</td>     <td>宏任务队列</td>     <td>微任务队列</td> </tr> <tr>     <td>set1回调</td>     <td>set2回调</td>     <td>pro2的then回调</td> </tr> <tr>     <td></td>     <td>set3回调</td>     <td></td> </tr> <tr>     <td></td>     <td>set4回调</td>     <td></td> </tr></table></li><li><p><code>set1回调</code>宏任务执行完毕，读取微任务队列到执行栈中。</p><table> <tr>     <th style="background:#ccc">主线程</th>     <th style="background:#ccc" colspan="2">Event Queue</th> </tr> <tr>     <td>执行栈</td>     <td>宏任务队列</td>     <td>微任务队列</td> </tr> <tr>     <td>pro2的then回调</td>     <td>set2回调</td>     <td></td> </tr> <tr>     <td></td>     <td>set3回调</td>     <td></td> </tr> <tr>     <td></td>     <td>set4回调</td>     <td></td> </tr></table></li><li><p>执行<code>pro2的then回调</code>，打印<code>5</code>。执行完毕后，读取下一个宏任务<code>set2回调</code>到执行栈中。</p><table><tr>    <th style="background:#ccc">主线程</th>    <th style="background:#ccc" colspan="2">Event Queue</th></tr><tr>    <td>执行栈</td>    <td>宏任务队列</td>    <td>微任务队列</td></tr><tr>    <td>set2回调</td>    <td>set3回调</td>    <td></td></tr><tr>    <td></td>    <td>set4回调</td>    <td></td></tr><tr>    <td></td>    <td></td>    <td></td></tr></table></li><li><p>打印<code>9</code>，执行<code>pro3</code>，打印<code>10</code>，将<code>pro3的then回调</code>分发到微任务队列中。</p><table><tr>    <th style="background:#ccc">主线程</th>    <th style="background:#ccc" colspan="2">Event Queue</th></tr><tr>    <td>执行栈</td>    <td>宏任务队列</td>    <td>微任务队列</td></tr><tr>    <td>set2回调</td>    <td>set3回调</td>    <td>pro3的then回调</td></tr><tr>    <td></td>    <td>set4回调</td>    <td></td></tr><tr>    <td></td>    <td></td>    <td></td></tr></table></li><li><p><code>set2回调</code>执行完毕，将<code>微任务队列</code>中的<code>pro3的then回调</code>添加到执行栈中。</p><table><tr>    <th style="background:#ccc">主线程</th>    <th style="background:#ccc" colspan="2">Event Queue</th></tr><tr>    <td>执行栈</td>    <td>宏任务队列</td>    <td>微任务队列</td></tr><tr>    <td>pro3的then回调</td>    <td>set3回调</td>    <td></td></tr><tr>    <td></td>    <td>set4回调</td>    <td></td></tr><tr>    <td></td>    <td></td>    <td></td></tr></table></li><li><p>打印<code>11</code>，<code>pro3的then回调</code>执行完毕，将宏任务队列中的<code>set3回调</code>添加到执行栈中。</p><table><tr>    <th style="background:#ccc">主线程</th>    <th style="background:#ccc" colspan="2">Event Queue</th></tr><tr>    <td>执行栈</td>    <td>宏任务队列</td>    <td>微任务队列</td></tr><tr>    <td>set3回调</td>    <td>set4回调</td>    <td></td></tr><tr>    <td></td>    <td></td>    <td></td></tr><tr>    <td></td>    <td></td>    <td></td></tr></table></li><li><p>打印<code>8</code>，<code>set3回调</code>执行完毕，将宏任务队列中的<code>set4回调</code>添加到执行栈中。</p><table><tr>    <th style="background:#ccc">主线程</th>    <th style="background:#ccc" colspan="2">Event Queue</th></tr><tr>    <td>执行栈</td>    <td>宏任务队列</td>    <td>微任务队列</td></tr><tr>    <td>set4回调</td>    <td></td></tr><tr>    <td></td>    <td></td>    <td></td></tr><tr>    <td></td>    <td></td>    <td></td></tr></table></li><li><p>打印<code>3</code>。</p></li></ol><h4 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 记作pro</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记作set</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印结果</span><span class="token number">1</span><span class="token number">2</span><span class="token number">6</span><span class="token number">4</span><span class="token number">3</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码执行流程：</p><ol><li>执行<code>pro</code>，将<code>pro的then回调</code>分发到微任务队列中；</li><li>执行<code>set</code>，将<code>set回调</code>添加到宏任务队列；</li><li>执行<code>async1()</code>，打印<code>1</code>；</li><li>执行<code>const result = await async2()</code>，打印<code>2</code>；同时将<code>console.log(3)</code>分发到微任务队列;</li><li>继续执行主线程中的代码，打印<code>6</code>;</li><li>执行微任务队列中的回调，依次打印<code>4</code>、<code>3</code>;</li><li>执行宏任务队列中的回调，打印<code>5</code>。</li></ol><h4 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">t1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">//  记作pro2</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise3'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise4'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">// 记作pro3</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'t1p'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 记作await pro3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">// 记作pro5</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise5'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise6'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 记作set</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">t2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 记作pro4</span>    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'t2p'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 记作await pro4</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记作pro1</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">t2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印结果</span><span class="token number">1</span> promise3 b promise1 <span class="token number">3</span>endpromise4t1ppromise2t2p<span class="token number">2</span>primise5<span class="token number">4</span>promise6setTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码执行流程：</p><ol><li><p><code>set回调</code>进到宏任务队列；</p></li><li><p>执行<code>t1()</code>，打印<code>1</code>，打印<code>promise3</code>，将<code>pro2的then回调</code>放到微任务队列；</p></li><li><p>打印<code>b</code>，将<code>pro3的then回调</code>放到微任务队列，因为<code>await</code>，之后的代码在<code>pro3的then回调</code>执行后再执行；</p></li><li><p>打印<code>promise1</code>，将<code>pro1的then回调</code>放到微任务队列；</p></li><li><p>执行<code>t2()</code>，打印<code>3</code>，将<code>pro4的then回调</code>放到微任务队列，<code>pro4</code>之后的代码暂不执行；</p></li><li><p>打印<code>end</code>。此时的微任务队列为：</p><table> <tr>     <th style="background: #ccc;">微任务队列</th> </tr> <tr><td>pro2的then回调</td></tr> <tr><td>pro3的then回调</td></tr> <tr><td>pro1的then回调</td></tr> <tr><td>pro4的then回调</td></tr></table></li><li><p>接着开始依次执行微任务队列中的回调。执行<code>pro2的then回调</code>，打印<code>promise4</code>；</p></li><li><p>执行<code>pro3的then回调</code>，打印<code>t1p</code>，将<code>await pro3</code>代码块放到微任务队列；  </p></li><li><p>执行<code>pro1的then回调</code>，打印<code>promise2</code>；  </p></li><li><p>执行<code>pro4的then回调</code>，打印<code>t2p</code>，将<code>await pro4</code>代码放到微任务队列；  </p></li><li><p>执行<code>await pro3</code>代码块，打印<code>2</code>，打印<code>promise5</code>，将<code>pro5的then回调</code>放到微任务队列；</p></li><li><p>执行<code>await pro4</code>，打印<code>4</code>；</p></li><li><p>执行<code>pro5的then回调</code>，打印<code>promise6</code>；</p></li><li><p>微任务队列代码执行完毕，读取宏任务队列，执行<code>set回调</code>，打印<code>setTimeout</code>。</p></li></ol><blockquote><p><strong>知识点总结</strong><br>async/await本质上还是基于Promise的一些封装, 可以理解为，await 以前的代码，相当于与 new Promise 的同步代码，await 以后的代码相当于 Promise.then的回调。<br>await之后的代码必须等await语句执行完成后（包括微任务完成），才能执行后面的，也就是说，只有运行完await语句，才把await语句后面的全部代码加入到微任务队列。</p></blockquote><h3 id="四、参考文章"><a href="#四、参考文章" class="headerlink" title="四、参考文章"></a>四、参考文章</h3><ul><li><a href="https://juejin.cn/post/6844904050543034376">isboyjc.「硬核JS」一次搞懂JS运行机制.掘金. </a></li><li><a href="https://juejin.cn/post/6844904017907154951">娟儿juan.浏览器渲染流程.掘金.</a></li><li><a href="https://segmentfault.com/a/1190000019761557">ipromise.深入前端-彻底搞懂JS的运行机制.segmentfault.</a></li><li><a href="https://blog.csdn.net/u012925833/article/details/89306184">EsunR.总结事件轮询机制，以及宏任务队列与微任务队列.CSDN.</a></li><li><a href="https://cloud.tencent.com/developer/article/1701427">娜姐.宏任务和微任务到底是什么.腾讯云社区.</a>  </li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MessageChannel">MessageChannel</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">postMessage</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setImmediate">setImmediate</a>、<a href="https://developer.mozilla.org/zh-cn/docs/web/api/mutationobserver">mutationObserver</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Event Loop </tag>
            
            <tag> Task </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3动画知识总结</title>
      <link href="/2021-11-29-css3-dong-hua-zhi-shi-zong-jie.html"/>
      <url>/2021-11-29-css3-dong-hua-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h3><h4 id="1-使用keyframes定义动画关键帧"><a href="#1-使用keyframes定义动画关键帧" class="headerlink" title="1.使用keyframes定义动画关键帧"></a>1.使用keyframes定义动画关键帧</h4><p>使用<code>@keyframes</code>在动画序列中定义关键帧的样式来控制CSS动画序列中的中间步骤。<br>使用示例：  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css">// <span class="token property">示例1</span><span class="token punctuation">:</span> 仅定义起始帧和结束帧<span class="token atrule"><span class="token rule">@keyframes</span> my-first-animation</span> <span class="token punctuation">&#123;</span>    <span class="token selector">// form 等价于0%    from</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">// to 等价于100%    to</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>// <span class="token property">示例2</span><span class="token punctuation">:</span> 定义多个关键帧<span class="token atrule"><span class="token rule">@keyframes</span> my-second-animation</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">20%</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token selector">75%</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-使用animation配置动画属性"><a href="#2-使用animation配置动画属性" class="headerlink" title="2.使用animation配置动画属性"></a>2.使用animation配置动画属性</h4><p><code>animation</code>是8个动画属性的简写。这8个动画属性为：  </p><ul><li>animation-name 设置要使用的@keyframes动画的名称</li><li>animation-duration 设置动画一个周期的时长</li><li>animation-delay 设置延时，即设置元素加载完成后多久开始执行动画</li><li>animation-direction 设置动画每次运行完后是反向运行还是重新回到开始位置重复运行</li><li>animation-timing-function 设置动画的速度曲线</li><li>animation-iteration-count 设置动画播放次数</li><li>animation-fill-mode 设置动画执行前后如何为目标元素应用样式</li><li>animation-play-state 设置动画播放状态，正在运行或暂停<br>使用示例：  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> my-first-animation</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">to</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> my-first-animation 2s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>可以用于动画效果的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties">属性清单</a></p><h3 id="二、animation属性详解"><a href="#二、animation属性详解" class="headerlink" title="二、animation属性详解"></a>二、animation属性详解</h3><h4 id="1-animation-delay"><a href="#1-animation-delay" class="headerlink" title="1.animation-delay"></a>1.animation-delay</h4><p>定义动画于何时开始，即从动画应用在元素上到动画开始的这段时间的长度。<br>示例代码：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.ani--first</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> aniFirst<span class="token punctuation">;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> 0s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.ani--second</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> aniSecond<span class="token punctuation">;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span> <span class="token comment">/* aniSecond 延迟 2s 执行*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdirtg.png" alt="animation-delay示意图"></p><h4 id="2-animation-direction"><a href="#2-animation-direction" class="headerlink" title="2.animation-direction"></a>2.animation-direction</h4><p>指示动画是否反向播放</p><ul><li><strong>normal</strong> 每个循环内动画向前循环，换言之，每个动画循环结束，动画重置到起点重新开始，这是默认属性。</li><li><strong>alternate</strong> 动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向，比如，ease-in 在反向时成为ease-out。计数取决于开始时是奇数迭代还是偶数迭代</li><li><strong>reverse</strong> 反向运行动画，每周期结束动画由尾到头运行。</li><li><strong>alternate-reverse</strong> 反向交替，反向开始交替。动画第一次运行时是反向的，然后下一次是正向，后面依次循环。决定奇数次或偶数次的计数从1开始。</li></ul><p>  <a href="https://codepen.io/snaillu/pen/rNOzvWE">animation-direction演示示例</a></p><h4 id="3-animation-timing-function"><a href="#3-animation-timing-function" class="headerlink" title="3.animation-timing-function"></a>3.animation-timing-function</h4><p>用于定义动画的速度曲线，常用值<code>linear</code>、<code>ease</code>、<code>ease-in</code>、<code>ease-out</code>、<code>ease-in-out</code>。这些值其实都是 <code>cubic-bezier(n,n,n,n)</code>的特例。它们被称为贝塞尔曲线。<br>除此之外还有阶梯函数<code>steps(number_of_steps, direction)</code><br>    - <code>number_of_steps</code>：阶梯数（必须是一个正整数），他将动画的总时长按照阶梯数等距划分<br>    - <code>direction</code> ：可选值为<code>start</code>或<code>end</code>，默认end，也可以不写；start表示动画的第一帧会被立即执行,直接从第二帧开始，然后以第一帧结束；end则表示动画从第一帧开始到正常结束；  </p><pre><code>[animation-timing-function演示示例](https://codepen.io/snaillu/pen/MWJERNa)</code></pre><h4 id="4-animation-fill-mode"><a href="#4-animation-fill-mode" class="headerlink" title="4.animation-fill-mode"></a>4.animation-fill-mode</h4><p>设置CSS动画在执行之前和之后如何将样式应用于其目标。</p><ul><li><code>none</code>，默认值，当动画未执行时，动画将不会将任何样式应用于目标，而是已经赋予给该元素的CSS规则来显示该元素。 </li><li><code>forwards</code>，动画完成后，元素状态保持为最后一帧的状态。</li><li><code>backwards</code>，动画将在应用于目标时立即应用第一个关键帧中定义的值，并在animation-delay期间保留此值。</li><li><code>both</code>，上述二者效果都有。  </li></ul><p>  <a href="https://codepen.io/snaillu/pen/rNOzvWE">animation-fill-mode演示示例</a></p><h4 id="5-animation-play-state"><a href="#5-animation-play-state" class="headerlink" title="5.animation-play-state"></a>5.animation-play-state</h4><p>一个动画是否运行或者暂停。可以通过查询它来确定动画是否正在运行。另外，它的值可以被设置为暂停和恢复的动画的重放。<br>    - paused 暂停动画<br>    - running 运行动画  </p><p>  <a href="https://codepen.io/snaillu/pen/LYxOmeR">animation-play-state演示示例</a></p><h4 id="6-animation-iteration-count"><a href="#6-animation-iteration-count" class="headerlink" title="6.animation-iteration-count"></a>6.animation-iteration-count</h4><p>动画结束前运行的次数。可取值<code>infinite</code>、<code>&lt;number&gt;</code>。</p><h3 id="三、进阶用法"><a href="#三、进阶用法" class="headerlink" title="三、进阶用法"></a>三、进阶用法</h3><h4 id="1-利用animation-delay实现简单轮播"><a href="#1-利用animation-delay实现简单轮播" class="headerlink" title="1.利用animation-delay实现简单轮播"></a>1.利用animation-delay实现简单轮播</h4><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.slider__item </span><span class="token punctuation">&#123;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> ani 6s infinite linear both<span class="token punctuation">;</span>        <span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> <span class="token selector">1 to 4 </span><span class="token punctuation">&#123;</span>      &amp;<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token variable">#&#123;$i&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>-1+<span class="token variable">$i</span><span class="token punctuation">)</span>*2s<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> ani</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%, 33.33% </span><span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>     <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">33.34%, 100% </span><span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>     <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DEMO: <a href="https://codepen.io/snaillu/pen/MWJvMQz">https://codepen.io/snaillu/pen/MWJvMQz</a></p><h4 id="2-序列动画"><a href="#2-序列动画" class="headerlink" title="2.序列动画"></a>2.序列动画</h4><p>多个元素使用相同的动画效果时，将动画执行时机依次错开，可形成整齐有序的序列动画效果。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> <span class="token selector">1 to 6 </span><span class="token punctuation">&#123;</span>  .<span class="token property">list__item</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token variable">#&#123;$i&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>-1+<span class="token variable">$i</span><span class="token punctuation">)</span>*0.1s<span class="token punctuation">;</span> <span class="token comment">/*设置每个元素的 animation-delay */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> listAni</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">100% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DEMO: <a href="https://codepen.io/snaillu/pen/vYyqjpm">https://codepen.io/snaillu/pen/vYyqjpm</a></p><p><code>animation-delay</code> 为负值会让动画从它的动画序列中某位置立即开始。 </p><p>如若上述的序列动画要进行无限循环，单纯将<code>animation-iteration-count</code> 设置为 <code>infinite</code>，动画开始时会有延迟。此时，将 <code>animation-delay</code> 设置为负值，提前动画开始执行的时机，当用户看到动画时，动画便已经处于进行中的状态。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> <span class="token selector">1 to 6 </span><span class="token punctuation">&#123;</span>  .<span class="token property">list__item</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token variable">#&#123;$i&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> -<span class="token variable">$i</span>*0.1s<span class="token punctuation">;</span> <span class="token comment">/* 设置animation-delay 为负值*/</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-动态图标"><a href="#3-动态图标" class="headerlink" title="3.动态图标"></a>3.动态图标</h4><p>配合<code>transform</code>来实现图标变化效果。<br>transform中的常用函数：</p><ul><li>平移函数：translateX、translateY、translateZ、translate、translate3d</li><li>缩放函数：scaleX、scaleY、scaleZ、scale、scale3d( number, number, number )</li><li>旋转函数：rotateX、rotateY、rotateZ、rotate、rotate3d( number, number, number, angle)</li><li>倾斜函数：skewX、skewY、skew</li><li>视域：perspective( length )<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token atrule"><span class="token rule">@keyframes</span> spin1</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%,  15% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-15px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">20%,  25% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">35%,  50% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">60%,  75% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>135deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">85%,  100% </span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>135deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>15px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> bgchange</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%,  50% </span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">35%,  50% </span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #42cf69<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">60%,  75% </span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #cf4242<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">85%,  100% </span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #dba528<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>图标变换DEMO: <a href="https://codepen.io/snaillu/pen/MWJEWdR">https://codepen.io/snaillu/pen/MWJEWdR</a><br>loading图标DEMO: <a href="https://codepen.io/snaillu/pen/JjYyvWY">https://codepen.io/snaillu/pen/JjYyvWY</a></li></ul><h3 id="四、CSS动画库"><a href="#四、CSS动画库" class="headerlink" title="四、CSS动画库"></a>四、CSS动画库</h3><h4 id="1-Animista"><a href="#1-Animista" class="headerlink" title="1.Animista"></a>1.Animista</h4><ol><li><p>选择不同的动画<br>我们可以选择想要的动画类型（例如entrance/exist），除了可以选择某个动画（例如，scale-in）外，甚至还可以为该动画选择不同的展示效果（例如： scale-in-right）。</p></li><li><p>定制<br>Animista还提供了一个功能，允许我们定制动画的某些部分，比如</p></li></ol><ul><li>duration</li><li>delay</li><li>direction</li></ul><ol start="3"><li><p>生成css代码<br>选择适合自己需要的动画后，我们可以直接从网站上获取代码，甚者可以进行压缩：</p></li><li><p>下载代码<br>另一个好用的功能是，可以把自己收藏自己喜欢的动画，然后一起下载下来， 或者，我们也可以选择将这些动画的代码复制到一起。</p></li></ol><h4 id="2-Animate-css"><a href="#2-Animate-css" class="headerlink" title="2.Animate.css"></a>2.Animate.css</h4><ol><li>使用npm安装或者CDN引入；<pre class="line-numbers language-none"><code class="language-none">npm install animate.css --save&lt;head&gt;  &lt;link    rel&#x3D;&quot;stylesheet&quot;    href&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;animate.css&#x2F;4.1.1&#x2F;animate.min.css&quot;  &#x2F;&gt;&lt;&#x2F;head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>标签上使用类名<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>animate__animated animate__bounce<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>An animated element<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-Vivify"><a href="#3-Vivify" class="headerlink" title="3.Vivify"></a>3.Vivify</h4></li><li>下载Vivify.min.css</li><li>引入</li><li>元素上添加类名</li></ol><h3 id="五、参考文档"><a href="#五、参考文档" class="headerlink" title="五、参考文档"></a>五、参考文档</h3><ul><li><a href="https://www.runoob.com/css3/css3-animations.html">CSS3动画|菜鸟教程</a>   </li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@keyframes">@keyframes|MDN</a>  </li><li><a href="https://juejin.cn/post/6844903845470945294">2019年了，你还不会CSS动画？</a>  </li><li><a href="https://aotu.io/notes/2016/11/28/css3-animation-properties/index.html">css3 animation 属性众妙</a>  </li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties">css可动画属性</a></li><li><a href="https://cubic-bezier.com/">贝塞尔曲线在线调试</a></li><li><a href="https://animate.style/">Animate.css文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Animation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui中el-table翻页多选实现</title>
      <link href="/2021-11-11-element-ui-zhong-el-table-fan-ye-duo-xuan-shi-xian.html"/>
      <url>/2021-11-11-element-ui-zhong-el-table-fan-ye-duo-xuan-shi-xian.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、功能描述"><a href="#一、功能描述" class="headerlink" title="一、功能描述"></a>一、功能描述</h3><ul><li>实现： 后台管理系统中，经常使用<code>el-table</code>并配合<code>el-pagiation</code>实现表格翻页功能，但是由于每页数据都是翻页后重新从后端拉取的，上一页勾选的数据在翻页后<code>el-table</code>组件并不会存储，需要自行实现。</li><li>版本： <code>&quot;element-ui&quot;: &quot;^2.14.1&quot;</code>。</li></ul><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><ol><li><code>el-table</code>上监听<code>select</code>及<code>select-all</code>事件，进行当前页数据的<code>单选/全选</code>操作；</li><li><code>el-pagination</code>上监听<code>size-change</code>及<code>current-change</code>，进行分页器的页码和页数操作，同时将当前页数据进行存储；</li><li>每页重新拉取数据后，需要将当前页数据已选数据恢复选中状态，主要使用表格的<code>toggleRowSelection</code>方法。<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;root&quot;&gt;      &lt;el-table        ref&#x3D;&quot;multipleTable&quot;        :data&#x3D;&quot;tableData&quot;        border        height&#x3D;&quot;450&quot;        :header-cell-style&#x3D;&quot;&#123; background: &#39;#F5F7FA&#39;, color: &#39;#606266&#39;, textAlign: &#39;center&#39; &#125;&quot;        :cell-style&#x3D;&quot;&#123; textAlign: &#39;center&#39; &#125;&quot;        @select&#x3D;&quot;handleSelectionChange&quot;        @select-all&#x3D;&quot;handleSelectionChange&quot;      &gt;        &lt;el-table-column          type&#x3D;&quot;selection&quot;        &#x2F;&gt;        &lt;el-table-column          prop&#x3D;&quot;id&quot;          label&#x3D;&quot;id&quot;          align&#x3D;&quot;center&quot;        &#x2F;&gt;        &lt;el-table-column          prop&#x3D;&quot;goodsName&quot;          label&#x3D;&quot;商品名称&quot;          align&#x3D;&quot;center&quot;        &#x2F;&gt;        &lt;el-table-column          prop&#x3D;&quot;goodsCode&quot;          label&#x3D;&quot;款号&quot;          align&#x3D;&quot;center&quot;        &#x2F;&gt;        &lt;el-table-column          prop&#x3D;&quot;goodsPrice&quot;          label&#x3D;&quot;吊牌价格（元）&quot;          align&#x3D;&quot;center&quot;        &#x2F;&gt;      &lt;&#x2F;el-table&gt;      &lt;el-pagination        background        style&#x3D;&quot;text-align:right&quot;        layout&#x3D;&quot;total,prev,sizes, pager, next&quot;        :total&#x3D;&quot;goodsTotal&quot;        :page-size&#x3D;&quot;goodsForm.pageInfo.pageSize&quot;        :current-page&#x3D;&quot;goodsForm.pageInfo.pageNum&quot;        @size-change&#x3D;&quot;handleGoodsSizeChange&quot;        @current-change&#x3D;&quot;handleGoodsPageChange&quot;        :page-sizes&#x3D;&quot;[5,10]&quot;      &#x2F;&gt;      &lt;el-row&gt;          &lt;el-button @click&#x3D;&quot;getAllSelectedGoodsId&quot;&gt;打印所有已选数据&lt;&#x2F;el-button&gt;          &#123;&#123; selectedGoodsIdsAll &#125;&#125;      &lt;&#x2F;el-row&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;TableSelect&#39;,  data() &#123;    return &#123;      tableData: [],      goodsTotal: 0,      tableLoading: false,      selectedGoodsIds: [], &#x2F;&#x2F; 当前页中已选数据      selectedGoodsIdsOther: [], &#x2F;&#x2F; 其它页中已选的数据      selectedGoodsIdsAll: [], &#x2F;&#x2F; 所有已选数据      goodsForm: &#123;          pageInfo: &#123;              pageNum: 1,              pageSize: 5          &#125;      &#125;    &#125;  &#125;,  created() &#123;    &#x2F;&#x2F; this.onSearch()    this.onSearchGoods()  &#125;,  methods: &#123;    &#x2F;&#x2F; 切换页码    handleGoodsPageChange(currentPage) &#123;      this.getAllSelectedGoodsId()      this.goodsForm.pageInfo.pageNum &#x3D; currentPage      this.onSearchGoods()    &#125;,    &#x2F;&#x2F; 切换每页条数    handleGoodsSizeChange(currentPage) &#123;      this.getAllSelectedGoodsId()      this.goodsForm.pageInfo.pageSize &#x3D; currentPage      this.onSearchGoods()    &#125;,    &#x2F;&#x2F; 搜索商品    onSearchGoods() &#123;      const loading &#x3D; this.$loading(&#123;        lock: true,        text: &#39;Loading&#39;,        spinner: &#39;el-icon-loading&#39;,        background: &#39;rgba(0, 0, 0, 0.7)&#39;,        target: &#39;.loadingtext&#39;      &#125;);      this.queryGoods(this.goodsForm).then(        (res) &#x3D;&gt; &#123;          this.tableData &#x3D; res.list          this.toggleSelection()          this.goodsTotal &#x3D; res.total          loading.close();        &#125;,        () &#x3D;&gt; &#123;          this.tableLoading &#x3D; false          loading.close();        &#125;      )    &#125;,    &#x2F;&#x2F; 设置表格选中效果    toggleSelection() &#123;      const selectedGoodsIds &#x3D; []      const selectedGoodsIdsOther &#x3D; this.selectedGoodsIdsAll.slice()      this.$nextTick(()&#x3D;&gt;&#123;        this.tableData.forEach(goods &#x3D;&gt; &#123;          if(this.selectedGoodsIdsAll.includes(goods.id))&#123;            this.$refs.multipleTable.toggleRowSelection(goods, true);            &#x2F;&#x2F; 拆分当前页数据和其它页数据            selectedGoodsIds.push(goods.id)            const index &#x3D; selectedGoodsIdsOther.indexOf(goods.id)            selectedGoodsIdsOther.splice(index, 1)          &#125;        &#125;);        this.selectedGoodsIds &#x3D; selectedGoodsIds        this.selectedGoodsIdsOther &#x3D; selectedGoodsIdsOther      &#125;)    &#125;,    &#x2F;&#x2F; 商品选择    handleSelectionChange(tableData) &#123;      this.selectedGoodsIds &#x3D; tableData.map(goods &#x3D;&gt; goods.id)    &#125;,    &#x2F;&#x2F; 获得全部数据    getAllSelectedGoodsId() &#123;      const &#123; selectedGoodsIds, selectedGoodsIdsOther &#125; &#x3D; this      this.selectedGoodsIdsAll &#x3D; [...selectedGoodsIdsOther, ...selectedGoodsIds]    &#125;,    &#x2F;&#x2F; 模拟接口获取数据    queryGoods(params) &#123;        const &#123; pageInfo &#125; &#x3D; params        const &#123; pageNum, pageSize &#125; &#x3D; pageInfo        const data &#x3D; [            &#123;  id: 1, goodsName: &#39;测试商品1&#39;, goodsCode: &#39;000001&#39;, goodsPrice: 101 &#125;,             &#123;  id: 2, goodsName: &#39;测试商品2&#39;, goodsCode: &#39;000002&#39;, goodsPrice: 102 &#125;,             &#123;  id: 3, goodsName: &#39;测试商品3&#39;, goodsCode: &#39;000003&#39;, goodsPrice: 103 &#125;,             &#123;  id: 4, goodsName: &#39;测试商品4&#39;, goodsCode: &#39;000004&#39;, goodsPrice: 104 &#125;,             &#123;  id: 5, goodsName: &#39;测试商品5&#39;, goodsCode: &#39;000005&#39;, goodsPrice: 105 &#125;,            &#123;  id: 6, goodsName: &#39;测试商品6&#39;, goodsCode: &#39;000006&#39;, goodsPrice: 106 &#125;,             &#123;  id: 7, goodsName: &#39;测试商品7&#39;, goodsCode: &#39;000007&#39;, goodsPrice: 107 &#125;,             &#123;  id: 8, goodsName: &#39;测试商品8&#39;, goodsCode: &#39;000008&#39;, goodsPrice: 108 &#125;,             &#123;  id: 9, goodsName: &#39;测试商品9&#39;, goodsCode: &#39;000009&#39;, goodsPrice: 109 &#125;,             &#123;  id: 10, goodsName: &#39;测试商品10&#39;, goodsCode: &#39;0000010&#39;, goodsPrice: 110 &#125;        ]        return new Promise((resolve)&#x3D;&gt;&#123;            setTimeout(()&#x3D;&gt;&#123;                resolve(&#123;                    list: data.slice((pageNum-1)*pageSize, pageNum*pageSize),                    total: data.length                &#125;)            &#125;,1000)        &#125;)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="三、最终效果"><a href="#三、最终效果" class="headerlink" title="三、最终效果"></a>三、最终效果</h3><p><a href="https://snaillu.gitee.io/portfolio/demo/table-select">demo地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> element-ui </tag>
            
            <tag> el-table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript原型与原型链</title>
      <link href="/2021-09-30-javascript-yuan-xing-yu-yuan-xing-lian.html"/>
      <url>/2021-09-30-javascript-yuan-xing-yu-yuan-xing-lian.html</url>
      
        <content type="html"><![CDATA[<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><blockquote><p>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针（<code>constructor</code>），而实例都包含一个指向原型对象的内部指针（<code>__proto__</code>）<br>，假如让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型对象的指针，相应的，另一个原型中也包含着指向另一个构造函数的指针。<br>假如另一个原型对象又是另一个类型的实例，上述关系层层递进，就构成了实例与原型的链条。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/17/vB2iTO.png" alt="img"></p><h3 id="判断原型链上关系的方式"><a href="#判断原型链上关系的方式" class="headerlink" title="判断原型链上关系的方式"></a>判断原型链上关系的方式</h3><ul><li><code>instanceof</code> —- 判断实例对象与构造函数的关系</li><li><code>__proto__</code> —- 访问实例对象的原型对象（已废弃，不建议使用）</li><li><code>constructor</code> —-  访问原型对象/实例对象对应的构造函数</li><li><code>isPrototypeOf()</code> —- 判断对象之间是否有原型链关系</li><li><code>Object.getPrototypeOf()</code> —- 获取某个实例对象对应的原型对象</li></ul><h3 id="修改原型"><a href="#修改原型" class="headerlink" title="修改原型"></a>修改原型</h3><ul><li><code>[构造函数].prototype.[方法]</code> —- 在原型对象上增加方法</li><li><code>[构造函数].prototype = &#123;&#125;</code> —- 字面量方式修改原型对象，此方式<code>constructor</code>指向会出现问题，需要重新指定</li><li><code>[构造函数1].prototype = new [构造函数2]()</code> —- 将一个实例对象指定为另一个构造函数的原型，同样需要重新指定<code>constructor</code>指向</li><li><code>Object.create()</code> —- 以指定对象作为原型来创建实例</li><li><code>Object.setPrototypeOf(A, B)</code> —- 将B设定为A的原型对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack基础知识总结</title>
      <link href="/2021-09-04-webpack-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2021-09-04-webpack-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-webpack构建流程"><a href="#1-webpack构建流程" class="headerlink" title="1. webpack构建流程"></a>1. webpack构建流程</h3><p>以一个或多个文件作为打包入口，将整个项目的所有文件编译组合成一个或多个文件输出，输出的文件可以直接在浏览器端运行。<br>构建流程可以简单归结如下：</p><ul><li><strong>初始化</strong>：启动构建，读取与合并配置参数，加载 <code>Plugin</code>，实例化 <code>Compiler</code>对象</li><li><strong>编译</strong>：从 <code>Entry</code> 出发，调用对应的 <code>Loader</code> 去编译文件的内容，编译好的文件内容解析出 <code>AST</code> 语法树，从语法树中得到模块依赖关系图，递归地进行编译处理</li><li><strong>输出</strong>：将编译后的 <code>Module</code> 组合成 <code>Chunk</code>，将 <code>Chunk</code> 根据配置的输出路径和文件名转换成文件并输出到文件系统中</li></ul><h3 id="2-热更新原理"><a href="#2-热更新原理" class="headerlink" title="2. 热更新原理"></a>2. 热更新原理</h3><ul><li>当某一个文件或模块发生变化时，webpack 监听到文件变化会对文件重新编译打包，并生成下次热更新的 <code>hash</code>标识。</li><li><code>WDS</code>(<strong>webpack dev server</strong>)与浏览器之间维护了一个 <code>websocket</code> 通信，当 webpack 编译完成之后，<code>WDS</code> 会向浏览器发送更新通知，并带上下次热更新的 <code>hash</code>值。</li><li>浏览器收到更新通知后，会使用上一次的 <code>hash</code> 值向 <code>WDS</code> 发起 <code>hash.hot-update.json</code> 请求来获取更改内容（文件列表、下一次更新的<code>hash</code>），之后浏览器再借助这些信息继续向 <code>WDS</code> 发起 <code>hash值.hot-update.js</code> 请求获取增量更新的内容。拿到需要更新的内容后，<code>HotModuleReplacementPlugin</code> 将更新后的代码进行替换，并局部刷新浏览器。</li></ul><h3 id="3-loader和plugin区别"><a href="#3-loader和plugin区别" class="headerlink" title="3. loader和plugin区别"></a>3. loader和plugin区别</h3><ul><li><code>loader</code> 是文件加载器，帮助 webpack 处理那些非 JavaScript 文件，如css文件、图片等。loader 其实就是一个 function，接收一个参数 source，就是当前的文件内容，直接对文件进行一些处理，最终返回一个新的文件内容。</li><li><code>plugin</code> 是插件，本质就是一个类，针对的是webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack执行流程中的生命周期中的事件，执行广泛的任务，比如打包优化、文件管理、环境注入等。</li></ul><h3 id="4-常用的loader和plugin"><a href="#4-常用的loader和plugin" class="headerlink" title="4. 常用的loader和plugin"></a>4. 常用的loader和plugin</h3><p><strong>loader</strong>:</p><ul><li><code>babel-loader</code>: ES6转ES5</li><li><code>sass-loader</code>：SASS语法转CSS</li><li><code>css-loader</code>：解析css文件，转换为js模块</li><li><code>style-loader</code>：将css-loader解析后的内容通过js脚本的方式创建style标签注入到html页面中</li><li><code>ts-loader</code>: TS转JS</li><li><code>postcss-loader</code>：css语法降级及增加浏览器前缀等功能</li><li><code>eslint-loader</code>：JS代码语法及风格检查</li><li><code>file-loader</code>：将代码中引入的文件生成到输出目录，并且在JS代码里返回该文件的地址</li></ul><p><strong>plugin</strong>: </p><ul><li><code>clean-webpack-plugin</code>：打包前移除上次打包的文件</li><li><code>html-webpack-plugin</code>：生成一个根HTML文件，自动引入webpack打包出的bundle</li><li><code>copy-webpack-plugin</code>：复制文件，一般用于将<code>public</code>目录的内容复制到输出目录</li><li><code>mini-css-extract-plugin</code>: css文件提取到单独的文件，而非使用<code>style-loader</code>插入到html代码中</li><li><code>optimize-css-assets-webpack-plugin</code>：压缩css文件</li><li><code>webpack-bundle-analyzer</code>：打包体积分析</li><li><code>speed-measure-webpack-plugin</code>：打包速度分析</li></ul><h3 id="5-如何优化打包结果"><a href="#5-如何优化打包结果" class="headerlink" title="5. 如何优化打包结果"></a>5. 如何优化打包结果</h3><ul><li><code>压缩代码</code>：使用<code>UglifyJsPlugin</code>压缩js代码，<code>CssMinimizerWebpackPlugin</code>压缩css代码，<code>HtmlWebpackPlugin</code>压缩HTML代码等</li><li><code>CDN加速</code>：静态资源尽量改用CDN加速，无法使用CDN加速的，尽可能使用插件进行压缩优化，比如使用<code>image-webpack-loader</code>压缩图片</li><li><code>Code Splitting</code>: 使用<code>splitChunksPlugin</code>将代码按照路由维度或组件分包，这样可以做到按需加载，同时提取公用代码及三方库到单独的包，浏览器就可以长期缓存这些无需频繁改动的公共代码</li><li><code>Tree Shaking</code>: 删除无用代码</li></ul><h3 id="6-如何优化构建速度"><a href="#6-如何优化构建速度" class="headerlink" title="6. 如何优化构建速度"></a>6. 如何优化构建速度</h3><ul><li><strong>搜索时间优化</strong>，即搜索依赖项，以确定依赖关系的时间<ul><li>使用 loader 时通过 <code>test</code>、<code>include</code>、<code>exclude</code>配置项来尽可能精准命中文件</li><li><code>resolve.extensions</code> 列表尽可能小，频率出现最高的文件后缀优先放到前面，以减小文件检索的尝试过程</li></ul></li><li><strong>解析时间优化</strong>，即使用各种loader对文件进行解析的时间<ul><li>使用<code>thread-loader</code>（替代 happypack ）对打包较耗时的 loader 开启多进程打包</li></ul></li><li><strong>压缩时间优化</strong>，即将各种依赖压缩生成到输出目录的时间<ul><li><code>terser-webpack-plugin</code> 启动多进程以提升构建速度（webpack5默认已开启）</li></ul></li><li><strong>二次打包时间优化</strong>，即更改部分代码后，重新打包的时间<ul><li>在一些开销较大的 loader 之前使用 <code>cache-loader</code> 进行缓存</li><li>使用 <code>hard-source-webpack-plugin</code> 进行中间缓存</li></ul></li></ul><h3 id="7-Code-Splitting"><a href="#7-Code-Splitting" class="headerlink" title="7. Code Splitting"></a>7. Code Splitting</h3><p>webpack的分包主要通过<code>SplitChunksPlugin</code>来实现。实现的分包方式主要有两种：</p><ul><li>根据业务不同配置多个打包入口，输出多个打包结果（适用于多页应用程序）</li><li>结合<code>ES Modules</code>的动态导入特性，按需加载模块</li></ul><h3 id="8-webpack5-的缓存方式"><a href="#8-webpack5-的缓存方式" class="headerlink" title="8. webpack5 的缓存方式"></a>8. webpack5 的缓存方式</h3><p>webpack在开发模式下的打包结果默认会缓存在内存中，不会输出到静态文件。</p><blockquote><p>在生产环境下禁用缓存，默认输出到静态文件。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 内存缓存</span>    <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// development模式下默认。</span>    <span class="token comment">// cache: &#123; type: 'memory' &#125;, // 和上面等价。</span>    <span class="token comment">// 文件缓存</span>    <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'filesystem'</span><span class="token punctuation">,</span> <span class="token comment">// 编译缓存将保存在文件中，不占用内存</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-source-map使用"><a href="#9-source-map使用" class="headerlink" title="9. source map使用"></a>9. <code>source map</code>使用</h3><p><code>source map</code>，即编译后的代码与源代码的映射。<br>在<code>webpack.config.js</code>配置文件中使用<code>devtools</code>配置项来选择<code>source map</code>模式。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/09/15/vx7HTs.png"><br>在打包生产环境的代码时，为了避免向外暴露源码，一般选用<code>hidden-source-map</code>或<code>nosources-source-map</code>模式。</p><ul><li><code>hidden-source-map</code><br>仍然会产生完整的map文件，但是不会在 <code>bundle</code> 文件中添加对于 map 文件的引用。这样当打开浏览器开发者工具时，是无法看到map文件的，自然也就无法解析。如果我们自己想要追溯源码，可使用一些第三方服务，将map文件上传到第三方服务中（比如<code>Sentry</code>）。</li><li><code>nosources-source-map</code><br>当打包部署后，我们可以在浏览器开发者工具的sources选项卡中看到源码的目录结构，但是文件内容会被隐藏起来。对于错误，仍然可以在console控制台中查看源代码的错误栈，或者console日志的准确行数。</li></ul><h3 id="10-webpackBootstrap做了什么？"><a href="#10-webpackBootstrap做了什么？" class="headerlink" title="10. webpackBootstrap做了什么？"></a>10. webpackBootstrap做了什么？</h3><ol><li>使用立即执行函数封装我们的代码，避免全局污染</li><li>缓存每个模块的输出值并自执行函数</li><li>定义了一些处理 <code>import</code>, <code>export</code> 或者是 <code>require</code> 的方法，做到不同规范的兼容</li></ol><h3 id="11-Tree-Shaking机制的原理"><a href="#11-Tree-Shaking机制的原理" class="headerlink" title="11. Tree Shaking机制的原理"></a>11. Tree Shaking机制的原理</h3><p><code>Tree-Shaking</code> 是一种基于 <code>ES Module</code> 规范的 <code>Dead Code Elimination</code> 技术，它会在运行过程中静态分析模块之间的导入导出，确定 <code>ESM</code> 模块中哪些导出值未被其它模块使用，并将其删除，以此实现打包产物的优化。<br>生产环境打包默认会开启 <code>Tree Shaking</code>，开发环境启动 <code>Tree Shaking</code> 需要同时满足三个条件：</p><ul><li>使用 <code>ESM</code> 规范编写模块代码</li><li>配置 <code>optimization.usedExports = true</code>, 即开启标记未被使用的导出内容，<code>terser</code>压缩代码时会将这部分代码删除</li><li>满足下列条件之一：<ul><li>配置 <code>optimization.minimize = true</code></li><li>配置 <code>optimization.minimizer</code></li></ul></li></ul><p>对于包含无副作用代码的模块，想要使用 <code>Tree Shaking</code> 跳过该模块，需要如下设置：</p><ul><li>在<code>webpack.config.js</code>中设置<code>optimization.sideEffects = true</code>（生产环境打包无需配置，默认为 true），以告知 <code>webpack</code> 去辨识 <code>package.json</code> 中的 副作用 标记 <code>sideEffects</code></li><li>在无副作用的模块的 <code>package.json</code> 中设置副作用标记 <code>sideEffects = false</code>，表明该模块没有副作用，未使用时可以被跳过不打包进 <code>bundle</code></li><li>对于项目，如果确认自己项目中没有副作用代码，希望 <code>Tree Shaking</code> 时跳过没用到的js模块代码，同样可以在项目的<code>package.json</code> 中设置 <code>sideEffects = false</code></li></ul><h3 id="12-开发plugin"><a href="#12-开发plugin" class="headerlink" title="12. 开发plugin"></a>12. 开发plugin</h3><ul><li>一个 JavaScript 命名函数或 JavaScript 类。</li><li>原型上定义一个 apply 方法。</li><li>指定一个绑定到 webpack 自身的事件钩子。</li><li>处理 webpack 内部实例的特定数据。</li><li>功能完成后调用 webpack 提供的回调。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 一个 JavaScript 类</span><span class="token keyword">class</span> <span class="token class-name">MyExampleWebpackPlugin</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 在插件函数的 prototype 上定义一个 `apply` 方法，以 compiler 为参数。</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 指定一个挂载到 webpack 自身的事件钩子。</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span>      <span class="token string">'MyExampleWebpackPlugin'</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个示例插件！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>          <span class="token string">'这里表示了资源的单次构建的 `compilation` 对象：'</span><span class="token punctuation">,</span>          compilation        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 用 webpack 提供的插件 API 处理构建过程</span>        compilation<span class="token punctuation">.</span><span class="token function">addModule</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注：Compiler 和 Compilation的区别<br>Compiler 是每次 Webpack 全部生命周期的对象，而 Compilation 是 Webpack 中每次构建过程的生命周期对象，Compilation 是通过 Compiler创建的实例。两个类都有自己生命周期，即有自己不同的 Hook，通过添加对应 Hook 事件，可以拿到各自生命周期关键数据和对象。Compilation 有个很重要的对象是 Stats 对象，通过这个对象可以得到 Webpack 打包后的所有 module、chunk 和 assets 信息，通过分析 Stats对象可以得到很多有用的信息，比如 webpack-bundle-analyzer 这类分析打包结果的插件都是通过分析 Stats 对象来得到分析报告的。</p></blockquote></li></ul><h3 id="13-Tapable事件流"><a href="#13-Tapable事件流" class="headerlink" title="13. Tapable事件流"></a>13. Tapable事件流</h3>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router基础知识总结</title>
      <link href="/2021-05-07-vue-router-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2021-05-07-vue-router-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-导航守卫"><a href="#1-导航守卫" class="headerlink" title="1. 导航守卫"></a>1. 导航守卫</h3><ul><li>全局守卫<ul><li><code>beforeEach</code> 全局前置守卫 </li><li><code>beforeResolve</code> 全局解析守卫 </li><li><code>afterEach</code> 全局后置钩子</li></ul></li><li>路由独享的守卫 <code>beforeEnter</code></li><li>组件内守卫<ul><li><code>beforeRouteEnter</code> 组件的对应路由被验证前调用</li><li><code>beforeRouteUpdate</code> 在路由改变且组件被复用时调用</li><li><code>beforeRouteLeave</code> 离开渲染组件的对应路由时调用</li></ul></li></ul><h3 id="2-导航守卫解析流程"><a href="#2-导航守卫解析流程" class="headerlink" title="2. 导航守卫解析流程"></a>2. 导航守卫解析流程</h3><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫(2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h3 id="3-route和router的区别"><a href="#3-route和router的区别" class="headerlink" title="3. route和router的区别"></a>3. route和router的区别</h3><ul><li><code>router</code> 是 <code>VueRouter</code> 的实例，是一个全局路由对象，包含了路由跳转的方法、钩子函数等。</li><li><code>route</code> 是一个当前正在跳转的路由对象，每一个路由都会有一个<code>route</code>对象，是一个局部对象，包含<code>path</code>,<code>params</code>,<code>hash</code>,<code>query</code>,<code>fullPath</code>,<code>matched</code>,<code>name</code>等路由信息参数。</li></ul><h3 id="4-路由模式"><a href="#4-路由模式" class="headerlink" title="4. 路由模式"></a>4. 路由模式</h3><ul><li>Hash模式：通过监听<code>hashchange</code>事件实现</li><li>History模式：基于HTML5的 <code>history</code> api实现</li><li>Abstract模式：非浏览器环境下，强制使用此模式</li></ul><h3 id="5-动态路由实现权限控制"><a href="#5-动态路由实现权限控制" class="headerlink" title="5. 动态路由实现权限控制"></a>5. 动态路由实现权限控制</h3><p>1.通过 <code>router.beforeEach()</code>进行权限校验，获取角色可访问的路由数据。</p><p>2.通过 <code>vue-router</code> 的 <code>addRoute()</code> 来动态增加路由。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex基础知识总结</title>
      <link href="/2021-05-06-vuex-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2021-05-06-vuex-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-Vuex的运行流程"><a href="#1-Vuex的运行流程" class="headerlink" title="1. Vuex的运行流程"></a>1. <code>Vuex</code>的运行流程</h3><p><img src="/medias/loading.gif" data-original="https://vuex.vuejs.org/vuex.png" alt="Vuex运行流程图"></p><ol><li>Vue组件中调用<code>dispatch</code>方法触发对应的<code>action</code></li><li><code>action</code>中包含同步/异步操作，可以在<code>action</code>中进行后台API请求、触发其他<code>action</code>以及提交<code>mutation</code>操作</li><li><code>mutation</code>方法中对<code>state</code>对象进行修改，只能执行同步操作</li><li><code>state</code>中的数据修改后，页面进行响应式更新</li></ol><h3 id="2-Vuex的实现原理"><a href="#2-Vuex的实现原理" class="headerlink" title="2. Vuex的实现原理"></a>2. <code>Vuex</code>的实现原理</h3><ul><li>Vuex的数据响应式是通过<code>new Vue</code>实现的</li><li>组件的<code>$store</code>属性是通过使用全局混入 <code>Vue.mixin</code> 在所有组件的<code>beforeCreate</code>生命周期内注入的</li></ul><h3 id="3-核心概念"><a href="#3-核心概念" class="headerlink" title="3. 核心概念"></a>3. 核心概念</h3><ul><li><p><strong>state</strong>：vuex的基本数据，用来存储变量。</p></li><li><p><strong>getter</strong>：从<code>state</code>派生的数据，相当于<code>state</code>的计算属性。</p></li><li><p><strong>mutation</strong>：更新数据的同步函数（必须是同步的）。接受 state 作为第一个参数，提交载荷作为第二个参数。</p></li><li><p><strong>action</strong>：和<code>mutation</code>的功能大致相同，不同之处在于：<code>Action</code> 通过提交<code>mutation</code>来修改数据；<code>Action</code>可以包含任意异步操作。</p></li><li><p><strong>modules</strong>：模块化<code>Vuex</code>，可以让每一个模块拥有自己的<code>state</code>、<code>mutation</code>、<code>action</code>、<code>getters</code>，从而使结构清晰，方便管理。</p></li></ul><h3 id="4-Vuex数据持久化"><a href="#4-Vuex数据持久化" class="headerlink" title="4. Vuex数据持久化"></a>4. Vuex数据持久化</h3><ul><li><code>vuex-persistedstate</code>插件</li><li><code>vuex-persist</code>插件</li><li><code>sessionStorage</code>和<code>localStorage</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础知识总结</title>
      <link href="/2021-05-05-vue-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2021-05-05-vue-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-v-show-与-v-if的区别"><a href="#1-v-show-与-v-if的区别" class="headerlink" title="1. v-show 与 v-if的区别"></a>1. <code>v-show</code> 与 <code>v-if</code>的区别</h3><ul><li><strong>v-if</strong>   </li></ul><p><strong>“真正”</strong>的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。简单的说，<code>v-if</code>为<code>false</code>时，对应的 DOM 元素不会被创建。</p><ul><li><strong>v-show</strong><br>元素总是会被创建渲染，只是简单地基于 CSS 的 <code>display</code> 属性进行切换。<br>综上，<code>v-if</code> 适用于在运行时很少改变条件，不需要频繁切换条件的场景；<code>v-show</code> 则适用于需要非常频繁切换条件的场景。（微信小程序中的<code>wx:if</code>和<code>wx:hidden</code>与上述类似）</li></ul><h3 id="2-列表渲染中key的作用"><a href="#2-列表渲染中key的作用" class="headerlink" title="2. 列表渲染中key的作用"></a>2. 列表渲染中<code>key</code>的作用</h3><p><code>key</code> 主要用在 Vue 的虚拟 DOM 算法，在新旧节点对比时辨识 <code>VNodes</code>（虚拟节点）。如果不使用 <code>key</code>，Vue 会最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素。而使用 <code>key</code> 时，它会基于 <code>key</code> 的变化重新排列元素顺序，并且会移除 <code>key</code> 不存在的元素。<br>综上，简单列表的渲染可以不使用 <code>key</code> 或者用数组的 <code>index</code> 作为<code>key</code>（效果等同于不带key），这种模式下性能最高，但是并不能准确的更新列表项的状态。一旦你需要保存列表项的状态，那么就需要用使用唯一的 <code>key</code> 用来准确的定位每一个列表项以及复用其自身的状态。否则就可能会出现错乱的情况（<a href="https://codesandbox.io/s/vue-demo-lneif5?file=/src/components/TodoList.vue">示例代码</a>）。</p><h4 id="3-computed-和-watch-的区别及应用场景"><a href="#3-computed-和-watch-的区别及应用场景" class="headerlink" title="3. computed 和 watch 的区别及应用场景"></a>3. <code>computed</code> 和 <code>watch</code> 的区别及应用场景</h4><ul><li><p><strong>computed</strong><br>计算属性，依赖其它属性值，并且 <code>computed</code> 的值有缓存，只有它依赖的属性值发生改变才会重新求值；（源码中通过<code>dirty</code>属性来控制是重新计算还是从缓存中取值）</p></li><li><p><strong>watch</strong><br>更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；  </p></li><li><p><strong>应用场景</strong>  </p><ul><li><p>需要在<code>template</code>中书写复杂表达式，并且依赖于其它数据，应该使用 <code>computed</code>，因为可以利用 <code>computed</code> 的缓存特性，避免每次获取值时，都要重新计算；</p></li><li><p>需要在数据变化时执行<code>异步</code>或<code>开销较大的操作</code>，应该使用 <code>watch</code>。因为使用<code>watch</code>选项允许我们执行异步操作 (比如网络请求)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p></li></ul></li></ul><h3 id="4-单向数据流"><a href="#4-单向数据流" class="headerlink" title="4. 单向数据流"></a>4. 单向数据流</h3><p>从父组件传到子组件的数据，子组件没有权利直接修改，想要修改该数据，只能通过<code>$emit</code>派发一个自定义事件，父组件接收到后，由父组件修改。<br>每次父级组件发生变更时，子组件中所有的 <code>prop</code> 都将会刷新为最新的值。这样会防止从子组件意外改变父级组件的状态，从而导致应用的数据流向难以理解。</p><h3 id="5-Vue实例的生命周期钩子"><a href="#5-Vue实例的生命周期钩子" class="headerlink" title="5. Vue实例的生命周期钩子"></a>5. Vue实例的生命周期钩子</h3><table><thead><tr><th>生命周期</th><th>描述</th></tr></thead><tbody><tr><td>beforeCreate</td><td>组件实例被创建之初，组件的属性生效之前</td></tr><tr><td>created</td><td>组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用：相关的 render 函数首次被调用</td></tr><tr><td>mounted</td><td>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</td></tr><tr><td>beforeUpdate</td><td>组件数据更新之前调用，发生在虚拟 DOM 打补丁之前</td></tr><tr><td>updated</td><td>组件数据更新之后</td></tr><tr><td>activated</td><td>keep-alive 专属，组件被激活时调用</td></tr><tr><td>deactivated</td><td>keep-alive 专属，组件被销毁时调用</td></tr><tr><td>beforeDestroy</td><td>组件销毁前调用</td></tr><tr><td>destroyed</td><td>组件销毁后调用</td></tr><tr><td>errorCaptured</td><td>2.5.0+ 新增，在捕获一个来自后代组件的错误时被调用。</td></tr></tbody></table><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/09/26/xVvOpR.png" alt="image"></p><h3 id="6-父组件和子组件生命周期钩子执行顺序"><a href="#6-父组件和子组件生命周期钩子执行顺序" class="headerlink" title="6. 父组件和子组件生命周期钩子执行顺序"></a>6. 父组件和子组件生命周期钩子执行顺序</h3><p>可以归类为以下 4 中场景：</p><ul><li>加载渲染过程<br>父 <code>beforeCreate</code> -&gt; 父 <code>created</code> -&gt; 父 <code>beforeMount</code> -&gt; 子 <code>beforeCreate</code> -&gt; 子 <code>created</code> -&gt; 子 <code>beforeMount</code> -&gt; 子 <code>mounted</code> -&gt; 父 <code>mounted</code></li></ul><ul><li>子组件更新过程<br>父 <code>beforeUpdate</code> -&gt; 子 <code>beforeUpdate</code> -&gt; 子 <code>updated</code> -&gt; 父 <code>updated</code></li></ul><ul><li>父组件更新过程<br>父 <code>beforeUpdate</code> -&gt; 父 <code>updated</code></li></ul><ul><li>父组件销毁过程<br>父 <code>beforeDestroy</code> -&gt; 子 <code>beforeDestroy</code> -&gt; 子 <code>destroyed</code> -&gt; 父 <code>destroyed</code></li></ul><ul><li>子组件销毁过程<br>父 <code>beforeUpdate</code> -&gt; 子 <code>beforeDestroy</code> -&gt; 子 <code>destroyed</code> -&gt; 父 <code>updated</code></li></ul><p><a href="https://codepen.io/snaillu/pen/YzjRzpr">☆☆代码演示☆☆</a></p><h3 id="7-父组件中监听子组件生命周期钩子"><a href="#7-父组件中监听子组件生命周期钩子" class="headerlink" title="7. 父组件中监听子组件生命周期钩子"></a>7. 父组件中监听子组件生命周期钩子</h3><ul><li><p><code>props/$emit</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Parent.vue</span><span class="token operator">&lt;</span>Child @mounted<span class="token operator">=</span><span class="token string">"doSomething"</span><span class="token operator">/</span><span class="token operator">></span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件mounted了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// Child.vue</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"mounted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>@hook</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//  Parent.vue</span><span class="token operator">&lt;</span>Child @hook<span class="token operator">:</span>mounted<span class="token operator">=</span><span class="token string">"doSomething"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">></span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件mounted了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//  Child.vue</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件触发 mounted 钩子函数 ...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="8-组件间的通信方式"><a href="#8-组件间的通信方式" class="headerlink" title="8. 组件间的通信方式"></a>8. 组件间的通信方式</h3><ul><li><code>props/$emit</code> 父子间通信</li><li><code>ref</code> 与 <code>$parent / $children</code> 父子间通信<ul><li><code>ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li><li><code>$parent</code> / <code>$children</code>：访问父 / 子组件实例  </li></ul></li><li><code>EventBus($emit / $on)</code> 父子、隔代、兄弟间通信<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// event-bus.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// A组件中调用EventBus.$emit(channel: string, [...args])发送消息</span><span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    EventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"aMsg"</span><span class="token punctuation">,</span> <span class="token string">'来自A页面的消息'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// B组件中调用EventBus.$on(channel: string, callback(payload1,…))接收消息</span>EventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"aMsg"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// A发送来的消息</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>Vuex</code> 父子、隔代、兄弟间通信</li></ul><h3 id="9-Vue2数据响应式原理"><a href="#9-Vue2数据响应式原理" class="headerlink" title="9. Vue2数据响应式原理"></a>9. Vue2数据响应式原理</h3><p><code>Vue2</code>数据响应式主要利用的就是: <code>数据劫持</code>和<code>发布订阅模式</code>。</p><ul><li><strong>发布订阅模式</strong><br>当发布者数据变化时发布数据，全部订阅者均可以接收到通知。</li><li><strong>数据劫持</strong><br>就是利用JavaScript的访问器属性，即<code>Object.defineProperty()</code>方法，当对对象的属性进行赋值时，<code>Object.defineProperty</code>就可以通过<code>set</code>方法劫持到数据的变化，然后通知发布者去通知所有订阅者，订阅者收到通知后，就会对视图进行更新。  </li></ul><p>Vue2 响应式的实现主要有：</p><ul><li><strong>监听器 Observer</strong><br>对数据对象进行遍历，包括子属性对象的属性，利用 <code>Object.defineProperty()</code> 对属性都加上 <code>setter</code> 和 <code>getter</code>。<code>getter</code>中收集依赖，<code>setter</code>中通知依赖更新。</li><li><strong>依赖管理器 Dep</strong><br>用来收集订阅者 <code>Watcher</code>，对监听器 <code>Observer</code> 和 订阅者 <code>Watcher</code> 进行统一管理。</li><li><strong>订阅者 Watcher</strong><br><code>Watcher</code> 是 <code>Observer</code> 和 <code>Compiler</code> 之间通信的桥梁 ，主要的任务是订阅 <code>Observer</code> 中的属性值变化的消息，当收到属性值变化的消息时，触发编译器 <code>Compiler</code> 中对应的更新函数。</li><li><strong>编译器 Compiler</strong><br>解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。</li></ul><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/09/26/xVxS0O.png" alt="image"></p><p>总之就是，在创建 Vue 实例的时候给传入的 <code>data</code>的每个属性使用 <code>Observer</code> 增加<code>getter</code> 和 <code>setter</code>，同时视图编译的时候，对于使用到<code>data</code>中数据的地方进行创建 <code>Watcher</code> ，然后在数据劫持的 <code>getter</code> 中收集 <code>Watcher</code> 到订阅器 <code>Dep</code>，当劫持的数据发生变化的时候，触发<code>setter</code>，<code>setter</code> 中会调用 <code>Dep</code> 来通知所有收集到的 <code>Watcher</code>，<code>Watcher</code> 通知DOM进行更新，从而实现数据的响应式变化。</p><blockquote><p>依赖收集的过程就是将响应式数据关联的依赖（也就是使用到该响应式数据的dom节点）给收集起来。</p></blockquote><p><strong>参考文章</strong>：</p><ul><li><a href="https://blog.csdn.net/qq_38280242/article/details/128982994">莽村李青都看得懂的Vue响应式原理</a></li><li><a href="https://tsejx.github.io/vue-guidebook/infrastructure/vue2/reactivity/">响应式原理</a></li></ul><h3 id="10-双向数据绑定原理"><a href="#10-双向数据绑定原理" class="headerlink" title="10. 双向数据绑定原理"></a>10. 双向数据绑定原理</h3><p>表单元素 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 上可以用 <code>v-model</code> 指令创建双向数据绑定，当进行表单输入或选择的时候，通过<code>v-model</code>绑定的值会同步修改。<br><code>v-model</code> 在内部为不同的输入元素使用不同的 <code>property</code> 并抛出不同的事件：</p><ul><li><code>text</code> 和 <code>textarea</code> 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li><li><code>checkbox</code> 和 <code>radio</code> 使用 <code>checked</code> property 和 <code>change</code> 事件；</li><li><code>select</code> 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li></ul><h3 id="10-Vue3的响应式和Vue2的区别"><a href="#10-Vue3的响应式和Vue2的区别" class="headerlink" title="10. Vue3的响应式和Vue2的区别"></a>10. Vue3的响应式和Vue2的区别</h3><p>Vue3的响应式不再通过<code>Object.defineProperty()</code>来对数据进行劫持，而是通过<code>Proxy</code>代理实现数据的变化监听。<br>主要区别：</p><ol><li><code>Proxy</code>是对整个对象的代理，而<code>Object.defineProperty</code>只能代理某个属性。</li><li>对象上新增属性，<code>Proxy</code>可以监听到，<code>Object.defineProperty</code>不能。</li><li>数组新增元素，<code>Proxy</code>可以监听到，<code>Object.defineProperty</code>不能。</li><li>若对象内部属性要全部递归代理，<code>Proxy</code>可以只在调用的时候递归，而<code>Object.definePropery</code>需要一次完成所有递归，性能比Proxy差。</li><li><code>Proxy</code>在ie浏览器上存在兼容问题</li></ol><h3 id="11-data为何是一个函数而非对象"><a href="#11-data为何是一个函数而非对象" class="headerlink" title="11. data为何是一个函数而非对象"></a>11. data为何是一个函数而非对象</h3><p>因为组件可能被用来创建多个实例。如果 <code>data</code> 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 <code>data</code> 函数，每次创建一个新实例后，我们能够调用 <code>data</code> 函数，从而返回初始数据的一个全新副本数据对象，这样就保证了每个组件的<code>data</code> 独立性。</p><h3 id="12-虚拟DOM"><a href="#12-虚拟DOM" class="headerlink" title="12. 虚拟DOM"></a>12. 虚拟DOM</h3><p>所谓<strong>虚拟DOM</strong>，就是用一个 <code>JS</code> 对象来描述一个 <code>DOM</code> 节点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 示例</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"a"</span> id<span class="token operator">=</span><span class="token string">"b"</span><span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment">// 上述html代码可以使用如下js对象来表示</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>  <span class="token comment">// 元素标签</span>  <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// 属性</span>    <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'b'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Hello World!'</span><span class="token punctuation">,</span>  <span class="token comment">// 文本内容</span>  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token comment">// 子元素</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="产生的原因及用途"><a href="#产生的原因及用途" class="headerlink" title="产生的原因及用途"></a>产生的原因及用途</h4><p>直接操作 <code>DOM</code> 是十分消耗性能的，可以利用 <code>js</code> 计算对比数据变化前后的状态，计算出视图中哪些地方需要更新，只更新需要更新的地方，以此来减少不必要的 <code>DOM</code> 操作。</p><h4 id="diff-算法"><a href="#diff-算法" class="headerlink" title="diff 算法"></a>diff 算法</h4><ul><li><p><strong>特点：</strong>    </p><ul><li>比较只会在同层级进行, 不会跨层级比较。</li><li>在 <code>diff</code> 比较的过程中，循环从两边向中间收拢。</li></ul></li><li><p><strong>流程：</strong></p></li></ul><ol><li><p>首先会对新老 <code>VNode</code> 的开始和结束位置进行标记：<code>oldStartIdx</code>、<code>oldEndIdx</code>、<code>newStartIdx</code>、<code>newEndIdx</code>。</p></li><li><p>进入到的 <code>while</code> 循环处理中，这里是 <code>diff</code> 算法的核心流程，分情况进行了新老节点的比较并移动对应的 <code>VNode</code> 节点。<code>while</code> 循环的退出条件是直到老节点或者新节点的开始位置大于结束位置。<br><code>while</code> 循环中的处理逻辑，循环过程中首先对新老 <code>VNode</code> 节点的头尾进行比较，寻找相同节点，如果有相同节点满足 <code>sameVnode</code>（可以复用的相同节点） 则直接进行 <code>patchVnode</code> (该方法进行节点复用处理)，并且根据具体情形，移动新老节点的 <code>VNode</code> 索引，以便进入下一次循环处理，一共有 <code>2 * 2 = 4</code> 种情形。</p><ul><li><strong>情形一</strong>：当新老 <code>VNode</code> 节点的 <code>start</code> 满足 <code>sameVNode</code> 时，直接 <code>patchVNode</code> 即可，同时新老 <code>VNode</code> 节点的<code>start</code>索引都加 1。</li><li><strong>情形二</strong>：当新老 <code>VNode</code> 节点的 <code>end</code> 满足 <code>sameVNode</code> 时，同样直接 <code>patchVNode</code> 即可，同时新老 <code>VNode</code> 节点的 <code>end</code> 索引都减 1。</li><li><strong>情形三</strong>：当老 <code>VNode</code> 节点的 <code>start</code> 和新 <code>VNode</code> 节点的 <code>end</code> 满足 <code>sameVnode</code> 时，这说明这次数据更新后 <code>oldStartVNode</code> 已经跑到了 <code>oldEndVNode</code> 后面去了。这时候在 <code>patchVNode</code> 后，还需要将当前真实 <code>dom</code> 节点移动到 <code>oldEndVNode</code> 的后面，同时老 <code>VNode</code> 节点开始索引<code>加1</code>，新 <code>VNode</code> 节点的结束索引<code>减1</code>。</li><li><strong>情形四</strong>：当老 <code>VNode</code> 节点的 <code>end</code> 和新 <code>VNode</code> 节点的 <code>start</code> 满足 <code>sameVnode</code> 时，这说明这次数据更新后 <code>oldEndVNode</code> 跑到了 <code>oldStartVNode</code> 的前面去了。这时候在 <code>patchVNode</code> 后，还需要将当前真实 <code>dom</code> 节点移动到 <code>oldStartVNode</code> 的前面，同时老 <code>VNode</code> 节点结束索引<code>减1</code>，新 <code>VNode</code> 节点的开始索引<code>加 1</code>。  </li></ul><p>如果都不满足以上四种情形，那说明没有相同的节点可以复用。于是则通过查找事先建立好的以旧的 <code>VNode</code> 为 <code>key</code> 值，对应 <code>index</code> 序列为 <code>value</code> 值的哈希表。从这个哈希表中找到与 <code>newStartVnode</code> 一致 <code>key</code> 的旧的 <code>VNode</code> 节点，如果两者满足 <code>sameVnode</code> 的条件，在进行 <code>patchVnode</code> 的同时会将这个真实 <code>dom</code> 移动到 <code>oldStartVnode</code> 对应的真实 <code>dom</code> 的前面；如果没有找到，则说明当前索引下的新的 <code>VNode</code> 节点在旧的 <code>VNode</code> 队列中不存在，无法进行节点的复用，那么就只能调用 <code>createElm</code> 创建一个新的 <code>dom</code> 节点放到当前 <code>newStartIdx</code> 的位置。</p></li><li><p>当 <code>while</code> 循环结束后，根据新老节点的数目不同，做相应的节点添加或者删除。若新节点数目大于老节点则需要把多出来的节点创建出来加入到真实 <code>dom</code> 中，反之若老节点数目大于新节点则需要把多出来的老节点从真实 <code>dom</code> 中删除。至此整个 diff 过程就已经全部完成了。</p></li></ol><h3 id="13-nextTick原理"><a href="#13-nextTick原理" class="headerlink" title="13. $nextTick原理"></a>13. <code>$nextTick</code>原理</h3><blockquote><p>Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。</p></blockquote><p><code>$nextTick</code>的实现本质上就是将某个任务依次尝试使用<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>、<code>setTimeout</code>进行处理，前两个方法会将任务放到微任务队列，后两个方法会将任务放到宏任务队列，无论是微任务还是宏任务，该任务都是在DOM更新之后执行的，这样就实现了DOM更新之后再去执行特定任务。</p><h3 id="14-数组和对象的变化检测"><a href="#14-数组和对象的变化检测" class="headerlink" title="14. 数组和对象的变化检测"></a>14. 数组和对象的变化检测</h3><p>Vue对数组的7个方法<code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>、<code>splice</code>、<code>sort</code>、<code>reverse</code>实现了响应式，对对象已有属性也是实现了响应式的。但是由于 Vue 会在初始化实例时对 <code>property</code> 执行 <code>getter/setter</code> 转化，所以 <code>property</code> 必须在 <code>data</code> 对象上存在才能让 <code>Vue</code> 将它转换为响应式的。这导致了以下情况：</p><ul><li>Vue 无法检测对象属性的添加或移除。</li><li>Vue 不能检测以下情况数组的变动：<ul><li>利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code>（其实对于已有元素是可以实现的，但是由于性能问题没有实现）</li><li>修改数组的长度时，例如：<code>vm.items.length = newLength</code></li></ul></li></ul><p>出现以上问题可以使用<code>$set</code>方法进行响应式处理。</p><h3 id="15-项目中做过的优化"><a href="#15-项目中做过的优化" class="headerlink" title="15. 项目中做过的优化"></a>15. 项目中做过的优化</h3><ul><li>编码优化<ul><li>尽量不要将所有的数据都放在 <code>data</code> 中，<code>data</code>中的数据都会增加 <code>getter</code> 和 <code>setter</code>，会收集对应的 <code>watcher</code></li><li>vue 在 <code>v-for</code> 时给每项元素绑定事件尽量用事件代理（事件处理绑定在父元素上，而非子元素上）</li><li>拆分组件( 提高复用性、增加代码的可维护性,减少不必要的渲染 )</li><li><code>v-if</code> 当值为 <code>false</code> 时内部指令不会执行，具有阻断功能，很多情况下使用<code>v-if</code>替代<code>v-show</code></li><li>合理使用路由懒加载、异步组件</li><li>对于一个巨大的对象或数组数据，如果确信该数据不会修改，使用<code>Object.freeze</code>冻结数据，该数据不会被vue监听，能大幅提升性能。</li></ul></li><li>用户体验<ul><li><code>app-skeleton</code> 骨架屏</li><li><code>PWA</code> 与 <code>Service worker</code>实现离线访问和后台同步</li></ul></li><li>加载性能优化<ul><li>第三方模块按需导入 ( babel-plugin-component )</li><li>滚动到可视区域动态加载 ( <a href="https://tangbc.github.io/vue-virtual-scroll-list">https://tangbc.github.io/vue-virtual-scroll-list</a> )</li><li>图片懒加载 (<a href="https://github.com/hilongjw/vue-lazyload.git">https://github.com/hilongjw/vue-lazyload.git</a>)</li></ul></li><li>SEO 优化<ul><li>预渲染插件 prerender-spa-plugin</li><li>服务端渲染 ssr</li></ul></li><li>打包优化<ul><li>使用 cdn 的方式加载第三方模块</li><li>多线程打包 happypack、parallel-webpack</li><li>控制包文件大小（tree shaking / splitChunksPlugin）</li><li>使用DllPlugin提高打包速度</li></ul></li><li>缓存/压缩<ul><li>客户端缓存/服务端缓存</li><li>服务端gzip压缩</li></ul></li></ul><h3 id="16-Vue的初始化过程（new-Vue-options-）"><a href="#16-Vue的初始化过程（new-Vue-options-）" class="headerlink" title="16. Vue的初始化过程（new Vue(options)）"></a>16. Vue的初始化过程（new Vue(options)）</h3><p>在使用 <code>new Vue(options)</code> 创建Vue实例时，会调用 Vue 原型对象上的 <code>_init</code> 方法，执行一系列初始化操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Vue v2.6.14</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token operator">?</span><span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token literal-property property">vm</span><span class="token operator">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment">// a uid</span>  vm<span class="token punctuation">.</span>_uid <span class="token operator">=</span> uid<span class="token operator">++</span>  <span class="token keyword">let</span> startTag<span class="token punctuation">,</span> endTag  <span class="token comment">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    startTag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vue-perf-start:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vm<span class="token punctuation">.</span>_uid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    endTag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vue-perf-end:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vm<span class="token punctuation">.</span>_uid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token function">mark</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// a flag to avoid this being observed</span>  vm<span class="token punctuation">.</span>_isVue <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment">// merge options</span>  <span class="token comment">// 普通组件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>_isComponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// optimize internal component instantiation</span>    <span class="token comment">// since dynamic options merging is pretty slow, and none of the</span>    <span class="token comment">// internal component options needs special treatment.</span>    <span class="token function">initInternalComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根组件merge options</span>    vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>      <span class="token function">resolveConstructorOptions</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">,</span>      options <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      vm    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* istanbul ignore else */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">initProxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    vm<span class="token punctuation">.</span>_renderProxy <span class="token operator">=</span> vm  <span class="token punctuation">&#125;</span>  <span class="token comment">// expose real self</span>  vm<span class="token punctuation">.</span>_self <span class="token operator">=</span> vm  <span class="token function">initLifecycle</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 给vue实例上挂载$parent, $root, $refs, $children等属性</span>  <span class="token function">initEvents</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化实例的事件系统</span>  <span class="token function">initRender</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化渲染函数，给实例上挂载$createElement方法</span>  <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeCreate'</span><span class="token punctuation">)</span> <span class="token comment">// 触发beforeCreate钩子</span>  <span class="token function">initInjections</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化injections</span>  <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化props,methods,data,computed,watch</span>  <span class="token function">initProvide</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化 provide</span>  <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">)</span> <span class="token comment">// 触发created钩子</span>  <span class="token comment">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vm<span class="token punctuation">.</span>_name <span class="token operator">=</span> <span class="token function">formatComponentName</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token function">mark</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>    <span class="token function">measure</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vue </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vm<span class="token punctuation">.</span>_name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> init</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 判断用户是否传入了el选项，如果传入了则调用$mount函数进入模板编译与挂载阶段，</span>  <span class="token comment">// 如果没有传入el选项，则不进入下一个生命周期阶段，需要用户手动执行 vm.$mount 方法才进入下一个生命周期阶段。</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上，可以总结出vue初始化的流程如下：</p><ol><li>处理组件配置项，合并options后挂载到 <code>vm.$options</code></li><li>调用一些初始化函数: <code>initLifecycle</code> 、<code>initEvents</code>、<code>initRender</code></li><li>触发 <code>beforeCreate</code> 生命周期钩子</li><li>调用另外一些初始化函数: <code>initInjections</code> 、<code>initState</code>、<code>initProvide</code></li><li>触发 <code>created</code> 生命周期钩子</li><li>调用 <code>$mount</code> 进入挂载阶段</li></ol><h3 id="17-模板编译"><a href="#17-模板编译" class="headerlink" title="17. 模板编译"></a>17. 模板编译</h3><p><strong>模板编译流程：</strong></p><ol><li><strong>模板解析阶段</strong>：将模板字符串用正则等方式解析成抽象语法树 <code>AST</code>；</li><li><strong>优化阶段</strong>：遍历 <code>AST</code>，找出其中的静态节点，并打上标记；</li><li><strong>代码生成阶段</strong>：将 <code>AST</code> 转换成渲染函数；</li></ol><p><strong>模板解析阶段的运行流程：</strong><br>解析器根据解析内容的不同分为<code>HTML解析器</code>，<code>文本解析器</code>和<code>过滤器解析器</code>。</p><ul><li>在解析器主线中先调用HTML解析器 <code>parseHTML</code> 函数对模板字符串进行解析，</li><li>如果在解析过程中遇到文本信息，就会调用文本解析器<code>parseText</code>进行解析，</li><li>如遇到过滤器信息则再调用过滤解析器<code>parseFilters</code>进行解析</li></ul><p>最终完成对整个模板字符串的解析。</p><h3 id="18-自定义指令"><a href="#18-自定义指令" class="headerlink" title="18. 自定义指令"></a>18. 自定义指令</h3><blockquote><p>只有当所需功能只能通过直接的 DOM 操作来实现时，才应该使用自定义指令。</p></blockquote><h4 id="指令钩子"><a href="#指令钩子" class="headerlink" title="指令钩子"></a>指令钩子</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myDirective <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 在绑定元素的 attribute 前</span>  <span class="token comment">// 或事件监听器应用前调用</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 下面会介绍各个参数的细节</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 在元素被插入到 DOM 前调用</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 在绑定元素的父组件</span>  <span class="token comment">// 及他自己的所有子节点都挂载完成后调用</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 绑定元素的父组件更新前调用</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 在绑定元素的父组件</span>  <span class="token comment">// 及他自己的所有子节点都更新后调用</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 绑定元素的父组件卸载前调用</span>  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 绑定元素的父组件卸载后调用</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="钩子参数"><a href="#钩子参数" class="headerlink" title="钩子参数"></a>钩子参数</h4>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础知识总结</title>
      <link href="/2021-05-01-javascript-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2021-05-01-javascript-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-作用域和作用域链"><a href="#1-作用域和作用域链" class="headerlink" title="1. 作用域和作用域链"></a>1. 作用域和作用域链</h3><p>JS中存在<code>全局作用域</code>、<code>函数作用域</code>以及<code>块作用域</code>（ES6新增），各个作用域之间相互嵌套组成了一条作用域链。作用域查找始终从运行时所处的最内部作用域开始，沿着作用域链逐级向上进行查找，直到遇见 第一个匹配的标识符为止。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 全局作用域</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// foo函数作用域，可以访问全局作用域中的变量</span>    <span class="token keyword">const</span> b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// bar函数作用域，可以访问foo函数作用域及全局作用域中的变量</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, 20, 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Promise"><a href="#2-Promise" class="headerlink" title="2. Promise"></a>2. Promise</h3><p><strong>Promise是什么</strong><br><code>Promise</code> 是 <code>ES6</code> 新增的语法，是一种异步编程的一种解决方案，<code>Promise</code> 本质上是一个绑定了回调的对象。 <code>Promise</code> 在一定程度上解决了回调函数的书写结构问题，解决了回调地狱的问题。<code>Promise</code> 可以看作是一个状态机，它有三种状态：<code>pending</code>，<code>fulfilled</code>，<code>rejected</code>，其中初始状态是 <code>pending</code>，可以通过函数 <code>resolve</code> 把状态变为 <code>fulfilled</code>，或者通过函数 <code>reject</code> 把状态变为 <code>rejected</code>，状态一经改变就不能再次变化。</p><p><strong>常用API</strong><br><code>Promise.all()</code>: 接受含多个受监视Promise的可迭代对象作为唯一参数，返回一个Promise。只有当可迭代对象中的所有Promise都完成，返回的Promise才会完成，只要有一个被拒绝，返回的Promise就会被立即拒绝。</p><p><code>Promise.race()</code>: 接受含多个受监视Promise的可迭代对象作为唯一参数，返回一个Promise，只要有一个被解决（完成或拒绝），返回的Promise就会被立即解决。</p><p><code>Promise.any()</code>: 接受含多个受监视Promise的可迭代对象作为唯一参数，返回一个Promise，只要有一个被完成，返回的Promise就会变成完成状态，如果所有的promise都被拒绝，返回的promise就会变成拒绝状态。</p><p><code>Promise.allSettled()</code>: 接受含多个受监视Promise的可迭代对象作为唯一参数，返回一个Promise。当可迭代对象中的所有Promise都解决时，返回的Promise会被完成，完成的结果是一个包含所有promise结果的对象数组。</p><p><strong>实现</strong><br><a href="https://snail-lu.github.io/2022-04-25-promise-shi-xian-yuan-li.html">Promise实现原理</a></p><h3 id="3-async-await"><a href="#3-async-await" class="headerlink" title="3. async/await"></a>3. async/await</h3><p><code>async/await</code> 是 <code>Generator</code>函数的语法糖，作用是<strong>用同步的方式，执行异步操作</strong>。<br><code>async</code> 函数的实现原理，就是将 <code>Generator</code> 函数和自动执行器，包装在一个函数里。<br><strong>实现</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// 等同于</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// spawn是自动执行器函数，自动调用generator的next方法</span>    <span class="token keyword">return</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// spawn函数实现</span><span class="token keyword">function</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token parameter">genF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">genF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">nextF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> next<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                next <span class="token operator">=</span> <span class="token function">nextF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">step</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">return</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">step</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">return</span> iterator<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">step</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-ES6常用新特性"><a href="#4-ES6常用新特性" class="headerlink" title="4. ES6常用新特性"></a>4. ES6常用新特性</h3><p><a href="https://snaillu.gitee.io/2019-10-30-es6-chang-yong-te-xing-zong-jie.html">详解</a></p><h3 id="5-数据类型的判断方法"><a href="#5-数据类型的判断方法" class="headerlink" title="5. 数据类型的判断方法"></a>5. 数据类型的判断方法</h3><p><a href="https://snaillu.gitee.io/2022-04-24-javascript-shu-ju-lei-xing-pan-duan.html">JavaScript数据类型判断</a></p><h3 id="6-继承"><a href="#6-继承" class="headerlink" title="6. 继承"></a>6. 继承</h3><p><a href="https://snaillu.gitee.io/2022-07-16-javascript-zhong-de-ji-cheng.html">JavaScript中的继承</a></p><h3 id="7-原型链"><a href="#7-原型链" class="headerlink" title="7. 原型链"></a>7. 原型链</h3><p><a href="https://snaillu.gitee.io/2021-09-30-javascript-yuan-xing-yu-yuan-xing-lian.html">JavaScript原型与原型链</a></p><h3 id="8-闭包"><a href="#8-闭包" class="headerlink" title="8. 闭包"></a>8. 闭包</h3><p><code>闭包</code>是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token comment">// 改善输出结果</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-事件循环、微任务、宏任务"><a href="#9-事件循环、微任务、宏任务" class="headerlink" title="9. 事件循环、微任务、宏任务"></a>9. 事件循环、微任务、宏任务</h3><p><a href="https://snaillu.gitee.io/2021-12-14-javascript-zhi-event-loop.html">JavaScript之Event Loop</a></p><h3 id="10-深拷贝"><a href="#10-深拷贝" class="headerlink" title="10. 深拷贝"></a>10. 深拷贝</h3><p><strong>实现方式一：</strong><br>原理：利用<code>JSON.stringify</code>序列化和<code>JSON.parse</code>反序列化<br>缺点：对象中<code>undefined</code>、<code>function</code>、<code>symbol</code>这三种类型的值会被过滤掉</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">234</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token function-variable function">e</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">h</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'fsd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">k</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"Author"</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;"a":"123","b":234,"c":true,"d":null,"h":&#123;&#125;,"k":&#123;&#125;&#125;</span><span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现方式二：</strong><br>原理：利用<code>Object.assign(target, source1, source2)</code><br>缺点：无对对象里面嵌套的对象进行深拷贝，相当于只是对一层引用对象进行深拷贝</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">234</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现方式三：</strong><br>原理：利用扩展运算符<br>缺点：无对对象里面嵌套的对象进行深拷贝，相当于只是对一层引用对象进行深拷贝</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">234</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现方式四：</strong><br>原理：递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//判断拷贝的obj是对象还是数组</span>  <span class="token keyword">const</span> objClone <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//obj不能为空，并且是对象或者是数组 因为null也是object</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//obj里面属性值不为空并且还是对象，进行深度拷贝</span>                  objClone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归进行深度的拷贝</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  objClone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//直接拷贝</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> objClone<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-this指向"><a href="#11-this指向" class="headerlink" title="11. this指向"></a>11. this指向</h3><p><a href="https://snaillu.gitee.io/2022-05-01-javascript-zhong-de-this.html">JavaScript中的this</a></p><h3 id="12-箭头函数和普通函数有什么区别"><a href="#12-箭头函数和普通函数有什么区别" class="headerlink" title="12. 箭头函数和普通函数有什么区别"></a>12. 箭头函数和普通函数有什么区别</h3><ul><li>没有<code>this</code>、<code>super</code>、<code>arguments</code>及<code>new.target</code>绑定，<code>this</code>、<code>super</code>、<code>arguments</code>及<code>new.target</code>的值由所在的、最靠近的非箭头函数来决定；</li><li>不能被使用<code>new</code>调用；</li><li>没有原型；</li><li>不能更改<code>this</code>；</li><li>不允许重复的具名参数，传统的函数中参数可以重名。</li></ul><h3 id="13-防抖与节流"><a href="#13-防抖与节流" class="headerlink" title="13. 防抖与节流"></a>13. 防抖与节流</h3><p><strong>防抖</strong>：事件持续触发不执行，停止触发指定时间之后才执行一次。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @fn : 要执行的函数 * @delay : 执行函数的时间间隔（毫秒） */</span>  <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            timer <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>节流</strong>：事件重复触发，不会每次都执行，每间隔一段时间执行一次。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @fn : 要执行的函数 * @delay : 每次函数的时间间隔 */</span>  <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>    <span class="token comment">// 定时器</span>     <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-instanceof原理"><a href="#14-instanceof原理" class="headerlink" title="14. instanceof原理"></a>14. instanceof原理</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">instance_of</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token constant">RP</span> <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// 构造函数的原型</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token constant">RP</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 一定要严格比较</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    left <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span> <span class="token comment">// 沿着原型链重新赋值</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15-和"><a href="#15-和" class="headerlink" title="15. == 和 ==="></a>15. <code>==</code> 和 <code>===</code></h3><ul><li><code>==</code> 和 <code>!=</code> — 先转换数据类型再比较</li><li><code>===</code> 和 <code>!==</code> — 仅比较而不转换数据类型</li></ul><p><code>==</code>和 <code>!=</code> 遵循下列转换规则：</p><ul><li>如果有一个操作数是<strong>布尔值</strong>，则在比较相等性之前先将其转换为数值：<strong>false转换为0，true转换为1</strong></li><li>一个是字符串，一个是数值，则在比较相等性之前先将字符串转换为数值</li><li>一个是对象，一个不是对象，则调用对象的 <code>valueOf()</code> 方法，得到基本数据类型后再按前面的规则比较</li><li><code>null</code> 和 <code>undefined</code> 不能转换为其他任何值</li></ul><p><code>==</code>和<code>!=</code> 在比较时需要遵循下列规则：</p><ul><li><code>null</code> 和 <code>undefined</code> 是相等的</li><li><code>NaN</code> 与任何值都不相等，包括它自己</li><li>两个操作数都是对象，如果两个操作数指向同一个对象，则为<code>true</code>，否则为<code>false</code></li></ul><p>特殊情况比较结果：<br>|表达式|值|<br>|—|—|<br>|null == undefined|true|<br>|NaN == NaN|false|<br>|false == 0|true|<br>|true == 1|true|<br>|true == 2|false|<br>|undefined == 0|false|<br>|null == 0|false|</p><h3 id="16-call、bind、apply原理"><a href="#16-call、bind、apply原理" class="headerlink" title="16. call、bind、apply原理"></a>16. call、bind、apply原理</h3><blockquote><p>MDN:<br>call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * call的模拟实现 */</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this指向调用myCall方法的函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>    context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>    <span class="token comment">// 将调用myCall的函数赋值为context对象的方法</span>    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 利用context.fn()来执行原函数，原函数中的this就指向了context</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn <span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MDN:<br>apply() 方法调用一个具有给定 this 值的函数，以及以一个数组（或一个类数组对象）的形式提供的参数。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * apply的模拟实现 * 原理与call一样，区别仅在于参数的处理上 */</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> result <span class="token comment">// 处理参数和 call 有区别  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MDN:<br>bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * bind的模拟实现 *  */</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment">// 保存调用bind时传递的参数</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// 返回一个函数</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">_this</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 修改this及合并参数</span>        <span class="token keyword">return</span> <span class="token function">_this</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-new的原理"><a href="#17-new的原理" class="headerlink" title="17. new的原理"></a>17. new的原理</h3><p>使用 <code>new</code> 来调用函数，会自动执行下面的操作：</p><ol><li>创建一个空对象<code>&#123;&#125;</code></li><li>将这个新对象的原型对象指向构造函数的原型属性，以继承原型上的方法</li><li>将构造函数中的this指向到新创建的对象并执行构造函数，以获取实例属性</li><li>如果构造函数执行后返回了对象，就将该对象作为结果返回；否则就将上面创建的新对象作为结果返回</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 简单实现</span><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">Fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 原型式继承</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行构造函数</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">Fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> student1 <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  &#123;"name":"Mike","age":20&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-事件委托"><a href="#18-事件委托" class="headerlink" title="18. 事件委托"></a>18. 事件委托</h3><p>事件传播的 3 个阶段：</p><ul><li>捕获阶段（Capturing phase）—— 从window，document 和根元素开始，事件向下扩散至目标元素的祖先</li><li>目标阶段（Target phase）—— 事件到达目标元素</li><li>冒泡阶段（Bubbling phase）—— 事件从元素上开始冒泡，一直到根元素，document 和 window。</li></ul><ol><li><p>为何使用事件委托？<br>在 JavaScript 中，页面内事件处理程序的个数会直接影响页面的整体性能，因为每个事件处理程序都是对象，对象会占用内存，内存中的对象越多，页面的性能则越差。此外，事件处理程序需要与 DOM 节点进行交互，访问 DOM 的次数越多，引起浏览器重绘和重排的次数也就越多，从而影响页面的性能。</p></li><li><p>事件委托实现原理<br>事件委托是利用事件的<code>冒泡原理</code>来实现的，大致可以分为三个步骤：</p><ol><li>确定要添加事件元素的父级元素；</li><li>给父元素定义事件，监听子元素的冒泡事件；</li><li>使用 event.target 来定位触发事件冒泡的子元素。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nest.js基础知识总结</title>
      <link href="/2021-02-03-nest-js-ji-chu-zhi-shi-zong-jie.html"/>
      <url>/2021-02-03-nest-js-ji-chu-zhi-shi-zong-jie.html</url>
      
        <content type="html"><![CDATA[<p>NestJS 的设计模式，主要就是 <code>Controller</code>、<code>Service</code>、<code>Module</code> 共同努力，形成了一个模块。</p><ul><li><code>Controller</code>：传统意义上的控制器，提供 api 接口，负责处理路由、中转、验证等一些简洁的业务；</li><li><code>Service</code>：又称为 <code>Provider</code>， 是一系列服务、repo、工厂方法、helper 的总称，主要负责处理具体的业务，如数据库的增删改查、事务、并发等逻辑代码；</li><li><code>Module</code>：负责将 <code>Controller</code> 和 <code>Service</code> 连接起来，类似于 <code>namespace</code> 的概念；</li></ul><h3 id="1-Service"><a href="#1-Service" class="headerlink" title="1. Service"></a>1. Service</h3><p>使用nest-cli提供的指令可以快速创建文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nest g <span class="token punctuation">[</span>文件类型<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件目录（src目录下）<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nest g <span class="token function">service</span> user server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令在src目录下创建了<code>server/user</code>文件夹，其中包含两个文件<code>user.service.spec.ts</code>（不用管）和<code>user.service.ts</code>。</p><p>后面的<code>user</code>相关的业务基本都在<code>user.service.ts</code>中实现。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/server/user/user.service.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Injectable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Controller"><a href="#2-Controller" class="headerlink" title="2. Controller"></a>2. Controller</h3><p>使用指令创建控制器文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nest g controller user server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令会在<code>server/user</code>文件夹下创建<code>user.controller.spec.ts</code>(不用管)和<code>user.controller.ts</code>两个文件。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/server/user/user.controller.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Controller <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-管道"><a href="#3-管道" class="headerlink" title="3. 管道"></a>3. 管道</h3><blockquote><p>数据传输对象（DTO：Data Transfer Object），是一种设计模式之间传输数据的软件应用系统。数据传输目标往往是数据访问对象从数据库中检索数据。数据传输对象与数据交互对象或数据访问对象之间的差异是一个以不具有任何行为除了存储和检索的数据（访问和存取器）。</p></blockquote><p>管道有两个类型：</p><ul><li>转换：管道将输入数据转换为所需的数据输出；</li><li>验证：对输入数据进行验证，如果验证成功继续传递，验证失败则抛出异常；</li></ul><p><code>Nest</code>自带三个开箱即用的管道：<code>ValidationPipe</code>、<code>ParseIntPipe</code>、<code>ParseUUIDPipe</code>。</p><h3 id="4-中间件"><a href="#4-中间件" class="headerlink" title="4. 中间件"></a>4. 中间件</h3><p>中间件是在路由处理程序之前调用的函数。</p><p>中间件函数可以执行以下任务：</p><ul><li>执行任何代码。</li><li>对请求和响应对象进行更改。</li><li>结束请求-响应周期。</li><li>调用堆栈中的下一个中间件函数。</li><li>如果当前的中间件函数没有结束请求-响应周期，它必须调用<code>next()</code>将控制传递给下一个中间件函数。否则，请求将被挂起。</li></ul><h3 id="5-异常过滤器"><a href="#5-异常过滤器" class="headerlink" title="5. 异常过滤器"></a>5. 异常过滤器</h3><p>内置的<code>异常层</code>负责处理整个应用程序中的所有抛出的异常。</p><h3 id="6-管道"><a href="#6-管道" class="headerlink" title="6. 管道"></a>6. 管道</h3><p>管道有两个类型：</p><ul><li>转换：管道将输入数据转换为所需的数据输出</li><li>验证：对输入数据进行验证，如果验证成功继续传递，验证失败则抛出异常。</li></ul><p>管道<code>参数（arguments）</code>会由控制器的路由处理程序进行处理。Nest会在调用这个方法之前插入一个管道，管道会先拦截方法的调用参数，进行转换或是验证处理，然后用转换好或是验证好的参数调用原方法。</p><p><code>Nest</code>内置6个开箱即用的管道：</p><ul><li>ValidationPipe</li><li>ParseIntPipe</li><li>ParseBoolPipe</li><li>ParseArrayPipe</li><li>ParseUUIDPipe</li><li>DefaultValuePipe</li></ul><h3 id="7-守卫"><a href="#7-守卫" class="headerlink" title="7. 守卫"></a>7. 守卫</h3><h3 id="8-拦截器"><a href="#8-拦截器" class="headerlink" title="8. 拦截器"></a>8. 拦截器</h3><ul><li>在函数执行之前/之后绑定额外的逻辑</li><li>转换从函数返回的结果</li><li>转换从函数抛出的异常</li><li>扩展基本函数行为</li><li>根据所选条件完全重写函数</li></ul><h3 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h3><ul><li><a href="https://juejin.cn/collection/6845244185432293389">布拉德特皮.NestJS实战教程.掘金.</a></li><li><a href="https://docs.nestjs.cn/">Nestjs中文文档</a></li><li><a href="https://typeorm.biunav.com/zh/">TypeORM中文文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Nest.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置---启用gzip压缩</title>
      <link href="/2020-12-13-nginx-pei-zhi-qi-yong-gzip-ya-suo.html"/>
      <url>/2020-12-13-nginx-pei-zhi-qi-yong-gzip-ya-suo.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、开发环境"><a href="#一、开发环境" class="headerlink" title="一、开发环境"></a>一、开发环境</h3><ul><li>版本： nginx/1.16.1。</li></ul><h3 id="二、配置实现"><a href="#二、配置实现" class="headerlink" title="二、配置实现"></a>二、配置实现</h3><p>参数详解：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开启或关闭gzip模块（实时压缩输出）</span><span class="token function">gzip</span> on<span class="token operator">|</span>off<span class="token punctuation">;</span>     <span class="token comment"># 开启或关闭gzip静态文件处理模块（提前压缩，需要nginx中添加上http_gzip_static_module模块）</span>gzip_static on<span class="token operator">|</span>off<span class="token punctuation">;</span><span class="token comment"># 设置压缩缓冲区大小，例如"gizp_buffers 4 8k"就是设置为4个8k内存作为压缩结果数据流缓存</span>gzip_buffers number size<span class="token punctuation">;</span>      <span class="token comment"># 设置允许压缩的页面最小字节数; 页面字节数从header头中的Content-Length中进行获取，建议设置成大于1k，小于1k没有压缩的必要. </span>gzip_min_length length<span class="token punctuation">;</span>         <span class="token comment"># 识别http的协议版本。可以不用配置。</span>gzip_http_version <span class="token number">1.0</span><span class="token operator">|</span><span class="token number">1.1</span><span class="token punctuation">;</span><span class="token comment"># 设置压缩比，可以是0到9中的任一个，级别越高，压缩结果就越小，但同时消耗CPU资源越高，一般折中取6</span>gzip_comp_level <span class="token punctuation">[</span><span class="token number">1</span>-9<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># 设置需要压缩的MIME类型，如果不在设置类型范围内的请求不进行压缩，线上配置时尽可能配置多的压缩类型。</span><span class="token function">gzip</span> types mime-type <span class="token punctuation">[</span>mime-type <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含"Via"的 header头。</span>gzip_proxied <span class="token punctuation">[</span>off<span class="token operator">|</span>expired<span class="token operator">|</span>no-cache<span class="token operator">|</span>no-store<span class="token operator">|</span>private<span class="token operator">|</span>no_last_modified<span class="token operator">|</span>no_etag<span class="token operator">|</span>auth<span class="token operator">|</span>any<span class="token punctuation">]</span><span class="token comment"># 配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span>gzip_disable <span class="token string">"MSIE [1-6]\."</span><span class="token punctuation">;</span><span class="token comment"># 增加vary头</span>gzip_vary on<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线上配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http <span class="token punctuation">&#123;</span>    <span class="token punctuation">..</span>.        <span class="token comment"># gizp压缩配置</span>    <span class="token function">gzip</span> on<span class="token punctuation">;</span>    gzip_min_length 1k<span class="token punctuation">;</span>    gzip_buffers <span class="token number">4</span> 8k<span class="token punctuation">;</span>    gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>    gzip_comp_level <span class="token number">6</span><span class="token punctuation">;</span>    gzip_types text/plain qpplication/x-javascript text/css application/xml text/javascript application/javascript application/json<span class="token punctuation">;</span>    gzip_disable <span class="token string">"MSIE [1-6]"</span><span class="token punctuation">;</span>    gzip_vary on<span class="token punctuation">;</span>        <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、最终效果"><a href="#三、最终效果" class="headerlink" title="三、最终效果"></a>三、最终效果</h3><p>未启用gzip时，网站资源访问速度：<br><img src="/medias/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBcfa2e5ef98f92e47587cb10bcd36a65d?method=download&shareKey=bdeff67369d6b02e4604fa7c2e670e55" alt="image"></p><p>启用gizp后：<br><img src="/medias/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB93a8f32075283b4c36ec56a8dfd1c92c?method=download&shareKey=5e9be38f76768495e915a391db5e2038" alt="image"></p><h3 id="四、参考文档"><a href="#四、参考文档" class="headerlink" title="四、参考文档"></a>四、参考文档</h3><p><a href="https://www.nginx.cn/doc/standard/httpgzip.html">1.Nginx中文文档–HttpGzip模块</a><br><a href="https://cloud.tencent.com/developer/article/1374023">2.Nginx性能优化功能- Gzip压缩(大幅度提高页面加载速度)</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Gzip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置---同一端口下部署不同项目</title>
      <link href="/2020-12-12-nginx-pei-zhi-tong-yi-duan-kou-xia-bu-shu-bu-tong-xiang-mu.html"/>
      <url>/2020-12-12-nginx-pei-zhi-tong-yi-duan-kou-xia-bu-shu-bu-tong-xiang-mu.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、功能描述"><a href="#一、功能描述" class="headerlink" title="一、功能描述"></a>一、功能描述</h3><ul><li>实现： 在同一端口下部署一个react项目和一个vue项目，通过访问<code>/</code>或<code>/home</code>来访问vue项目，通过访问<code>/portfolio</code>路径来访问react项目。</li><li>版本： <code>nginx/1.16.1</code>、<code>react/16.13.1</code>、<code>react-router-dom/5.2.0</code>、<code>vue/2.6.11</code>、<code>vue-router/3.4.9</code>。</li></ul><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="1-react项目配置"><a href="#1-react项目配置" class="headerlink" title="1.react项目配置"></a>1.react项目配置</h4><ol><li><code>package.json</code>中增加配置<code>homepage</code>字段，以域名<code>www.abc.cn</code>为例:</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://www.abc.cn/portfolio"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>BroserRouter</code>中配置<code>basename</code>属性</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 其他引入项省略</span><span class="token comment">// 引入路由组件</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>    BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span>    Switch<span class="token punctuation">,</span>    Route<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token comment">// 增加basename属性</span>        <span class="token operator">&lt;</span>Router basename<span class="token operator">=</span><span class="token string">"/portfolio"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>app<span class="token punctuation">&#125;</span><span class="token operator">></span>                <span class="token operator">&lt;</span>LeftNav <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>Switch<span class="token operator">></span>                        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/:routerid"</span> exact<span class="token operator">></span>                            <span class="token operator">&lt;</span>DemoList <span class="token operator">/</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/:routerid/:demo"</span> exact<span class="token operator">></span>                            <span class="token operator">&lt;</span>DemoDetail <span class="token operator">/</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> exact<span class="token operator">></span>                            <span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>                    <span class="token operator">&lt;</span>CopyRight <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-vue项目配置"><a href="#2-vue项目配置" class="headerlink" title="2.vue项目配置"></a>2.vue项目配置</h4><ol><li><code>router</code>中配置基础路径</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span> <span class="token comment">//基础路径</span>  routes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>vue.config.js</code>（项目中没有该文件的，可以在项目根目录下创建）中配置基础路径</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">publicPath</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span>    <span class="token operator">?</span> <span class="token string">'/home'</span>    <span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token comment">// 其他配置内容省略</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Nginx配置"><a href="#3-Nginx配置" class="headerlink" title="3.Nginx配置"></a>3.Nginx配置</h4><p><code>nginx.conf</code>中相关配置（我的nginx页面根目录为<code>/data/www</code>，vue项目部署在<code>/data/www/home</code>目录下，react项目部署在<code>/data/www/portfolio</code>目录下）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    server_name  <span class="token operator">&lt;</span>your_server_name<span class="token operator">></span><span class="token punctuation">;</span>    root /data/www<span class="token punctuation">;</span>    <span class="token comment"># Load configuration files for the default server block.</span>    include /etc/nginx/default.d/*.conf<span class="token punctuation">;</span>    <span class="token comment"># http to https</span>    <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>    <span class="token comment"># /重定向到/home</span>    location / <span class="token punctuation">&#123;</span>            rewrite / /home permanent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    location /home <span class="token punctuation">&#123;</span>            index index.html index.htm<span class="token punctuation">;</span>            try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /home/index.html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    location /portfolio <span class="token punctuation">&#123;</span>            index index.html index.htm<span class="token punctuation">;</span>            try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /portfolio/index.html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    error_page <span class="token number">404</span> /404.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /404.html <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 如果没有配置ssl或者不使用https可以忽略下列配置</span>server <span class="token punctuation">&#123;</span>    listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>    server_name  <span class="token operator">&lt;</span>your_server_name<span class="token operator">></span><span class="token punctuation">;</span>    root         /data/www<span class="token punctuation">;</span>    <span class="token comment"># ssl证书相关配置</span>    ssl_certificate <span class="token string">"/etc/nginx/cert/server.crt"</span><span class="token punctuation">;</span>    ssl_certificate_key <span class="token string">"/etc/nginx/cert/server.key"</span><span class="token punctuation">;</span>    ssl_session_cache shared:SSL:1m<span class="token punctuation">;</span>    ssl_session_timeout  5m<span class="token punctuation">;</span>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>RC4:<span class="token operator">!</span>DHE<span class="token punctuation">;</span>    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>    <span class="token comment"># Load configuration files for the default server block.</span>    include /etc/nginx/default.d/*.conf<span class="token punctuation">;</span>    location / <span class="token punctuation">&#123;</span>            rewrite / /home permanent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    location /home <span class="token punctuation">&#123;</span>            index index.html index.htm<span class="token punctuation">;</span>            try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /home/inex.html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    location /portfolio <span class="token punctuation">&#123;</span>            index index.html index.htm<span class="token punctuation">;</span>            try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /portfolio/index.html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    error_page <span class="token number">404</span> /404.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /404.html <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、问题解决"><a href="#三、问题解决" class="headerlink" title="三、问题解决"></a>三、问题解决</h3><p>如上将两个项目部署在二级目录后，react项目下的子路由可以正常访问，且刷新访问也正常。vue项目的子路由通过<code>&lt;router-link&gt;&lt;/router-link&gt;</code>组件可以正常访问，但是刷新后会报“500 Internal Server Error”，可以通过下面方式解决。<br>修改nginx.conf中部分配置： </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location /home <span class="token punctuation">&#123;</span>        index index.html index.htm<span class="token punctuation">;</span>        try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ @router<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>location @router <span class="token punctuation">&#123;</span>        rewrite ^.*$ /home/index.html last<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Vue </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置---解决History路由报错问题</title>
      <link href="/2020-12-11-nginx-pei-zhi-jie-jue-history-lu-you-bao-cuo-wen-ti.html"/>
      <url>/2020-12-11-nginx-pei-zhi-jie-jue-history-lu-you-bao-cuo-wen-ti.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、功能描述"><a href="#一、功能描述" class="headerlink" title="一、功能描述"></a>一、功能描述</h3><ul><li><strong>实现</strong>：<ul><li> vue项目中使用<code>history</code>模式的路由时，解决访问深层级的路由返回404的问题。</li><li> nginx配置了ssl证书的情况下，解决<code>history</code>路由刷新报404的问题。</li></ul></li><li><strong>版本</strong>：nginx/1.16.1。</li></ul><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><p><code>nginx.conf</code>中相关配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    server_name  <span class="token operator">&lt;</span>your-server-name<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token comment"># http 转成 https，配置了ssl证书时启用</span>    <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>    <span class="token comment"># 解决history路由刷新问题</span>    location / <span class="token punctuation">&#123;</span>        <span class="token comment"># index.html文件在服务器中的存储目录</span>        root /data/www<span class="token punctuation">;</span>  <span class="token comment"># /data/www需要修改为你服务器中的目录</span>        index index.html index.htm<span class="token punctuation">;</span>                <span class="token comment">#资源访问失败后定向到index.html</span>        try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    error_page <span class="token number">404</span> /404.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /404.html <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># SSL证书配置</span>server <span class="token punctuation">&#123;</span>    listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>    server_name  <span class="token operator">&lt;</span>your-server-name<span class="token operator">></span><span class="token punctuation">;</span>    ssl_certificate <span class="token operator">&lt;</span>your_ssl_certificate_filepath<span class="token operator">></span><span class="token punctuation">;</span>    ssl_certificate_key <span class="token operator">&lt;</span>your_ssl_certificate_key_filepath<span class="token operator">></span><span class="token punctuation">;</span>    ssl_session_cache shared:SSL:1m<span class="token punctuation">;</span>    ssl_session_timeout  5m<span class="token punctuation">;</span>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>RC4:<span class="token operator">!</span>DHE<span class="token punctuation">;</span>    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>    <span class="token comment"># 解决http转https后路由报错问题</span>    location / <span class="token punctuation">&#123;</span>        root /data/www<span class="token punctuation">;</span>        index index.html index.htm<span class="token punctuation">;</span>        try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    error_page <span class="token number">404</span> /404.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /404.html <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Nginx </tag>
            
            <tag> History </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人网站搭建基本流程</title>
      <link href="/2020-12-01-ge-ren-wang-zhan-da-jian-ji-ben-liu-cheng.html"/>
      <url>/2020-12-01-ge-ren-wang-zhan-da-jian-ji-ben-liu-cheng.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、购买域名"><a href="#一、购买域名" class="headerlink" title="一、购买域名"></a>一、购买域名</h3><p><a href="https://www.huaweicloud.com/">华为云</a>、<a href="https://cloud.tencent.com/">腾讯云</a>、<a href="https://www.aliyun.com/">阿里云</a>一般都有新用户特惠活动，可以以很优惠的价格就购买到一个域名。这里以华为云为例演示购买流程：<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdiep9.png" alt="购买域名"><br>根据自己需求确定好域名后缀后，在输入框中输入域名进行校验，如果域名尚未被别人注册即可购买。<br>购买成功后，即可在控制台域名列表中查看到自己购买的域名。后续流程可以直接参照官方指引即可。<br>详细流程：参见<a href="https://support.huaweicloud.com/qs-domain/domain_qs_240000.html">华为云官方详细介绍文档</a>。</p><h3 id="二、购买云服务器"><a href="#二、购买云服务器" class="headerlink" title="二、购买云服务器"></a>二、购买云服务器</h3><p>为了享受新用户优惠，在腾讯云购买了云服务器（CentOs 7.5 64位）。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdin61.png" alt="购买服务器"><br>购买成功后，在控制台–云服务器–实例，即可看到自己的云服务器实例。</p><h3 id="三、网站备案"><a href="#三、网站备案" class="headerlink" title="三、网站备案"></a>三、网站备案</h3><p>通过腾讯云备案小程序可以很方便的进行网站备案。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/17/vBW1zj.png" alt="腾讯云网站备案小程序"><br>大致流程如下：</p><ol><li>在将备案信息填写提交后，腾讯云会先对备案信息进行审核，帮助我们处理填写中可能有误或不恰当的信息。需要注意保持电话畅通。</li><li>腾讯云初审通过后，会将备案信息提交至相应的管局审核。此时会收到工信部的备案核验短信，需要在收到短信24小时内进入<a href="https://beian.miit.gov.cn/">工信部备案管理系统</a>进行短信核验。验证步骤参见<a href="https://cloud.tencent.com/document/product/243/13435#validation.step">文档</a>。</li><li>管局审核会有工作人员电话联系以确认身份信息和域名等信息。所以也要保持电话畅通。</li></ol><h3 id="四、域名解析"><a href="#四、域名解析" class="headerlink" title="四、域名解析"></a>四、域名解析</h3><p>域名解析一般在域名注册服务商处完成。我的域名是在华为云注册完成的，所以在华为云控制台来完成域名解析。<br>华为云有详细的文档来说明<a href="https://support.huaweicloud.com/qs-dns/dns_qs_0002.html">如何配置域名解析</a>以及<a href="https://support.huaweicloud.com/dns_faq/dns_faq_015.html">测试域名解析是否生效</a>，一步步跟着操作就好。</p><h3 id="五、网站内容部署"><a href="#五、网站内容部署" class="headerlink" title="五、网站内容部署"></a>五、网站内容部署</h3><p>在正确完成域名解析之后，就可以尝试通过域名来直接访问我们的网站。但由于我们还未对网站部署任何项目，所以网站是无法访问的。<br>这里简单讲述部署一个简单项目的流程：  </p><ol><li>使用vue创建一个基本项目，对页面进行排版布局后，打包构建，生成dist目录。  </li><li>在腾讯云控制台–云服务器–实例中找到自己的服务器，在右侧操作按钮区域进行==登录==操作。(登录密码在==站内信==中可以看到)。</li><li>登录成功后就进入了终端操作界面。使用yum来安装Nginx。  </li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 安装nginxyum <span class="token function">install</span> nginx -y// 启动nginxnginx// 此时访问<span class="token operator">==</span>http://<span class="token operator">&lt;</span>域名<span class="token operator">>=</span><span class="token operator">=</span>，可以看到nginx的测试页面。 ``<span class="token variable"><span class="token variable">`</span>    <span class="token number">4</span>. 修改nginx配置，重设服务器访问路径。    <span class="token variable">`</span></span>`` <span class="token function">bash</span>// 通过vi打开<span class="token operator">&amp;&amp;</span>编辑nginx.conf文件<span class="token function">vi</span> /etc/nginx/nginx.conf// 切换为输入模式i// 找到server <span class="token punctuation">&#123;</span> listen <span class="token number">80</span> <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span>，将默认的root值/usr/share/nginx/html修改为/data/www// 保存并退出viESC:wq// 重启ngigx使配置生效nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>回到终端中根目录下创建/data/www目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /data/www<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>使用FileZilla<a href="https://www.filezilla.cn/download">[下载地址]</a>登录服务器并将vue项目dist目录下的代码上传到/data/www目录下。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdiEY4.jpg" alt="部署">      </li><li>这时再访问 ==http://&lt;域名&gt;== 就可以看到自己写的页面啦~  </li></ol><h3 id="六、申请免费SSL证书并安装"><a href="#六、申请免费SSL证书并安装" class="headerlink" title="六、申请免费SSL证书并安装"></a>六、申请免费SSL证书并安装</h3><p>我这里是通过华为云申请的。通过==控制台==–==服务列表==–==安全==–==SSL证书管理==，进入到SSL证书管理页面，根据<a href="https://support.huaweicloud.com/qs-scm/scm_07_0001.html">流程指引</a>进行申请即可。一般证书在域名验证完成后很快就会签发了。<br>域名签发完成后，需要将证书安装到服务器上，安装步骤参见文档<a href="https://cloud.tencent.com/document/product/1207/47027">Nginx服务器证书安装</a> 。<br>安装证书中比较重要的几个点：  </p><ul><li>由于版本问题，nginx.conf中的配置内容可能与指引流程中的不完全一样，将注释符号移除后，重点修改==server_name==、==ssl_certificate==、==ssl_certificate_key==几个字段。</li><li>nginx安装目录可能与指引流程中的不一致。比如我的nginx目录为/etc/nginx，可以在nginx目录下新建一个文件夹cert，将证书放在该目录下。这样在nginx.conf配置时，ssl_certificate、ssl_certificate_key就分别配置为/etc/nginx/cert/&lt;证书文件名&gt;、/etc/nginx/cert/&lt;私钥文件名&gt;。注：路径不要包含中文。</li><li>最好配置下<a href="https://cloud.tencent.com/document/product/400/35244">HTTP自动跳转HTTPS的安全配置</a></li></ul><h3 id="七、公安备案"><a href="#七、公安备案" class="headerlink" title="七、公安备案"></a>七、公安备案</h3><p>目前基本上各地都在要求ICP备案完成后的30天内必须进行<a href="https://cloud.tencent.com/document/product/243/19142">公安备案</a>。我在未部署网站内容之前申请了公安备案，审核没有通过。电话咨询审核人员后告知网站需要部署一些基本内容。<br>公安备案过程中可能遇到的问题：  </p><ul><li>图片无法上传<br>解决办法：按照网站提示安装flash，或者直接使用360浏览器。</li><li>提交后出现“系统维护中，请稍后重试”<br>解决办法：次日或改日重试</li><li>网络接入服务商：按照服务器购买平台备案指引中的信息填写。</li><li>域名注册服务商：按照域名购买平台备案指引中中的信息填写。</li><li>服务类型等配置按照下述截图填写：<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdiVfJ.png" alt="公安备案">  </li></ul><h3 id="八、网站底部添加备案信息"><a href="#八、网站底部添加备案信息" class="headerlink" title="八、网站底部添加备案信息"></a>八、网站底部添加备案信息</h3><p>等拿到公安备案号后，需要和ICP备案号一起放在网站底部。并分别配置<a href="http://www.beian.gov.cn/portal/registerSystemInfo">全国互联网安全管理服务平台</a>和<a href="https://beian.miit.gov.cn/">域名信息备案管理系统</a>的跳转链接。</p><h3 id="九、参考文档及站点链接"><a href="#九、参考文档及站点链接" class="headerlink" title="九、参考文档及站点链接"></a>九、参考文档及站点链接</h3><p><a href="https://cloud.tencent.com/document/product/243/37402">1. 腾讯云网站备案指引文档</a><br><a href="https://support.huaweicloud.com/qs-icp/icp_07_0002.html">2. 华为云网站备案指引文档</a><br><a href="https://cloud.tencent.com/document/product/243/13435#validation.step">3. 腾讯云备案短信核验说明指引文档</a><br><a href="https://support.huaweicloud.com/qs-scm/scm_07_0001.html">4. 华为云SSL证书申购流程指引文档</a><br><a href="https://support.huaweicloud.com/scm_faq/scm_01_0023.html">5. 华为云SSL证书安装指引</a><br><a href="https://cloud.tencent.com/document/product/1207/47027">6. 腾讯云SSL证书安装指引</a><br><a href="https://cloud.tencent.com/document/product/243/19142">7. 腾讯云公安备案流程指引</a><br><a href="https://support.huaweicloud.com/tg-icp/icp_03_0014.html">8. 华为云公安备案流程指引</a><br><a href="https://beian.miit.gov.cn/">9. ICP/IP地址/域名信息备案管理系统</a><br><a href="http://www.beian.gov.cn/portal/registerSystemInfo">10. 全国互联网安全管理服务平台</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名解析 </tag>
            
            <tag> SSL证书 </tag>
            
            <tag> 网站备案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create-React-App项目中CSS Modules的使用</title>
      <link href="/2020-09-01-create-react-app-xiang-mu-zhong-css-modules-de-shi-yong.html"/>
      <url>/2020-09-01-create-react-app-xiang-mu-zhong-css-modules-de-shi-yong.html</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>版本：<code>react: ^16.13.1</code>、<code>node-sass: ^4.14.1</code></li></ul><h3 id="一、启用SCSS"><a href="#一、启用SCSS" class="headerlink" title="一、启用SCSS"></a>一、启用SCSS</h3><ol><li>安装<code>node-sass</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> node-sass --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>更改<code>css</code>文件后缀并引入<br>将<code>.css</code>文件后缀改为<code>.scss</code>，在<code>.js</code>或<code>.jsx</code>文件中引入。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./App.scss'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、启用CSS-Modules"><a href="#二、启用CSS-Modules" class="headerlink" title="二、启用CSS Modules"></a>二、启用CSS Modules</h3><p>使用<code>Create React App</code>脚手架创建的项目默认支持<code>CSS Modules</code>，需要将模块化的css文件后缀改为<code>.module.css</code>或<code>.module.scss</code>，然后在<code>.js</code>或<code>.jsx</code>文件中引入。<br>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./Button.module.css'</span><span class="token punctuation">;</span> <span class="token comment">// 引入模块化后的css文件</span><span class="token keyword">import</span> <span class="token string">'./another-stylesheet.css'</span><span class="token punctuation">;</span> <span class="token comment">// 引入普通样式文件</span><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>error<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Error Button</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、使用多个类名"><a href="#三、使用多个类名" class="headerlink" title="三、使用多个类名"></a>三、使用多个类名</h3><p>在不使用<code>CSS Modules</code>时，我们给元素设置多个类名时通常使用<code>join()</code>或<code>ES6模板字符串</code>，这里给出使用<code>CSS Modules</code>时这两种形式的写法：  </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 数组join()形式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>menu_bar<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>active<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Menu</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">// ES6模板字符串形式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>styles<span class="token punctuation">.</span>menu_bar<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>styles<span class="token punctuation">.</span>active<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Menu</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、动态使用类名"><a href="#四、动态使用类名" class="headerlink" title="四、动态使用类名"></a>四、动态使用类名</h3><p>有时需要根据某一个变量的值来动态决定类名，这里也同样给出<code>join()</code>及<code>ES6模板字符串</code>两种形式的写法：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 数组join()形式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>menu_bar<span class="token punctuation">,</span> show<span class="token operator">?</span>styles<span class="token punctuation">.</span>active<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Menu</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">// ES6模板字符串形式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>styles<span class="token punctuation">.</span>menu_bar<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>show<span class="token operator">?</span>styles<span class="token punctuation">.</span>active<span class="token operator">:</span><span class="token string">''</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Menu</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、使用公共样式"><a href="#五、使用公共样式" class="headerlink" title="五、使用公共样式"></a>五、使用公共样式</h3><p>有时可能同时需要使用公共样式中的类名，这里也给出<code>join()</code>及<code>ES6模板字符串</code>两种形式的写法：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 数组join()形式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token string">'red_txt'</span><span class="token punctuation">,</span> styles<span class="token punctuation">.</span>menu_bar<span class="token punctuation">,</span> show<span class="token operator">?</span>styles<span class="token punctuation">.</span>active<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Menu</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">// ES6模板字符串形式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red_txt </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>styles<span class="token punctuation">.</span>menu_bar<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>show<span class="token operator">?</span>styles<span class="token punctuation">.</span>active<span class="token operator">:</span><span class="token string">''</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Menu</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://create-react-app.dev/docs/adding-a-css-modules-stylesheet">Create React App | Adding CSS Modules</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Create React App </tag>
            
            <tag> CSS Modules </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emmet常用语法总结</title>
      <link href="/2020-08-02-emmet-chang-yong-yu-fa-zong-jie.html"/>
      <url>/2020-08-02-emmet-chang-yong-yu-fa-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Emmet is a web-developer’s toolkit that can greatly improve your HTML &amp; CSS workflow.</p></blockquote><p><code>VS Code</code>编辑器默认支持<code>Emmet</code>语法。</p><h3 id="一、HTML缩写"><a href="#一、HTML缩写" class="headerlink" title="一、HTML缩写"></a>一、HTML缩写</h3><h4 id="嵌套运算符"><a href="#嵌套运算符" class="headerlink" title="嵌套运算符"></a>嵌套运算符</h4><p>常用嵌套运算符有：<code>&gt;</code>、<code>+</code>、<code>^</code>、<code>*</code>、<code>()</code></p><h5 id="逐级向下生成嵌套的元素：-gt"><a href="#逐级向下生成嵌套的元素：-gt" class="headerlink" title="逐级向下生成嵌套的元素：&gt;"></a>逐级向下生成嵌套的元素：<code>&gt;</code></h5><p>使用示例：  </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">div>ul>li<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="生成同级相邻的元素："><a href="#生成同级相邻的元素：" class="headerlink" title="生成同级相邻的元素：+"></a>生成同级相邻的元素：<code>+</code></h5><p>使用示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">div+p+bq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="向上一个层级："><a href="#向上一个层级：" class="headerlink" title="向上一个层级：^"></a>向上一个层级：<code>^</code></h5><p>与<code>&gt;</code>作用效果刚好相反，可以连用。使用示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">div>p>span+em^p>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="生成多个重复元素："><a href="#生成多个重复元素：" class="headerlink" title="生成多个重复元素：*"></a>生成多个重复元素：<code>*</code></h5><p>使用示例：</p><pre class="line-numbers language-emmet" data-language="emmet"><code class="language-emmet">ul&gt;li*5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="改变元素的分组结合顺序："><a href="#改变元素的分组结合顺序：" class="headerlink" title="改变元素的分组结合顺序：()"></a>改变元素的分组结合顺序：<code>()</code></h5><p>使用示例：</p><pre class="line-numbers language-emmet" data-language="emmet"><code class="language-emmet">div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性运算符"><a href="#属性运算符" class="headerlink" title="属性运算符"></a>属性运算符</h4><h5 id="给元素设置id和class"><a href="#给元素设置id和class" class="headerlink" title="给元素设置id和class"></a>给元素设置id和class</h5><p>使用示例：</p><pre class="line-numbers language-emmet" data-language="emmet"><code class="language-emmet">div#header+div.page+div#footer.class1.class2.class3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class1 class2 class3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="设置其他属性"><a href="#设置其他属性" class="headerlink" title="设置其他属性"></a>设置其他属性</h5><p>属性值中没有空格的时候可以不用输引号。使用示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">input[type=text placeholder=请输入用户名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">pleceholer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="自动编号："><a href="#自动编号：" class="headerlink" title="自动编号：$"></a>自动编号：<code>$</code></h5><p>使用示例：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 示例1:ul&gt;li.item$*5&#x2F;&#x2F; 示例2：指定最小序号ul&gt;li.item$@3*5&#x2F;&#x2F; 示例3：降序ul&gt;li.item$@-*5&#x2F;&#x2F; 示例4：指定降序最小序号ul&gt;li.item$@-3*5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 示例1 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 其他输出结果省略 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="元素内插入文本："><a href="#元素内插入文本：" class="headerlink" title="元素内插入文本：{}"></a>元素内插入文本：<code>&#123;&#125;</code></h5><p>使用示例：</p><pre class="line-numbers language-none"><code class="language-none">a&#123;Click me&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="“Lorem-Ipsum”生成器"><a href="#“Lorem-Ipsum”生成器" class="headerlink" title="“Lorem Ipsum”生成器"></a>“Lorem Ipsum”生成器</h4><p>随机文本填充，使用示例：  </p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 示例1：默认会生成一段30个单词的文本lorem&#x2F;&#x2F; 示例2：指定文本中单词数lorem100&#x2F;&#x2F; 示例3：重复生成ul&gt;li&gt;lorem10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、CSS缩写"><a href="#二、CSS缩写" class="headerlink" title="二、CSS缩写"></a>二、CSS缩写</h3><h4 id="属性缩写"><a href="#属性缩写" class="headerlink" title="属性缩写"></a>属性缩写</h4><pre class="line-numbers language-none"><code class="language-none">m10 --&gt; margin: 10px;m10-20 --&gt; margin: 10px 20px;m-10--20 --&gt; margin: -10px -20px;mr10 --&gt; margin-right: 10px;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常用别名"><a href="#常用别名" class="headerlink" title="常用别名"></a>常用别名</h4><pre class="line-numbers language-none"><code class="language-none">p --&gt; %e --&gt; emx --&gt; ex&#x2F;&#x2F; 示例w100p --&gt; width: 100%;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="色值"><a href="#色值" class="headerlink" title="色值"></a>色值</h4><pre class="line-numbers language-none"><code class="language-none">#1 --&gt; #111111#e0 --&gt; #e0e0e0#fc0 --&gt; #ffcc00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h4><pre class="line-numbers language-none"><code class="language-none">! --&gt; !important<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参考文档及网站链接"><a href="#参考文档及网站链接" class="headerlink" title="参考文档及网站链接"></a>参考文档及网站链接</h3><p><a href="https://docs.emmet.io/">Emmet Documentation</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Emmet </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm常用命令总结</title>
      <link href="/2020-07-20-npm-chang-yong-ming-ling-zong-jie.html"/>
      <url>/2020-07-20-npm-chang-yong-ming-ling-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="查看npm版本"><a href="#查看npm版本" class="headerlink" title="查看npm版本"></a>查看npm版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示npm的所有命令</span><span class="token function">npm</span> <span class="token builtin class-name">help</span><span class="token comment"># 显示npm所有命令使用语法</span><span class="token function">npm</span> -l<span class="token comment"># 显示指定命令的使用语法</span><span class="token function">npm</span> <span class="token operator">&lt;</span>command<span class="token operator">></span> -h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新npm"><a href="#更新npm" class="headerlink" title="更新npm"></a>更新npm</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> npm@latest -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建包描述文件"><a href="#创建包描述文件" class="headerlink" title="创建包描述文件"></a>创建包描述文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> init <span class="token comment"># 创建默认的package.json</span><span class="token function">npm</span> init --yes/-y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装当前package.json文件中所列的依赖包</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 安装包（不会修改package.json）</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span><span class="token comment"># 安装生产环境的包（会添加依赖信息到package.json中的dependencies）</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span> --save/-S/--save-prod/-P<span class="token comment"># 安装开发环境和测试环境依赖包（会添加依赖信息到package.json中的devDependencies）</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span> --save-dev/-D<span class="token comment"># 安装全局包（安装后可以在任意目录下使用这个包）</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span> --global/-g<span class="token comment"># 安装某一版本的包</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span>@<span class="token operator">&lt;</span>version<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从node_modules目录下删除指定的包（不会修改package.json）</span><span class="token function">npm</span> uninstall <span class="token operator">&lt;</span>package_name<span class="token operator">></span><span class="token comment"># 卸载指定的包并在package.json中删除依赖</span><span class="token function">npm</span> uninstall --save/--save-dev <span class="token operator">&lt;</span>package_name<span class="token operator">></span><span class="token comment"># 卸载全局安装的包</span><span class="token function">npm</span> uninstall -g <span class="token operator">&lt;</span>package_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新生产环境依赖包</span><span class="token function">npm</span> update <span class="token operator">&lt;</span>package_name<span class="token operator">></span> --save<span class="token comment"># 更新开发环境依赖包</span><span class="token function">npm</span> update <span class="token operator">&lt;</span>package_name<span class="token operator">></span> --save-dev<span class="token comment"># 更新全局安装的包</span><span class="token function">npm</span> update <span class="token operator">&lt;</span>package_name<span class="token operator">></span> -g``<span class="token variable"><span class="token variable">`</span>  <span class="token comment">### 镜像地址</span><span class="token variable">`</span></span>``bash<span class="token comment"># 查看当前镜像地址</span><span class="token function">npm</span> get registry<span class="token comment"># 修改镜像地址为淘宝镜像（原始镜像地址为：https:#registry.npmjs.org/）</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https:<span class="token comment">#registry.npm.taobao.org/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建用户（或者直接去官网注册）</span><span class="token function">npm</span> adduser<span class="token comment"># 登录</span><span class="token function">npm</span> login<span class="token comment"># 显示当前登录的用户名</span><span class="token function">npm</span> <span class="token function">whoami</span><span class="token comment"># 查看版本</span><span class="token function">npm</span> version <span class="token comment"># 更新版本号</span><span class="token function">npm</span> version <span class="token operator">&lt;</span>newversion<span class="token operator">></span><span class="token comment"># 发布</span><span class="token function">npm</span> publish<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="npm脚本"><a href="#npm脚本" class="headerlink" title="npm脚本"></a>npm脚本</h3><p>在<code>package.json</code>中<code>scripts</code>字段中可以自定义npm脚本命令</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    ...    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"node index.js"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>npm run</code>命令可以执行自定义命令  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span class="token comment"># 查看当前项目的所有npm脚本命令</span><span class="token function">npm</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h3><p><a href="https:#docs.npmjs.com/cli/v6/commands">1. npm Docs</a><br><a href="https:#www.npmjs.cn/">2. npm中文文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub常用技巧总结</title>
      <link href="/2020-07-01-github-chang-yong-sou-suo-yu-fa.html"/>
      <url>/2020-07-01-github-chang-yong-sou-suo-yu-fa.html</url>
      
        <content type="html"><![CDATA[<p>想要从海量的gitHub资源中获取自己想要的信息要借助一定的搜索技巧，这里记录下一些常用的搜索语法，供使用时查询。</p><h3 id="一、常用搜索语法"><a href="#一、常用搜索语法" class="headerlink" title="一、常用搜索语法"></a>一、常用搜索语法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">in:name mini-app           <span class="token comment"># 仓库标题搜索含有关键字"mini-app"</span>in:descripton web          <span class="token comment"># 仓库描述搜索含有关键字"web"</span>in:readme <span class="token function">node</span>             <span class="token comment"># README文件搜素含有关键字"node"</span>org:github                 <span class="token comment"># 匹配github名下的仓库</span>stars:<span class="token operator">></span><span class="token number">3000</span>                <span class="token comment"># stars数量大于3000的搜索仓库</span>stars:1000<span class="token punctuation">..</span><span class="token number">3000</span>           <span class="token comment"># stars数量大于1000小于3000的仓库</span>forks:<span class="token operator">></span><span class="token number">1000</span>                <span class="token comment"># forks数量大于1000的搜索关键字</span>forks:1000<span class="token punctuation">..</span><span class="token number">3000</span>           <span class="token comment"># forks数量大于1000小于3000的搜索仓库</span>size:<span class="token operator">>=</span><span class="token number">5000</span>                <span class="token comment"># 指定仓库大于5000k(5M)的搜索仓库</span>pushed:<span class="token operator">></span><span class="token number">2019</span>-02-12         <span class="token comment"># 发布时间大于2019-02-12的仓库</span>created:<span class="token operator">></span><span class="token number">2019</span>-02-12        <span class="token comment"># 创建时间大于2019-02-12的仓库</span>mirror:true<span class="token punctuation">(</span>false<span class="token punctuation">)</span>         <span class="token comment"># 是否是镜像仓库</span>archived:true<span class="token punctuation">(</span>false<span class="token punctuation">)</span>       <span class="token comment"># 是否是废弃的仓库</span>user:jack                  <span class="token comment"># 用户名为"jack"的仓库</span>license:apache-2.0         <span class="token comment"># 仓库的 LICENSE为"apache-2.0"</span>language:java              <span class="token comment"># 使用"java"语言的仓库</span>user:jack in:name web      <span class="token comment"># 组合搜索,用户名为"jack",且标题含有"web"的</span>topic:jekyll               <span class="token comment"># 匹配topic中含有关键字"jekyll"的仓库</span>topic:5                    <span class="token comment"># 匹配拥有5个topic的仓库</span>topic:<span class="token operator">></span><span class="token number">3</span>                   <span class="token comment"># 匹配拥有3个以上topic的仓库</span>is:public                  <span class="token comment"># 公开的仓库</span>is:private                 <span class="token comment"># 匹配有权限的私有仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用示例</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">topic:node stars:<span class="token operator">></span><span class="token number">1000</span> pushed:<span class="token operator">></span><span class="token number">2020</span>-01-01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>搜索结果</strong>：<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vU9bpq.png" alt="vU9bpq.png"></p><h3 id="二、常用功能"><a href="#二、常用功能" class="headerlink" title="二、常用功能"></a>二、常用功能</h3><ul><li>进入在线编辑器模式<code>github.dev</code>：<ul><li>在仓库主页，按下键盘的<code>.</code>（半角）</li><li>在仓库主页，将网址<code>github.com/xxx</code>修改为<code>github.dev/xxx</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCSS常用语法总结</title>
      <link href="/2020-06-03-scss-chang-yong-yu-fa-zong-jie.html"/>
      <url>/2020-06-03-scss-chang-yong-yu-fa-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、CSS扩展"><a href="#一、CSS扩展" class="headerlink" title="一、CSS扩展"></a><span id="cate1">一、CSS扩展</span></h3><h4 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a><span id="cate1_1">嵌套规则</span></h4><p>为了避免像CSS那样重复输入父选择器，SCSS允许代码CSS样式嵌套，内层的样式将其外层的选择器作为父选择器。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.home </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #00ff00<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token selector">.header </span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.home</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #00ff00<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.home .header</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="父选择器-amp"><a href="#父选择器-amp" class="headerlink" title="父选择器&amp;"></a><span id="cate1_2">父选择器<code>&amp;</code></span></h4><p>可以用 <code>&amp;</code> 代表嵌套规则外层的父选择器，编译后的CSS文件中<code>&amp;</code>会被替换为外层的父选择器。  </p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">a </span><span class="token punctuation">&#123;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token comment">// 示例1：伪类</span>    <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">&#123;</span>        <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 示例2</span>    <span class="token selector">.header <span class="token parent important">&amp;</span> </span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 示例3：拼接后缀（&amp;必须放在首位）</span>    <span class="token selector"><span class="token parent important">&amp;</span>-green </span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #0f0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.header a</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a-green</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #0f0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a><span id="cate1_3">属性嵌套</span></h4><p>像background、font、border、outline这些复合属性，都是具有多个单属性的。在可能仅需要个别单属性的情况下，可以使用属性嵌套来简化代码。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.box </span><span class="token punctuation">&#123;</span>  <span class="token selector">border: </span><span class="token punctuation">&#123;</span>    <span class="token property">style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>    <span class="token property">radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">border-width</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="占位符选择器"><a href="#占位符选择器" class="headerlink" title="占位符选择器%"></a><span id="cate1_4">占位符选择器<code>%</code></span></h4><p>单独使用占位符选择器时（未通过@extend调用），不会被编译到CSS中，仅当<code>@extend</code>指令调用，样式才会被编译到CSS中。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">#context a<span class="token placeholder">%extreme</span> </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 仅当使用了下列代码，scss才会编译出对应的css</span><span class="token selector">.notice </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@extend</span> <span class="token placeholder selector">%extreme</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#context a.notice</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、注释"><a href="#二、注释" class="headerlink" title="二、注释"></a><span id="cate2">二、注释</span></h3><p>多行注释<code>/* */</code>（会被编译到CSS文件中）</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">/*  *This comment is * several lines long. * since it uses the CSS comment syntax, * it will appear in the CSS output. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单行注释<code>//</code>（不会被编译到CSS文件中）</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// These comments are only one line long each.</span><span class="token comment">// They won't appear in the CSS output.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三、SassScript"><a href="#三、SassScript" class="headerlink" title="三、SassScript"></a><span id="cate3">三、SassScript</span></h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量$"></a><span id="cate3_1">变量<code>$</code></span></h4><p>变量以<code>$</code>开头，赋值方法与CSS写法一样。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 全局变量</span><span class="token property"><span class="token variable">$color</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token selector">.header </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box1 </span><span class="token punctuation">&#123;</span>    <span class="token comment">// 局部变量，只能在该嵌套内部使用</span>    <span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token comment">// 局部变量转换为全局变量</span>    <span class="token property"><span class="token variable">$size</span></span><span class="token punctuation">:</span> 15px !global<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span>        <span class="token selector">.inner </span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.box2 </span><span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$size</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><span id="cate3_2">数据类型</span></h4><p>支持的数据类型有：</p><ul><li>数字，<code>1, 2, 13, 10px</code></li><li>字符串，有引号和无引号，<code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li><li>颜色，<code>blue, #ff0000, rgba(0,0,0,0.5)</code></li><li>布尔值，<code>true, false</code></li><li>空值, <code>null</code></li><li>数组，用空格或逗号做分隔符，<code>1.5em 1em 2em, Arial, sans-serif</code></li><li>maps, 相当于js中的Object，<code>(key1: value1, key2: value2)</code></li></ul><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a><span id="cate3_3">运算</span></h4><p>每种数据类型都支持相等运算<code>==</code>和<code>!=</code>，此外，每种数据类型也有其格子支持的运算方式。  </p><ul><li>数字运算<br>支持加、减、乘、除、取余等运算、关系运算（&lt;,&gt;,&lt;=,&gt;=）</li></ul><ul><li>颜色值运算   </li></ul><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #432542 <span class="token operator">+</span> #78de1c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #010203 <span class="token operator">*</span> 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #bbff5e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #020406<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>字符串运算</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">p:before </span><span class="token punctuation">&#123;</span>    <span class="token comment">// +号左侧为有引号的字符串，编译的结果为有引号的字符串</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"Foo "</span> <span class="token operator">+</span> Bar<span class="token punctuation">;</span>        <span class="token comment">// +号左侧为无引号的字符串，编译的结果为无引号的字符串</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> sans- <span class="token operator">+</span> <span class="token string">"serif"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p:before</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"Foo Bar"</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>布尔值运算<br>支持<code>and</code>、<code>or</code>以及<code>not</code>运算</p></li><li><p>数组（List）运算<br>不支持任何运算方式，只能使用list functions控制。</p></li></ul><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a><span id="cate3_4">函数</span></h4><p>详细用法参见<a href="https://sass-lang.com/documentation/modules">Sass函数列表</a>  </p><h3 id="四、-Rules与指令"><a href="#四、-Rules与指令" class="headerlink" title="四、@-Rules与指令"></a><span id="cate4">四、@-Rules与指令</span></h3><h4 id="import"><a href="#import" class="headerlink" title="@import"></a><span id="cate4_1">@import</span></h4><p>使用@import可以的导入SCSS或Sass文件，被导入的文件将合并编译到同一个CSS文件中。被导入的文件中包含的变量或混合指令都可以在导入的文件中使用。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 导入单个文件（带扩展名）</span><span class="token keyword">@import</span> <span class="token string">'foo.scss'</span><span class="token punctuation">;</span><span class="token comment">// 导入单个文件（不带扩展名，会尝试寻找扩展名为.scss或.sass的文件）</span><span class="token keyword">@import</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span class="token comment">// 同时导入多个文件</span><span class="token keyword">@import</span> <span class="token string">'rounded-corners'</span><span class="token punctuation">,</span> <span class="token string">'text-shadow'</span><span class="token punctuation">;</span><span class="token comment">// 一般导入都是不会在嵌套规则内，但是在嵌套规则内导入也是支持的</span><span class="token comment">// 但是这样编译的样式也是会在嵌套内的</span><span class="token selector">#main </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@import</span> <span class="token string">"example"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="extend"><a href="#extend" class="headerlink" title="@extend"></a><span id="cate4_2">@extend</span></h4><p><code>@extend</code>用于将一个选择器下的所有样式继承给另一个选择器。  </p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.error </span><span class="token punctuation">&#123;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px #f00<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #fdd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.seriousError </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@extend</span> .error<span class="token punctuation">;</span>    <span class="token property">border-width</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、控制指令"><a href="#五、控制指令" class="headerlink" title="五、控制指令"></a><span id="cate5">五、控制指令</span></h3><h4 id="if"><a href="#if" class="headerlink" title="@if"></a><span id="cate5_1">@if</span></h4><p>当<code>@if</code>的表达式返回值不是<code>false</code>或者<code>null</code>时，条件成立，输出<code>&#123;&#125; </code>内的代码：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@if</span> <span class="token selector">1 + 1 == 2 </span><span class="token punctuation">&#123;</span> <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token keyword">@if</span> <span class="token selector">null  </span><span class="token punctuation">&#123;</span> <span class="token property">border</span><span class="token punctuation">:</span> 3px double blue<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：  </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>类似<code>if...else if...else...</code>语句，<code>@if</code>也支持<code>@else if</code>和<code>@else</code>。  </p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$type</span></span><span class="token punctuation">:</span> A<span class="token punctuation">;</span><span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$type</span> == A </span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">@else if</span> <span class="token selector"><span class="token variable">$type</span> == B </span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">@else</span> <span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for"><a href="#for" class="headerlink" title="@for"></a><span id="cate5_2">@for</span></h4><p>语法格式1：<code>@for $var from &lt;start&gt; through &lt;end&gt;</code><br>语法格式2：<code>@for $var from &lt;start&gt; to &lt;end&gt;</code><br><code>&lt;start&gt;</code>和<code>&lt;end&gt;</code>必须是整数；使用<code>to</code>时，遍历范围不包含<code>&lt;end&gt;</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector">3 </span><span class="token punctuation">&#123;</span>    <span class="token selector">.item-<span class="token variable">#&#123;$i&#125;</span> </span><span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 2em <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="each"><a href="#each" class="headerlink" title="@each"></a><span id="cate5_3">@each</span></h4><p>语法格式：<code>@each $var in &lt;list&gt;</code>  </p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$animal</span> in puma, sea-slug, egret, salamander </span><span class="token punctuation">&#123;</span>    <span class="token selector">.<span class="token variable">#&#123;$animal&#125;</span>-icon </span><span class="token punctuation">&#123;</span>        <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'/images/#&#123;$animal&#125;.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="while"><a href="#while" class="headerlink" title="@while"></a><span id="cate5_4">@while</span></h4><p>指令重复输出格式直到表达式返回结果为<code>false</code>。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$i</span></span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span><span class="token keyword">@while</span> <span class="token selector"><span class="token variable">$i</span> > 0 </span><span class="token punctuation">&#123;</span>    <span class="token selector">.item-<span class="token variable">#&#123;$i&#125;</span> </span><span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 2em <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token property"><span class="token variable">$i</span></span><span class="token punctuation">:</span> <span class="token variable">$i</span> <span class="token operator">-</span> 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、mixin指令"><a href="#六、mixin指令" class="headerlink" title="六、mixin指令"></a><span id="cate6">六、mixin指令</span></h3><p>简单总结，详细用法参考文档。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 定义</span><span class="token keyword">@mixin</span> <span class="token selector">large-text </span><span class="token punctuation">&#123;</span>    <span class="token selector">font: </span><span class="token punctuation">&#123;</span>        <span class="token property">family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">;</span>        <span class="token property">size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #ff0000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 引用混合样式（使用@include）</span><span class="token selector">.page-title </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@include</span><span class="token punctuation">:</span> large-text<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义（带参数）</span><span class="token keyword">@mixin</span> <span class="token function">large-text</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token selector">font: </span><span class="token punctuation">&#123;</span>        <span class="token property">family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">;</span>        <span class="token property">size</span><span class="token punctuation">:</span> <span class="token variable">$size</span><span class="token punctuation">;</span>        <span class="token property">weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 引用（带参数）</span><span class="token selector">.page-title </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@include</span><span class="token punctuation">:</span> <span class="token function">large-text</span><span class="token punctuation">(</span>20px<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、参考文档及网站链接"><a href="#七、参考文档及网站链接" class="headerlink" title="七、参考文档及网站链接"></a><span id="refDoc">七、参考文档及网站链接</span></h3><p><a href="https://www.sass.hk/docs/">1. Sass中文文档</a><br><a href="https://sass-lang.com/documentation/modules">2. Sass函数文档</a>   </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui中表格穿梭功能</title>
      <link href="/2020-05-08-element-ui-zhong-biao-ge-chuan-suo-gong-neng.html"/>
      <url>/2020-05-08-element-ui-zhong-biao-ge-chuan-suo-gong-neng.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、功能描述"><a href="#一、功能描述" class="headerlink" title="一、功能描述"></a>一、功能描述</h3><ul><li><strong>实现</strong>： 表格数据的穿梭功能实现。</li><li><strong>版本</strong>： <code>element-ui: &quot;^2.3.7&quot;</code>。</li></ul><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><ol><li><code>el-table</code>上监听<code>selection-change</code>事件；</li><li><code>添加</code>按钮事件处理函数中进行数据去重合并；</li><li><code>删除</code>按钮事件处理函数中进行数据删除操作。<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;el-row type&#x3D;&quot;flex&quot;&gt;        &lt;el-col :span&#x3D;&quot;10&quot;&gt;            &lt;el-row&gt;待选区&lt;&#x2F;el-row&gt;            &lt;el-table                :data&#x3D;&quot;table1Data&quot;                style&#x3D;&quot;width: 100%&quot;                ref&#x3D;&quot;table1&quot;                stripe                @selection-change&#x3D;&quot;onTable1Select&quot;&gt;                &lt;el-table-column                    type&#x3D;&quot;selection&quot;                    width&#x3D;&quot;55&quot;&gt;                &lt;&#x2F;el-table-column&gt;                &lt;el-table-column                    prop&#x3D;&quot;name&quot;                    label&#x3D;&quot;姓名&quot;                    width&#x3D;&quot;180&quot;&gt;                &lt;&#x2F;el-table-column&gt;                &lt;el-table-column                    prop&#x3D;&quot;address&quot;                    label&#x3D;&quot;地址&quot;&gt;                &lt;&#x2F;el-table-column&gt;            &lt;&#x2F;el-table&gt;        &lt;&#x2F;el-col&gt;        &lt;el-col :span&#x3D;&quot;4&quot;&gt;            &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onAdd&quot;&gt;添加&lt;&#x2F;el-button&gt;            &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onDelete&quot;&gt;删除&lt;&#x2F;el-button&gt;        &lt;&#x2F;el-col&gt;        &lt;el-col :span&#x3D;&quot;10&quot;&gt;            &lt;el-row&gt;已选区&lt;&#x2F;el-row&gt;            &lt;el-table                :data&#x3D;&quot;table2Data&quot;                style&#x3D;&quot;width: 100%&quot;                ref&#x3D;&quot;table2&quot;                strip                @selection-change&#x3D;&quot;onTable2Select&quot;&gt;                &lt;el-table-column                    type&#x3D;&quot;selection&quot;                    width&#x3D;&quot;55&quot;&gt;                &lt;&#x2F;el-table-column&gt;                &lt;el-table-column                    prop&#x3D;&quot;name&quot;                    label&#x3D;&quot;姓名&quot;                    width&#x3D;&quot;180&quot;&gt;                &lt;&#x2F;el-table-column&gt;                &lt;el-table-column                    prop&#x3D;&quot;address&quot;                    label&#x3D;&quot;地址&quot;&gt;                &lt;&#x2F;el-table-column&gt;            &lt;&#x2F;el-table&gt;        &lt;&#x2F;el-col&gt;    &lt;&#x2F;el-row&gt;&lt;&#x2F;template&gt;&lt;script&gt;    export default &#123;        data() &#123;            return &#123;                table1Data: [&#123;                    id: &#39;1&#39;,                    name: &#39;张帅&#39;,                    address: &#39;南京市秦淮区秦虹路98号&#39;,                &#125;, &#123;                    id: &#39;2&#39;,                    name: &#39;王帅&#39;,                    address: &#39;北京市朝阳区东三环北路甲26号&#39;,                &#125;, &#123;                    id: &#39;3&#39;,                    name: &#39;刘帅&#39;,                    address: &#39;上海市浦东新区潍坊西路与浦城路交叉路口往西北约50米&#39;,                &#125;, &#123;                    id: &#39;4&#39;,                    name: &#39;孟帅&#39;,                    address: &#39;湖北省武汉市硚口区解放大道586号&#39;,                &#125;],                table2Data: [],                selectedTable1Data: [], &#x2F;&#x2F; table1已选数据                selectedTable2Data: []  &#x2F;&#x2F; table2已选数据            &#125;        &#125;,        methods: &#123;            &#x2F;**             * table1选择事件处理函数             * @param &#123;array&#125; rows 已勾选的数据             *&#x2F;            onTable1Select(rows) &#123;                this.selectedTable1Data &#x3D; [...rows];            &#125;,            &#x2F;**             * table2选择事件处理函数             * @param &#123;array&#125; rows 已勾选的数据             *&#x2F;            onTable2Select(rows) &#123;                this.selectedTable2Data &#x3D; [...rows];            &#125;,            &#x2F;**             * 添加按钮事件处理函数             *&#x2F;            onAdd() &#123;                this.filterAdd(this.selectedTable1Data, this.table2Data, &#39;id&#39;);                this.selectedTable1Data &#x3D; [];                this.$refs.table1.clearSelection();            &#125;,            &#x2F;**             * 删除按钮事件处理函数             *&#x2F;            onDelete() &#123;                this.table2Data &#x3D; this.filterDelete(this.selectedTable2Data, this.table2Data, &#39;id&#39;);                this.selectedTable2Data &#x3D; [];            &#125;,            &#x2F;**             * 根据选中项去重添加到array中             * @param &#123;array&#125; records   待添加数据             * @param &#123;array&#125; targetRecords   目标数据             * @param &#123;string&#125; compareProperty  对比的重复属性             * @param &#123;boolean&#125; isEnd   往尾部添加？默认往头部添加             *&#x2F;            filterAdd (records&#x3D;[], targetRecords&#x3D;[], compareProperty, isEnd &#x3D; false) &#123;                const o &#x3D; new Set();                targetRecords.forEach(record&#x3D;&gt;&#123;                    o.add(record[compareProperty]);                &#125;)                records.forEach(record&#x3D;&gt;&#123;                    if(!o.has(record[compareProperty])) &#123;                        if (isEnd) &#123;                            targetRecords.push(record);                        &#125; else &#123;                            targetRecords.unshift(record);                        &#125;                    &#125;                &#125;)            &#125;,            &#x2F;**             * 删除数组中数据             * @param &#123;array&#125; records   待删除数据             * @param &#123;array&#125; targetRecords   目标数据             * @param &#123;string&#125; compareProperty  对比的重复属性             * @return &#123;array&#125; 删除待删除数据后的目标数据             *&#x2F;            filterDelete (records&#x3D;[], targetRecords&#x3D;[], compareProperty) &#123;                const o &#x3D; new Set();                records.forEach(record&#x3D;&gt;&#123;                    o.add(record[compareProperty]);                &#125;)                return targetRecords.filter((item) &#x3D;&gt; !o.has(item[compareProperty]))            &#125;        &#125;,    &#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="三、最终效果"><a href="#三、最终效果" class="headerlink" title="三、最终效果"></a>三、最终效果</h3><p><a href="https://snaillu.gitee.io/portfolio/demo/table-transfer">demo地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> element-ui </tag>
            
            <tag> el-table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui中表格自定义排序</title>
      <link href="/2020-05-07-element-ui-zhong-biao-ge-zi-ding-yi-pai-xu.html"/>
      <url>/2020-05-07-element-ui-zhong-biao-ge-zi-ding-yi-pai-xu.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、功能描述"><a href="#一、功能描述" class="headerlink" title="一、功能描述"></a>一、功能描述</h3><ul><li>实现： 对于一次性拉取所有数据、前端来做分页的表格使用场景，使用<code>el-table-column</code>自带的<code>sortable</code>只能对当前页数据进行排序，这里简单实现el-table的自定义排序，排序完成后再做分页即可（本文省略）。</li><li>版本： <code>&quot;element-ui&quot;: &quot;^2.3.7&quot;</code>。</li></ul><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><ol><li><code>el-table</code>上监听<code>sort-change</code>事件；</li><li><code>el-table-column</code>上<code>sortable</code>属性设置为<code>custom</code>；</li><li><code>el-table-column</code>上<code>sort-orders</code>属性设置为<code>[&#39;ascending&#39;,&#39;descending&#39;]</code>。（默认取值为<code>[&#39;ascending&#39;,&#39;descending&#39;,null]</code>）<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;el-table        :data&#x3D;&quot;tableData&quot;        stripe        style&#x3D;&quot;width: 50%;margin: 0 auto;&quot;        @sort-change&#x3D;&quot;onSortChange&quot;&gt;        &lt;el-table-column            prop&#x3D;&quot;date&quot;            label&#x3D;&quot;日期&quot;            width&#x3D;&quot;180&quot;            sortable&#x3D;&quot;custom&quot;            :sort-orders&#x3D;&quot;[&#39;ascending&#39;,&#39;descending&#39;]&quot;&gt;        &lt;&#x2F;el-table-column&gt;        &lt;el-table-column            prop&#x3D;&quot;name&quot;            label&#x3D;&quot;姓名&quot;            width&#x3D;&quot;180&quot;&gt;        &lt;&#x2F;el-table-column&gt;        &lt;el-table-column            prop&#x3D;&quot;address&quot;            label&#x3D;&quot;地址&quot;&gt;        &lt;&#x2F;el-table-column&gt;        &lt;el-table-column            prop&#x3D;&quot;sort&quot;            label&#x3D;&quot;排序&quot;            sortable&#x3D;&quot;custom&quot;            :sort-orders&#x3D;&quot;[&#39;ascending&#39;,&#39;descending&#39;]&quot;&gt;        &lt;&#x2F;el-table-column&gt;    &lt;&#x2F;el-table&gt;&lt;&#x2F;template&gt;&lt;script&gt;  export default &#123;    data() &#123;        return &#123;            tableData: [&#123;                date: &#39;2014-12-02&#39;,                name: &#39;张帅&#39;,                address: &#39;南京市秦淮区秦虹路98号&#39;,                sort: 100,            &#125;, &#123;                date: &#39;2016-06-04&#39;,                name: &#39;王帅&#39;,                address: &#39;北京市朝阳区东三环北路甲26号&#39;,                sort: 15,            &#125;, &#123;                date: &#39;2012-03-01&#39;,                name: &#39;刘帅&#39;,                address: &#39;上海市浦东新区潍坊西路与浦城路交叉路口往西北约50米&#39;,                sort: 8            &#125;, &#123;                date: &#39;2018-11-03&#39;,                name: &#39;孟帅&#39;,                address: &#39;湖北省武汉市硚口区解放大道586号&#39;,                sort: 1            &#125;]        &#125;    &#125;,    methods: &#123;        &#x2F;**         * 表格排序事件处理函数         * @param &#123;object&#125; &#123;column,prop,order&#125; 列数据|排序字段|排序方式         *&#x2F;        onSortChange(&#123; prop, order &#125;) &#123;            this.tableData.sort(this.compare(prop,order));        &#125;,        &#x2F;**         * 排序比较         * @param &#123;string&#125; propertyName 排序的属性名         * @param &#123;string&#125; sort ascending(升序)&#x2F;descending(降序)         * @return &#123;function&#125;         *&#x2F;        compare (propertyName, sort) &#123;            return function (obj1, obj2) &#123;                var value1 &#x3D; obj1[propertyName]                var value2 &#x3D; obj2[propertyName]                if (typeof value1 &#x3D;&#x3D;&#x3D; &#39;string&#39; &amp;&amp; typeof value2 &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;                    const res &#x3D; value1.localeCompare(value2, &#39;zh&#39;)                    return sort &#x3D;&#x3D;&#x3D; &#39;ascending&#39; ? res : -res                &#125; else &#123;                    if (value1 &lt;&#x3D; value2) &#123;                        return sort &#x3D;&#x3D;&#x3D; &#39;ascending&#39; ? -1 : 1                    &#125; else if (value1 &gt; value2) &#123;                        return sort &#x3D;&#x3D;&#x3D; &#39;ascending&#39; ? 1 : -1                    &#125;                &#125;            &#125;        &#125;    &#125;,  &#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、最终效果"><a href="#三、最终效果" class="headerlink" title="三、最终效果"></a>三、最终效果</h3><a href="https://snaillu.gitee.io/portfolio/demo/table-sort">demo地址</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> element-ui </tag>
            
            <tag> el-table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10环境下使用VMvare安装Linux虚拟机</title>
      <link href="/2020-05-05-windows10-huan-jing-xia-shi-yong-vmvare-an-zhuang-linux-xu-ni-ji.html"/>
      <url>/2020-05-05-windows10-huan-jing-xia-shi-yong-vmvare-an-zhuang-linux-xu-ni-ji.html</url>
      
        <content type="html"><![CDATA[<h3 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h3><ul><li>宿主机操作系统： <code>Windows 10 家庭版</code></li><li>虚拟机软件： <code>VMvare Workstation Pro 15.5.2 for Windows</code></li><li>Linux系统镜像： <code>CentOS 8.1 64位</code></li><li>SSH终端软件： <code>SecureCRT 8.5</code></li></ul><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="1-软件下载"><a href="#1-软件下载" class="headerlink" title="1. 软件下载"></a>1. 软件下载</h4><ul><li>VMvare Workstation 15.5 Pro for Windows<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">下载地址</a></li><li>CentOS 8.1 ISO <a href="http://isoredirect.centos.org/centos/8/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso">下载地址</a></li><li>SecureCRT 8.5 <a href="https://www.vandyke.com/cgi-bin/releases.php?product=securecrt">下载地址</a></li></ul><h4 id="2-软件安装"><a href="#2-软件安装" class="headerlink" title="2. 软件安装"></a>2. 软件安装</h4><p>安装过程只要按照软件提示一步步进行就好了，这里不再赘述。</p><h4 id="3-创建新的虚拟机"><a href="#3-创建新的虚拟机" class="headerlink" title="3. 创建新的虚拟机"></a>3. 创建新的虚拟机</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUiGkQ.png" alt="vUiGkQ.png"></p><h4 id="4-自定义虚拟机配置"><a href="#4-自定义虚拟机配置" class="headerlink" title="4. 自定义虚拟机配置"></a>4. 自定义虚拟机配置</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUi3Tg.png" alt="vUi3Tg.png"></p><h4 id="5-设置虚拟机硬件兼容性"><a href="#5-设置虚拟机硬件兼容性" class="headerlink" title="5. 设置虚拟机硬件兼容性"></a>5. 设置虚拟机硬件兼容性</h4><p>使用默认配置即可<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUilm8.png" alt="vUilm8.png"></p><h4 id="6-指定系统镜像位置"><a href="#6-指定系统镜像位置" class="headerlink" title="6. 指定系统镜像位置"></a>6. 指定系统镜像位置</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUiMOf.png" alt="vUiMOf.png"></p><h4 id="7-配置简易安装信息"><a href="#7-配置简易安装信息" class="headerlink" title="7. 配置简易安装信息"></a>7. 配置简易安装信息</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUi10S.png" alt="vUi10S.png"></p><h4 id="8-配置名称及存储位置"><a href="#8-配置名称及存储位置" class="headerlink" title="8. 配置名称及存储位置"></a>8. 配置名称及存储位置</h4><p>我这里只更改了名称，位置使用了默认路径。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUiJYj.png" alt="vUiJYj.png"></p><h4 id="9-处理器配置"><a href="#9-处理器配置" class="headerlink" title="9. 处理器配置"></a>9. 处理器配置</h4><p>按自己需求配置即可<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUiYfs.png" alt="vUiYfs.png"></p><h4 id="10-内存配置"><a href="#10-内存配置" class="headerlink" title="10. 内存配置"></a>10. 内存配置</h4><p>按自己需求配置即可<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUiNpn.png" alt="vUiNpn.png"></p><h4 id="11-网络连接类型配置"><a href="#11-网络连接类型配置" class="headerlink" title="11. 网络连接类型配置"></a>11. 网络连接类型配置</h4><p>使用桥接网络<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUiUlq.png" alt="vUiUlq.png"></p><h4 id="12-I-O控制器类型配置"><a href="#12-I-O控制器类型配置" class="headerlink" title="12. I/O控制器类型配置"></a>12. I/O控制器类型配置</h4><p>默认值即可<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUia60.png" alt="vUia60.png"></p><h4 id="13-磁盘类型配置"><a href="#13-磁盘类型配置" class="headerlink" title="13. 磁盘类型配置"></a>13. 磁盘类型配置</h4><p>默认值即可<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUidXV.png" alt="vUidXV.png"></p><h4 id="14-选择磁盘"><a href="#14-选择磁盘" class="headerlink" title="14. 选择磁盘"></a>14. 选择磁盘</h4><p>选择<code>创建新虚拟磁盘</code><br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUi0mT.png" alt="vUi0mT.png"></p><h4 id="15-配置磁盘容量"><a href="#15-配置磁盘容量" class="headerlink" title="15. 配置磁盘容量"></a>15. 配置磁盘容量</h4><p>默认值即可<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUiB0U.png" alt="vUiB0U.png"></p><h4 id="16-指定磁盘文件的存储位置"><a href="#16-指定磁盘文件的存储位置" class="headerlink" title="16. 指定磁盘文件的存储位置"></a>16. 指定磁盘文件的存储位置</h4><p>默认值即可<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUiD7F.png" alt="vUiD7F.png"></p><h4 id="17-配置完成"><a href="#17-配置完成" class="headerlink" title="17. 配置完成"></a>17. 配置完成</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUiytJ.png" alt="vUiytJ.png"></p><h4 id="18-报错"><a href="#18-报错" class="headerlink" title="18. 报错"></a>18. 报错</h4><p>安装报错：<code>Section %packages does not end with %end</code> （没报错忽略步骤18、19）<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdC8HO.png" alt="vdC8HO.png"></p><h4 id="19-报错处理"><a href="#19-报错处理" class="headerlink" title="19. 报错处理"></a>19. 报错处理</h4><ul><li><p>在工具栏上找到关机按钮，关闭此客户机操作系统，并编辑虚拟机配置<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCYUe.png"></p></li><li><p>取消勾选 <code>CD/DVD (IDE)</code> 设备状态中的<code>启动时连接</code>，确定后重新开启虚拟机<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdC3DK.png"></p></li></ul><h4 id="20-进入安装界面"><a href="#20-进入安装界面" class="headerlink" title="20. 进入安装界面"></a>20. 进入安装界面</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdC1u6.png"></p><h4 id="21-开始安装"><a href="#21-开始安装" class="headerlink" title="21. 开始安装"></a>21. 开始安装</h4><p>鼠标移入界面后，按下回车键，开始进行系统安装。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCJED.png"></p><h4 id="22-选择系统语言"><a href="#22-选择系统语言" class="headerlink" title="22. 选择系统语言"></a>22. 选择系统语言</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCt4H.png"></p><h4 id="23-时区等配置"><a href="#23-时区等配置" class="headerlink" title="23. 时区等配置"></a>23. 时区等配置</h4><p>时区改为<code>亚洲/上海</code>，系统安装目的地，点击进入使用默认选项即可<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCa8A.png"></p><h4 id="24-用户设置"><a href="#24-用户设置" class="headerlink" title="24. 用户设置"></a>24. 用户设置</h4><p>设置root密码和创建用户<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCUCd.png"></p><h4 id="26-安装完成"><a href="#26-安装完成" class="headerlink" title="26. 安装完成"></a>26. 安装完成</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCwvt.png"></p><h4 id="27-重启"><a href="#27-重启" class="headerlink" title="27. 重启"></a>27. 重启</h4><p>进行初始设置，接受许可证<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCdgI.png"></p><h4 id="28-系统登录页面"><a href="#28-系统登录页面" class="headerlink" title="28. 系统登录页面"></a>28. 系统登录页面</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCrb8.png"></p><h4 id="29-安装完成"><a href="#29-安装完成" class="headerlink" title="29. 安装完成"></a>29. 安装完成</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCBKP.png"></p><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="1-开启网络"><a href="#1-开启网络" class="headerlink" title="1. 开启网络"></a>1. 开启网络</h4><p>安装完成的Linux虚拟机，网络是没有开启的，需要手动开启网络<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCDDf.png"></p><h4 id="2-网路测试"><a href="#2-网路测试" class="headerlink" title="2. 网路测试"></a>2. 网路测试</h4><p>连接网络后，进行网络连接测试<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCc5Q.png"><br>如果出现可以连接其他虚拟Linux节点，但是无法访问宿主机的情况，要考虑下是否是宿主机的防火墙未关闭。</p><h4 id="3-反向测试"><a href="#3-反向测试" class="headerlink" title="3. 反向测试"></a>3. 反向测试</h4><p>使用宿主机进行反向测试<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdC6Ug.png"></p><h3 id="使用ssh终端进行登录"><a href="#使用ssh终端进行登录" class="headerlink" title="使用ssh终端进行登录"></a>使用ssh终端进行登录</h3><h4 id="1-创建会话"><a href="#1-创建会话" class="headerlink" title="1. 创建会话"></a>1. 创建会话</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCyVS.png"></p><h4 id="2-连接成功"><a href="#2-连接成功" class="headerlink" title="2. 连接成功"></a>2. 连接成功</h4><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/15/vdCyVS.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> CentOS </tag>
            
            <tag> VMvare </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui中el-tree组件节点全展开与全收缩功能实现</title>
      <link href="/2020-05-05-element-ui-zhong-el-tree-zu-jian-jie-dian-quan-zhan-kai-yu-quan-shou-suo-gong-neng-shi-xian.html"/>
      <url>/2020-05-05-element-ui-zhong-el-tree-zu-jian-jie-dian-quan-zhan-kai-yu-quan-shou-suo-gong-neng-shi-xian.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、功能描述"><a href="#一、功能描述" class="headerlink" title="一、功能描述"></a>一、功能描述</h3><ul><li><strong>实现</strong>： element-ui中el-tree组件全部节点的展开与收缩功能。</li><li><strong>版本</strong>： “element-ui”: “^2.3.7”。</li></ul><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;tree-container&quot;&gt;    &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onExpand&quot;&gt;&#123;&#123;this.expandAll?&#39;收缩&#39;:&#39;展开&#39;&#125;&#125;所有节点&lt;&#x2F;el-button&gt;    &lt;el-tree :data&#x3D;&quot;data&quot; ref&#x3D;&quot;tree&quot;&gt;&lt;&#x2F;el-tree&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;  export default &#123;    data() &#123;      return &#123;          expandAll: false,        data: [&#123;          label: &#39;一级 1&#39;,          children: [&#123;            label: &#39;二级 1-1&#39;,            children: [&#123;              label: &#39;三级 1-1-1&#39;            &#125;]          &#125;]        &#125;, &#123;          label: &#39;一级 2&#39;,          children: [&#123;            label: &#39;二级 2-1&#39;,            children: [&#123;              label: &#39;三级 2-1-1&#39;            &#125;]          &#125;, &#123;            label: &#39;二级 2-2&#39;,            children: [&#123;              label: &#39;三级 2-2-1&#39;            &#125;]          &#125;]        &#125;]      &#125;;    &#125;,    methods: &#123;      &#x2F;&#x2F; 节点展开      async onExpand () &#123;        try &#123;          await this.$confirm(&#39;确认要展开所有节点?&#39;, &#39;提示&#39;, &#123;            confirmButtonText: &#39;确定&#39;,            cancelButtonText: &#39;取消&#39;,            type: &#39;warning&#39;          &#125;)          this.expandAll &#x3D; !this.expandAll          &#x2F;&#x2F; 改变每个节点的状态          this.changeTreeNodeStatus(this.$refs.tree.store.root)        &#125; catch (e) &#123;          this.$message(&#123;            type: &#39;info&#39;,            message: e &#x3D;&#x3D;&#x3D; &#39;cancel&#39; ? &#39;取消操作&#39; : &#39;操作失败&#39;          &#125;)        &#125;      &#125;,      &#x2F;&#x2F; 改变节点的状态      changeTreeNodeStatus (node) &#123;        node.expanded &#x3D; this.expandAll        for (let i &#x3D; 0; i &lt; node.childNodes.length; i++) &#123;          &#x2F;&#x2F; 改变节点的自身expanded状态          node.childNodes[i].expanded &#x3D; this.expandAll          &#x2F;&#x2F; 遍历子节点          if (node.childNodes[i].childNodes.length &gt; 0) &#123;            this.changeTreeNodeStatus(node.childNodes[i])          &#125;        &#125;      &#125;    &#125;  &#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、最终效果"><a href="#三、最终效果" class="headerlink" title="三、最终效果"></a>三、最终效果</h3><p><a href="https://snaillu.gitee.io/portfolio/demo/tree-expand">demo地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> element-ui </tag>
            
            <tag> el-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用http-server启动本地服务开发静态页面</title>
      <link href="/2020-05-02-shi-yong-http-server-da-jian-ben-di-fu-wu-qi-kai-fa-jing-tai-ye-mian.html"/>
      <url>/2020-05-02-shi-yong-http-server-da-jian-ben-di-fu-wu-qi-kai-fa-jing-tai-ye-mian.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-全局安装http-server"><a href="#1-全局安装http-server" class="headerlink" title="1. 全局安装http-server"></a>1. 全局安装<code>http-server</code></h3><p>工具：<code>Git Bash</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> http-server -g  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-进入项目根目录"><a href="#2-进入项目根目录" class="headerlink" title="2. 进入项目根目录"></a>2. 进入项目根目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /d/document/projects/wxCoupon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-启动http-server"><a href="#3-启动http-server" class="headerlink" title="3. 启动http-server"></a>3. 启动<code>http-server</code></h3><p>在命令行中，接着输入以下命令，启动<code>http-server</code>服务器，默认端口号为<code>8080</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http-server -open<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-查看效果"><a href="#4-查看效果" class="headerlink" title="4. 查看效果"></a>4. 查看效果</h3><p>正常启动后，会出现以下信息：<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUC8u8.png"></p><p>此时，在浏览器中访问电脑端访问地址并打开开发者工具，即可看到浏览器端模拟的开发效果。<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUCGDS.png"></p><p>使用手机（需要和电脑处于同一局域网中）访问手机端访问地址，即可实现真机查看开发效果：<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUCJHg.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http-server </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React+Webpack项目中使用Iconfont字体图标</title>
      <link href="/2020-05-02-react-webpack-xiang-mu-zhong-shi-yong-iconfont-zi-ti-tu-biao.html"/>
      <url>/2020-05-02-react-webpack-xiang-mu-zhong-shi-yong-iconfont-zi-ti-tu-biao.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、字体图标"><a href="#1、字体图标" class="headerlink" title="1、字体图标"></a>1、字体图标</h3><p>在<strong>Iconfont官网</strong>，收藏自己要用的图标到自己的项目下，下载后将文件解压：<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUC4v6.png"></p><blockquote><p>Tips: 其中<code>demo</code>开头的文件为图标样式示例文件，可以在浏览器中打开，便于使用图标时查看图标名称或编码。可以不放到项目中。</p></blockquote><h3 id="2、项目中导入图标文件"><a href="#2、项目中导入图标文件" class="headerlink" title="2、项目中导入图标文件"></a>2、项目中导入图标文件</h3><p>将所需的字体文件和样式文件复制到项目的静态资源文件夹中：<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUCWCR.png"></p><h3 id="3、引入图标样式"><a href="#3、引入图标样式" class="headerlink" title="3、引入图标样式"></a>3、引入图标样式</h3><p>在<code>App.js</code>中或者需要使用图标字体样式的组件中引入<code>iconfont.css</code>文件：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token string">'../../style/iconfont/iconfont.css'</span><span class="token punctuation">;</span>  <span class="token comment">// 注意路径不要写错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、使用图标"><a href="#4、使用图标" class="headerlink" title="4、使用图标"></a>4、使用图标</h3><p>在组件中要使用图标字体的位置，可以通过使用<code>iconfont类</code>或<code>unicode编码</code>来实现图标效果：  </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 使用类名来实现图标效果</span><span class="token comment">// iconfont为iconfont.css文件中定义的类名，必写</span><span class="token comment">// icon-meishi 为iconfont.css文件中要使用的图标类名</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont icon-meishi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>     <span class="token comment">// jsx文件</span><span class="token comment">// 使用unicode来实现图标效果</span><span class="token comment">// iconfont为iconfont.css文件中定义的类名，必写</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">&amp;#xe61c;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token comment">// jsx文件    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、编译报错"><a href="#5、编译报错" class="headerlink" title="5、编译报错"></a>5、编译报错</h3><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUCf81.png"><br>无法解析处理<code>ttf</code>字体文件，需要安装对应的加载器。</p><h3 id="6、安装file-loader"><a href="#6、安装file-loader" class="headerlink" title="6、安装file-loader"></a>6、安装file-loader</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> file-loader --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>webpack.config.js</code>中配置：<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUChgx.png"></p><h3 id="7、实现效果"><a href="#7、实现效果" class="headerlink" title="7、实现效果"></a>7、实现效果</h3><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUC259.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Webpack </tag>
            
            <tag> Iconfont </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法总结</title>
      <link href="/2020-04-27-markdown-ji-ben-yu-fa-zong-jie.html"/>
      <url>/2020-04-27-markdown-ji-ben-yu-fa-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><h4 id="1-段落和换行"><a href="#1-段落和换行" class="headerlink" title="1. 段落和换行"></a>1. 段落和换行</h4><p><strong>语法1：空行换行</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是第一个段落......(这里有一个空行)这是第二个段落......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong><br>段落1…..</p><p>段落2…..</p><p><strong>语法2：硬换行</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是第一个段落....(这里有两个及以上的空格)这是第二个段落....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>实际效果:</strong><br>这是第一个段落….<br>这是第二个段落….</p><h4 id="2-标题"><a href="#2-标题" class="headerlink" title="2.标题"></a>2.标题</h4><p>Markdown支持两种样式的标题书写形式：Setext和atx。</p><ul><li><strong>Setext书写形式</strong></li></ul><p><strong>语法：使用=和-来区分标记级别</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">This is an h1<span class="token punctuation">=============</span></span>    <span class="token title important">this is an h2<span class="token punctuation">-------------</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：<em>其中=和-的长度是任意的</em>  </p><ul><li><strong>atx书写形式</strong></li></ul><p><strong>语法：使用#来区分标题级别（标题和#号之间要加空格）</strong>   </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span>...<span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-块引用"><a href="#3-块引用" class="headerlink" title="3.块引用"></a>3.块引用</h4><p><strong>语法：使用&gt;字符引用段落</strong>  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> This is a block quote with tow paragraphs.<span class="token blockquote punctuation">></span> This is the paragraph two.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong>  </p><blockquote><p>This is a block quote with tow paragraphs.</p></blockquote><blockquote><p>This is the paragraph two.</p></blockquote><h4 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h4><ul><li><strong>无序列表</strong></li></ul><p><strong>语法：使用*、+或-后接列表项</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> yesterday<span class="token list punctuation">*</span> today<span class="token list punctuation">*</span> tomorrow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于：  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">+</span> yesterday<span class="token list punctuation">+</span> today<span class="token list punctuation">+</span> tomorrow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于：  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> yesterday<span class="token list punctuation">-</span> today<span class="token list punctuation">-</span> tomorrow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong>  </p><ul><li>yesterday</li><li>today</li><li>tomorrow</li></ul><ul><li><strong>有序列表</strong></li></ul><p><strong>语法：使用数字加句号（英文）后接列表项</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> Red<span class="token list punctuation">2.</span> Green<span class="token list punctuation">3.</span> Blue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>注：其中的数字序号对实际生成的序号没有影响。</em><br><strong>实际效果：</strong>  </p><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h4 id="5-代码块"><a href="#5-代码块" class="headerlink" title="5.代码块"></a>5.代码块</h4><p><strong>语法：在每一行都缩进4个空格或1个水平制表符</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>注：只有第一个水平制表符或头四个空格会在实际展现时移除，其余的都会在格式中保留下来。</em><br><strong>实际效果：</strong></p><pre><code>&lt;div&gt;    hello world;&lt;/div&gt;</code></pre><h4 id="6-水平线"><a href="#6-水平线" class="headerlink" title="6.水平线"></a>6.水平线</h4><p><strong>语法：一行中只有三个及以上的-、*或_。*和-之间可以有空格。</strong></p><pre class="line-numbers language-none"><code class="language-none">* * ****---___<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong></p><hr><h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><h4 id="1-链接"><a href="#1-链接" class="headerlink" title="1.链接"></a>1.链接</h4><p>Markdown支持两种链接形式：<code>内联</code>和<code>引用</code>。   </p><pre class="line-numbers language-none"><code class="language-none">语法：[链接文本](链接url &quot;标题&quot;) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际效果：</p><p>This is an <a href="http://example.com/" title="example网站">example</a></p><p>也可以先给链接配置id，后面统一配置链接地址和连接标题。语法如下：</p><pre class="line-numbers language-none"><code class="language-none">[链接文本1][链接id1][链接文本2][链接id2][id1]: 链接url  &quot;标题&quot;[id2]: 链接url  &quot;标题&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong></p><p>This is the <a href="http://example1.com/" title="example1站点">example1</a>.<br>This is the <a href="http://example2.com/" title="wxample2站点">example2</a>.</p><h4 id="2-强调"><a href="#2-强调" class="headerlink" title="2.强调"></a>2.强调</h4><p>用单<code>*</code>或单<code>_</code>包裹的文本将会使用<code>&lt;em&gt;</code>标签包裹；用双<code>*</code>或双<code>_</code>包裹的文本将会使用<code>&lt;strong&gt;</code>标签包裹。<br><strong>语法如下：</strong> </p><pre class="line-numbers language-none"><code class="language-none">*重要内容*_重要内容_**更重要的内容**__更重要的内容__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong></p><p>这里有 <em>重要内容</em>。 </p><p>这里有 <em>重要内容</em></p><p>这里有<strong>更重要的内容</strong>。</p><p>这里有 __更重要的内容__。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><p><strong>语法：使用重音符号`包裹代码片段。</strong><br><strong>实际效果：</strong></p><p>Use <code>console.log(result)</code> to print the final result.</p><p>如果代码片段中有使用到<code>`</code>符号，可以使用多重<code>`</code>包裹该符号。语法如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">我们可以使用<span class="token code-snippet code keyword">`` ` ``</span>符号来插入代码片段。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实际效果：</strong></p><p>我们可以使用<code>`</code>符号来插入代码片段。</p><h4 id="4-图片"><a href="#4-图片" class="headerlink" title="4.图片"></a>4.图片</h4><p>语法类似于链接。<br><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">![Alt text](&#x2F;path&#x2F;to&#x2F;img.jpg)![Alt text](&#x2F;path&#x2F;to&#x2F;img.jpg &quot;Optional title&quot;)![Alt text][id][id]: url&#x2F;to&#x2F;image &quot;Optional title&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式无法设置图片的尺寸，要设定尺寸可以使用<code>&lt;img&gt;</code>标签。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="1-自动链接"><a href="#1-自动链接" class="headerlink" title="1.自动链接"></a>1.自动链接</h4><p>“自动”创建URL和email地址链接。<br><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">个人网址：&lt;http:&#x2F;&#x2F;example.com&gt;个人邮箱：&lt;address@example.com&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>实际效果：</strong></p><p>个人网址：<a href="http://example.com/">http://example.com</a><br>个人邮箱：<a href="mailto:&#x61;&#x64;&#100;&#114;&#101;&#115;&#x73;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;">&#x61;&#x64;&#100;&#114;&#101;&#115;&#x73;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;</a></p><h4 id="2-反斜杠转义"><a href="#2-反斜杠转义" class="headerlink" title="2.反斜杠转义"></a>2.反斜杠转义</h4><p>需要展示一些特殊字符，如果不进行转义，markdown文档会将其视作语法符号。Markdown为下面字符提供反斜杠转义。</p><pre class="line-numbers language-none"><code class="language-none">\  反斜线&#96;  重音符*  星号_  下划线&#123;&#125; 花括号[] 方括号() 圆括号#  井号-  连字符.  句号!  感叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">+、\-、\*、&#x2F;是最基本的四则运算。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实际效果：</strong></p><p>+、-、*、/是最基本的四则运算。</p><h4 id="3-表格"><a href="#3-表格" class="headerlink" title="3.表格"></a>3.表格</h4><p><strong>语法：</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">|</span>标题<span class="token number">1</span><span class="token operator">|</span>标题<span class="token number">2</span><span class="token operator">|</span>标题<span class="token number">3</span><span class="token operator">|</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span><span class="token operator">|</span>文本<span class="token number">1</span><span class="token operator">|</span>文本<span class="token number">2</span><span class="token operator">|</span>文本<span class="token number">3</span><span class="token operator">|</span><span class="token operator">|</span>文本<span class="token number">4</span><span class="token operator">|</span>文本<span class="token number">5</span><span class="token operator">|</span>文本<span class="token number">6</span><span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实际效果：</strong><br>|标题1|标题2|标题3|<br>|—-|—-|—-|<br>|文本1|文本2|文本3|<br>|文本4|文本5|文本6|</p><h4 id="4-目录锚点"><a href="#4-目录锚点" class="headerlink" title="4.目录锚点"></a>4.目录锚点</h4><p><strong>语法：</strong></p><pre class="line-numbers language-none"><code class="language-none">[1. 目录1](#cate1)  [2. 目录2](#cate2)  [3. 目录3](#cate3) ...### &lt;span id&#x3D;&quot;cate1&quot;&gt;目录1&lt;&#x2F;span&gt;### &lt;span id&#x3D;&quot;cate2&quot;&gt;目录2&lt;&#x2F;span&gt;### &lt;span id&#x3D;&quot;cate3&quot;&gt;目录3&lt;&#x2F;span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac配置.bash_profile,重启终端后配置失效</title>
      <link href="/2019-12-30-mac-pei-zhi-bash-profile-chong-qi-zhong-duan-hou-pei-zhi-shi-xiao.html"/>
      <url>/2019-12-30-mac-pei-zhi-bash-profile-chong-qi-zhong-duan-hou-pei-zhi-shi-xiao.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-场景"><a href="#1-场景" class="headerlink" title="1.场景"></a>1.场景</h3><p>在Mac中使用mongodb，一般都要在.bash_profile中配置一下环境变量，后面使用会比较方便一点。<br>遇到的问题状况是：配置.bash_profile后，source了一下，然后启动了mongodb，这时又新建了一个终端窗口去连接数据库，去执行mongo命令，提示:<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUPfoQ.png" alt="vUPfoQ.png"></p><h3 id="2-原因"><a href="#2-原因" class="headerlink" title="2.原因"></a>2.原因</h3><p>使用的终端是<code>zsh</code>，zsh加载的是<code> ~/.zshrc</code>文件，而<code>.zshrc</code>文件中并没有定义任务环境变量</p><h3 id="3-解决"><a href="#3-解决" class="headerlink" title="3.解决"></a>3.解决</h3><ol><li>终端中执行命令，打开<code>.zshrc</code>文件：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">open</span> -e ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在<code>~/.zshrc</code>文件最后，增加一行：</li></ol><pre class="line-numbers language-none"><code class="language-none">source ~&#x2F;.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>执行命令，使其立即生效</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、新建窗口，测试：</p><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUP4ij.png" alt="vUP4ij.png"></p><p>PS:</p><blockquote><p>profile（/etc/profile），用于设置系统级的环境变量和启动程序，在这个文件下配置会对所有用户生效。当用户登录（login）时，文件会被执行，并从/etc/profile.d目录的配置文件中查找shell设置。<br>一般不建议在/etc/profile文件中添加环境变量，因为在这个文件中添加的设置会对所有用户起作用。<br>bash_profile只有单一用户有效，文件存储位于~/.bash_profile，该文件是一个用户级的设置，可以理解为某一个用户的profile目录下。这个文件同样也可以用于配置环境变量和启动程序，但只针对单个用户有效。<br>和profile文件类似，bash_profile也会在用户登录（login）时生效，也可以用于设置环境变理。但与profile不同，bash_profile只会对当前用户生效。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> zsh </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发问题记录</title>
      <link href="/2019-12-15-wei-xin-xiao-cheng-xu-kai-fa-wen-ti-zong-jie.html"/>
      <url>/2019-12-15-wei-xin-xiao-cheng-xu-kai-fa-wen-ti-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-页面跳转过程的参数传递"><a href="#1-页面跳转过程的参数传递" class="headerlink" title="1. 页面跳转过程的参数传递"></a>1. 页面跳转过程的参数传递</h3><ul><li><p>单个普通参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"../api/getOrderList?orderStatus="</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>多个普通参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 多个参数之间使用 "&amp;" 分割</span>wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"../api/getOrderList?orderStatus="</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">+</span><span class="token string">"&amp;psize="</span><span class="token operator">+</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"&amp;pno="</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>传递对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 对象中不带 "?"</span><span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">orderStatus</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>     <span class="token literal-property property">psize</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>    <span class="token literal-property property">pno</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"../api/getOrderList?params="</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 接收页</span><span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 对象中带 "?"</span><span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">orderStatus</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">psize</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>    <span class="token literal-property property">pno</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">picUrl</span><span class="token operator">:</span>"https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>pic<span class="token punctuation">.</span>bonwebuy<span class="token punctuation">.</span>com<span class="token operator">/</span>sources<span class="token operator">/</span>images<span class="token operator">/</span>goods<span class="token operator">/</span><span class="token constant">MB</span><span class="token operator">/</span><span class="token number">653434255</span><span class="token punctuation">.</span>png<span class="token operator">?</span>x<span class="token operator">-</span>oss<span class="token operator">-</span>process<span class="token operator">=</span>image<span class="token operator">/</span>resize<span class="token punctuation">,</span>m_fill<span class="token punctuation">,</span>w_500<span class="token punctuation">,</span>h_500<span class="token operator">/</span>quality<span class="token punctuation">,</span>q_90<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"../api/getOrderList?params="</span><span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 接收页</span><span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>suitGoodsList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-input高度设置小于45prx时无效"><a href="#2-input高度设置小于45prx时无效" class="headerlink" title="2. input高度设置小于45prx时无效"></a>2. input高度设置小于45prx时无效</h3><p>在调试购物车商品数量框时，发现中间输入框与左右两侧数量增减框高度不一致，CSS中调小输入框高度仍无效，在微信开发者工具中调节输入框高度值，发现小于<code>45rpx</code>时，高度不再变化。<br><strong>解决</strong>：设置高度的同时也要设置<code>line-height</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.input</span> <span class="token punctuation">&#123;</span>    height：40rpx<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 40rpx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-自定义顶部导航栏计算"><a href="#3-自定义顶部导航栏计算" class="headerlink" title="3. 自定义顶部导航栏计算"></a>3. 自定义顶部导航栏计算</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 小程序自定义导航栏情况下，获取导航栏高度 * @return &#123;Object&#125; 返回状态栏高度和导航栏高度以及胶囊高度 */</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getNavigationBarHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">//  设备信息</span><span class="token keyword">const</span> systemInfo <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getSystemInfoSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 状态栏高度</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> statusBarHeight <span class="token punctuation">&#125;</span> <span class="token operator">=</span> systemInfo<span class="token punctuation">;</span><span class="token comment">// 右上角胶囊按钮位置信息</span><span class="token keyword">const</span> menuButtonInfo <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getMenuButtonBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> top<span class="token punctuation">,</span> height <span class="token punctuation">&#125;</span> <span class="token operator">=</span> menuButtonInfo<span class="token punctuation">;</span><span class="token comment">// 计算公式</span><span class="token comment">// 导航栏高度 = 状态栏到胶囊的间距（胶囊距上距离-状态栏高度） * 2 + 胶囊高度，这里是最小高度</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">navigationBarHeight</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>top <span class="token operator">-</span> statusBarHeight<span class="token punctuation">)</span> <span class="token operator">+</span> height<span class="token punctuation">,</span>statusBarHeight<span class="token punctuation">,</span><span class="token literal-property property">menuButtonHeight</span><span class="token operator">:</span> height<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-页面中存在定时器导致点击事件出现延迟的问题"><a href="#4-页面中存在定时器导致点击事件出现延迟的问题" class="headerlink" title="4. 页面中存在定时器导致点击事件出现延迟的问题"></a>4. 页面中存在定时器导致点击事件出现延迟的问题</h3><p><strong>应用场景：</strong> 计时答题，计时器在运行时，按钮的点击事件感觉很卡顿，要反应一会才会有选中效果，去掉计时器，按钮点击效果就很顺畅。H5中不存在这个问题，只有小程序中有这种情况。暂时没找到解决方案。<br><strong>解决思路：</strong></p><ul><li>启用多线程worker</li></ul><h3 id="5-new-Date-39-2020-11-11-13-23-32-39-在IOS中报错问题"><a href="#5-new-Date-39-2020-11-11-13-23-32-39-在IOS中报错问题" class="headerlink" title="5. new Date(&#39;2020-11-11 13:23:32&#39;)在IOS中报错问题"></a>5. <code>new Date(&#39;2020-11-11 13:23:32&#39;)</code>在IOS中报错问题</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token string">'2020-11-11 23:23:32'</span><span class="token punctuation">;</span><span class="token keyword">const</span> transformedTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-wx-canvasToTempFilePath导出的图片在IOS中无法显示"><a href="#6-wx-canvasToTempFilePath导出的图片在IOS中无法显示" class="headerlink" title="6. wx.canvasToTempFilePath导出的图片在IOS中无法显示"></a>6. <code>wx.canvasToTempFilePath</code>导出的图片在IOS中无法显示</h3><p><strong>解决思路：</strong></p><ul><li>确认画布尺寸是否过大，超出了屏幕尺寸（IOS中canvas尺寸超出屏幕，会绘制的图片有可能会出现空白）</li><li>确认canvas中的图片是否绘制正确，然后再导出</li><li>确认<code>canvas</code>api是否是旧版接口，若是旧版接口，<code>wx.canvasToTempFilePath()</code>需要在<code>draw()</code>回调中调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下安装和使用MongoDB（下载压缩包的方式）</title>
      <link href="/2019-12-10-mac-xia-an-zhuang-he-shi-yong-mongodb.html"/>
      <url>/2019-12-10-mac-xia-an-zhuang-he-shi-yong-mongodb.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h3><p>官网下载地址：<a href="https://www.mongodb.com/download-center/community">MongoDB Download Center | Community</a>. community版本可以免费使用<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUi9Qx.png" alt="vUi9Qx.png"></p><p>下载完成后，将其解压后拷贝至<code>/usr/local</code>目录下。</p><blockquote><p>Tips：如何进入<code>/usr/local</code>目录？<br>打开<code>Finder</code>，快捷键<code>command+shift+G</code>，弹出弹窗，输入<code>/usr/local</code>，回车即可</p></blockquote><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><ul><li>打开终端窗口，输入命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">open</span> -e ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>弹出文本编辑窗口后，在<code>.bash_profile</code>中配置<code>MongoDB</code>的环境变量</li></ul><pre class="line-numbers language-none"><code class="language-none">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUipS1.png" alt="vUipS1.png"></p><ul><li>保存后关闭窗口，使用命令使配置生效</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用命令测试配置是否成功</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mongod -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUiCy6.png" alt="vUiCy6.png"><br>成功输出版本号，说明以上步骤成功完成。如果出现<code>command not found</code>，证明配置失败，解决办法见<a href="http://localhost:4000/2019-12-30-mac-pei-zhi-bash-profile-chong-qi-zhong-duan-hou-pei-zhi-shi-xiao.html">Mac配置.bash_profile失效</a>。</p><h3 id="3-运行MongoDB"><a href="#3-运行MongoDB" class="headerlink" title="3.运行MongoDB"></a>3.运行MongoDB</h3><ul><li>在根目录下创建数据库文件夹和日志文件夹</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /database/data<span class="token function">sudo</span> <span class="token function">mkdir</span> -p /database/log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>给新建的文件夹开放权限</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> YOUR_USERNAME /database/data<span class="token function">sudo</span> <span class="token function">chown</span> YOUR_USERNAME /database/log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>配置<code>mongod.conf</code>文件<br>在 <code>/usr/local/etc/</code> 目录下新建 <code>mongod.conf</code> 文件，将上面创建的文件夹配置成<code>MongoDB</code>的数据库路径和日志路径</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">systemLog:    destination: file    path: /database/log/mongod.logstorage:    dbPath: ⁨/database/datanet:    bindIp: 127.0.0.1    port: 27017 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行MongoDB</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mongod --config /usr/local/etc/mongod.conf // 如果没有创建全局路径 <span class="token environment constant">PATH</span>，需要进入以下目录<span class="token builtin class-name">cd</span> ~<span class="token builtin class-name">cd</span> /usr/local/xxx/bin   //xxx是mongodb安装包的文件夹名<span class="token function">sudo</span> ./mongod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-校验MongoDB服务"><a href="#4-校验MongoDB服务" class="headerlink" title="4.校验MongoDB服务"></a>4.校验MongoDB服务</h3><ul><li>验证mongoDB服务是否已启动<br>新打开一个终端窗口，输入以下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">grep</span> mongod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会显示服务启动事件和启动方式等信息。</p><ul><li>此时也可以打开浏览器，访问localhost:27017，会出现以下内容：</li></ul><pre class="line-numbers language-none"><code class="language-none">It looks like you are trying to access MongoDB over HTTP on the native driver port.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-连接数据库"><a href="#5-连接数据库" class="headerlink" title="5.连接数据库"></a>5.连接数据库</h3><p>新打开一个终端，运行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mongo// 如果没有创建全局路径 <span class="token environment constant">PATH</span>，需要进入以下目录<span class="token builtin class-name">cd</span> ~<span class="token builtin class-name">cd</span> /usr/local/xxx/bin   //xxx是mongodb安装包的文件夹名<span class="token function">sudo</span> ./mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现以下内容，证明成功连接到了数据库<br><img src="/medias/loading.gif" data-original="https://s1.ax1x.com/2022/08/14/vUPzWR.png" alt="vUPzWR.png"></p><p>如果出现<code>command not found</code>，证明配置失败，解决办法见<a href="http://localhost:4000/2019-12-30-mac-pei-zhi-bash-profile-chong-qi-zhong-duan-hou-pei-zhi-shi-xiao.html">Mac配置.bash_profile失效</a>。</p><h3 id="6-断开与数据库的连接及关闭MongoDB服务"><a href="#6-断开与数据库的连接及关闭MongoDB服务" class="headerlink" title="6.断开与数据库的连接及关闭MongoDB服务"></a>6.断开与数据库的连接及关闭MongoDB服务</h3><p>在连接数据库和启动MongoDB服务的终端窗口中按下<code>Ctrl+C</code>即可断开数据库连接及关闭MongoDB服务。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6常用特性总结</title>
      <link href="/2019-10-30-es6-chang-yong-te-xing-zong-jie.html"/>
      <url>/2019-10-30-es6-chang-yong-te-xing-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-let-const"><a href="#1-let-const" class="headerlink" title="1.let/const"></a>1.let/const</h3><p><code>let</code> 用来声明一个局部变量，用法类似于 <code>var</code>，但是它所声明的变量，只在 <code>let</code> 声明所在的块级作用域内有效。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>const</code> 用来声明一个只读的常量，作用域与 <code>let</code> 相同（声明所在的块级作用域），一旦定义之后不可以修改，不过如果声明的变量如果是引用类型的，可以修改它的属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: invalid assignment to const `PI'</span><span class="token keyword">const</span> <span class="token constant">PERSON</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token constant">PERSON</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Jack'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PERSON</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Jack'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h3><ul><li>参数的默认值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "hello","world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>rest</code> 参数<br><code>rest</code> 参数的形式为<code>...变量名</code>, 用于获取函数的多余参数，<code>rest</code> 参数是一个数组，可以用于替代 <code>arguments</code> 对象。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 普通排序写法，使用arguments</span><span class="token keyword">function</span> <span class="token function">sortNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用rest参数</span><span class="token keyword">const</span> <span class="token function-variable function">sortNumbers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>numbers</span><span class="token punctuation">)</span> <span class="token operator">=></span> numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>箭头函数<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 或</span><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=></span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><code>this</code> 在箭头函数中的使用<br>箭头函数体内的 <code>this</code> 对象，是定义时所在的对象，不是使用时所在的对象。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token punctuation">;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// this指向运行时所在的作用域</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span class="token comment">// this指向定义时的对象</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Mike"</span><span class="token comment">// "Tom"  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-展开操作符"><a href="#3-展开操作符" class="headerlink" title="3.展开操作符"></a>3.展开操作符</h3><ul><li><p>用于函数调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// ES6之前的用法</span><span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用展开操作符：</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用于数组字面量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// es6之前的用法</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,5,6]</span><span class="token comment">// 展开操作符用法</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象的展开运算符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">14</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>student <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>student<span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'male'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="4-模板字符串"><a href="#4-模板字符串" class="headerlink" title="4.模板字符串"></a>4.模板字符串</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Mike'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "My name is Mike"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-解构语法"><a href="#5-解构语法" class="headerlink" title="5.解构语法"></a>5.解构语法</h3><ul><li><p>解构数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">// 按照数组序号，一一对应 a='blue',b='green',c='red'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>解构对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">&#125;</span> <span class="token operator">=</span> person<span class="token punctuation">;</span> <span class="token comment">// 与属性名一一对应 name='Jack',age=20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="6-类"><a href="#6-类" class="headerlink" title="6.类"></a>6.类</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 静态方法</span>    <span class="token keyword">static</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Here is a static method'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> cow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'betty'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cow<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// My name is betty, age is 2</span>Animal<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Here is a static method</span><span class="token comment">// 派生类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 继承父类属性</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 重写shout方法</span>    <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 使用super调用父类方法</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,color is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Bagong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// My name is Bagong, age is 3, color is black</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-模块"><a href="#7-模块" class="headerlink" title="7.模块"></a>7.模块</h3><ul><li>一个模块的导入/导出  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出</span><span class="token comment">// module1.js</span><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is func1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> func1<span class="token punctuation">;</span> <span class="token comment">// 使用export导出这个模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> func1 <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span> <span class="token comment">// 使用import导入这个模块（假设两个文件在同级目录下）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>一个模块的多个导出  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// module1.js</span><span class="token comment">// 形式1，逐个导出</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 导出变量</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 导出方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is func1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nike"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 导出变量</span><span class="token comment">// 形式2，底部集体导出</span><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>                   <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is func1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nike"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> <span class="token constant">PI</span><span class="token punctuation">,</span> func1<span class="token punctuation">,</span> person <span class="token punctuation">&#125;</span> <span class="token comment">// 导出的变量或方法都写在这里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入方式1，使用对象解构加载</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">PI</span><span class="token punctuation">,</span>func1<span class="token punctuation">,</span>person <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span><span class="token comment">// 导入方式2，作为一个整体导入</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> util <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模块的默认导出<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// module1.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 默认导出的同时，也可以定义其他的非默认导出</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入</span><span class="token comment">// 导入默认导出的模块不需要使用&#123;&#125;包裹，同时可以在导入处自定义名称 </span><span class="token keyword">import</span> importedPerson<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> func1 <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>导入导出重命名<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// module1.js</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用as重命名导出</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> sayHi <span class="token keyword">as</span> sayHello <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 导入文件时只能通过sayHello导入</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sayHello <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出模块文件module1.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 导入时重命名</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sayHi <span class="token keyword">as</span> sayHello <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./module1.js'</span><span class="token punctuation">;</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只能调用sayHello,无法使用sayHi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Set-Map"><a href="#8-Set-Map" class="headerlink" title="8.Set/Map"></a>8.Set/Map</h3><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p><code>Set</code>是不包含重复值的有序列表，常用来检查某个值是否存在。  </p><h5 id="Set的方法"><a href="#Set的方法" class="headerlink" title="Set的方法"></a>Set的方法</h5><ul><li><code>add()</code>: 添加值</li><li><code>has()</code>: 测试值是否存在</li><li><code>delete()</code>: 删除单个值</li><li><code>clear()</code>: 清除所有值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//2 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1</span>set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Set上的forEach方法"><a href="#Set上的forEach方法" class="headerlink" title="Set上的forEach方法"></a>Set上的forEach方法</h5><p>与数组上的<code>forEach</code>方法类似，接收一个回调函数，回调函数接收三个参数：</p><ol><li>Set中下个位置的值</li><li>Set中下个位置的值</li><li>目标Set自身</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ownerSet</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">", "</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ownerSet <span class="token operator">===</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token boolean">true</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token boolean">true</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="利用Set为数组去重"><a href="#利用Set为数组去重" class="headerlink" title="利用Set为数组去重"></a>利用Set为数组去重</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">eliminateDuplicates</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> noDuplicates <span class="token operator">=</span> <span class="token function">eliminateDuplicates</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>noDuplicates<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1,2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><code>Map</code>类型是键值对的<code>有序列表</code>，常用作缓存，存储数据以便以后快速检索。<code>Map</code>的<code>键</code>和<code>值</code>都可以是<code>任意类型</code>。</p><h5 id="Map的方法"><a href="#Map的方法" class="headerlink" title="Map的方法"></a>Map的方法</h5><ul><li><code>set(key,value)</code>: 给<code>Map</code>添加项 </li><li><code>get(key)</code>: 提取键值对应的值</li><li><code>has(key)</code>：判断键是否存在于<code>Map</code>中</li><li><code>delete(key)</code>：移除Map中的键以及对应的值</li><li><code>clear()</code>： 移除Map中所有的键与值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Jack"</span>map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Map上的forEach方法"><a href="#Map上的forEach方法" class="headerlink" title="Map上的forEach方法"></a>Map上的forEach方法</h5><p>接收一个能接收三个参数的回调函数：  </p><ol><li>Map中下个位置的值</li><li>该值所对应的键</li><li>目标Map本身</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Nicholas"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ownerMap</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ownerMap <span class="token operator">===</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果</span>name<span class="token punctuation">,</span>Nicholas<span class="token boolean">true</span>age<span class="token punctuation">,</span> <span class="token number">20</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
